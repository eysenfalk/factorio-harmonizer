{
  "analyzed_mods": [
    "lignumis",
    "aai-industry",
    "Hovercrafts",
    "snouz-big-accumulator",
    "common-prototypes",
    "advanced-centrifuge",
    "terrapalus",
    "helmod",
    "DoubleWagons",
    "cubium",
    "bobgreenhouse",
    "FluidMustFlow",
    "YARM",
    "bobenemies",
    "Age-of-Production",
    "snouz_better_substation",
    "LtnManager",
    "PavementDriveAssistContinued",
    "NightvisionToggles",
    "dea-dia-system",
    "SpidertronPatrols",
    "new-diagonal-inserter",
    "calculator-ui",
    "minimalist-rails",
    "Tapeline",
    "OmegaDrill",
    "lilys-cubeine",
    "Automatic_Train_Painter",
    "castra",
    "tenebris-prime",
    "vulcanus-sulfuric-bacteria",
    "crushing-industry-productivity-research",
    "RateCalculator",
    "GUI_Unifyer",
    "RampantFixed",
    "Shortcuts-ick",
    "aai-vehicles-ironclad",
    "Cold_biters",
    "alien-module",
    "bobores",
    "boblogistics",
    "ChangeInserterDropLane",
    "crushing-industry",
    "Planet-Hopper",
    "aai-vehicles-laser-tank",
    "ballistic_missile",
    "atomic-artillery-reborn",
    "vtk-cannon-turret",
    "Kux-OrbitalIonCannon",
    "promethium-quality",
    "Moshine-assets",
    "maraxsis",
    "WaterExtractor",
    "PlutoniumEnergy",
    "cerys-lunaponics",
    "Igrys",
    "FilterChests",
    "aai-signal-transmission",
    "Factorio-Tiberium",
    "secretas",
    "Robocharger-Updated",
    "quirkycat_boron",
    "Noxys_Trees",
    "Paracelsin",
    "Aircraft-space-age",
    "bobmodules",
    "FNEI",
    "Krastorio2-spaced-out",
    "Toxic_biters",
    "erm_toss_economy",
    "Explosive_biters",
    "nixie-tubes",
    "UltimateResearchQueue2",
    "VoidProcessing",
    "erm_zerg_economy",
    "CursorEnhancements",
    "erm_zerg",
    "se-space-trains",
    "Fluid-level-indicator",
    "grappling-gun",
    "lex-aircraft",
    "aquilo-seabloom-algaculture",
    "quirkycat_base",
    "Flare Stack",
    "OilOutpostPlanner",
    "Todo-List",
    "orbital-transfer",
    "deadlock-beltboxes-loaders",
    "aai-vehicles-flame-tumbler",
    "reverse-factory",
    "fulgora-coralmium-agriculture",
    "any-planet-start",
    "bobvehicleequipment",
    "wood-industry",
    "pollution-as-surface-property",
    "EditorExtensions",
    "aai-vehicles-chaingunner",
    "informatron",
    "Warehousing",
    "Placeables",
    "More_Ammo",
    "HelicopterRevival",
    "gleba-reborn",
    "equipment-gantry",
    "bobpower",
    "Electric Furnaces",
    "More_Repair_Packs",
    "Wood-Walls",
    "lane-splitters",
    "bobplates",
    "foundry-restructuring",
    "jetpack",
    "PlanetsLib",
    "bobmining",
    "lilys-injector",
    "VehicleSnap",
    "astroponics",
    "WipMod_TA-miners",
    "metal-and-stars",
    "long_stack_inserter",
    "janus",
    "MouseOverConstruction",
    "slp-dyson-sphere-reworked",
    "aai-programmable-vehicles",
    "inventory-mover",
    "aai-containers",
    "aai-vehicles-hauler",
    "aai-vehicles-warden",
    "bobinserters",
    "bobelectronics",
    "shield-projector",
    "aai-signals",
    "bobassembly",
    "UtilizationMonitorBlargh",
    "ModuleInserterSimplified",
    "EarlyvatedRails",
    "Moshine",
    "bobequipment",
    "enemyracemanager",
    "corrundum",
    "Cerys-Moon-of-Fulgora",
    "erm_toss",
    "planet-muluna",
    "infinite-quality-tiers",
    "aai-vehicles-flame-tank",
    "TimeTools",
    "wood-military",
    "alloy-smelting",
    "snouz-big-solar-panel",
    "RPGsystem",
    "BlueprintTools",
    "Electric_flying_enemies",
    "atan-nuclear-science",
    "space-spidertron",
    "quirkycat_machines",
    "planet-arrakis",
    "Flow Control",
    "StopgapNukes"
  ],
  "analysis_timestamp": "2025-06-14T17:45:42.047309",
  "summary": {
    "total_prototypes": 2837,
    "conflicted_prototypes": 318,
    "critical_issues": 0,
    "high_issues": 43,
    "medium_issues": 236,
    "low_issues": 86
  },
  "issues": [
    {
      "issue_id": "CONFLICT_ITEM_ELECTRIC-MINING-DRILL",
      "severity": "medium",
      "title": "Item Conflict: electric-mining-drill",
      "description": "Item 'electric-mining-drill' modified by multiple mods",
      "affected_prototypes": [
        "item.electric-mining-drill"
      ],
      "conflicting_mods": [
        "bobmining",
        "Krastorio2-spaced-out",
        "OmegaDrill",
        "aai-industry"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_STEEL-PLATE",
      "severity": "medium",
      "title": "Item Conflict: steel-plate",
      "description": "Item 'steel-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.steel-plate"
      ],
      "conflicting_mods": [
        "slp-dyson-sphere-reworked",
        "aai-industry",
        "VoidProcessing",
        "Hovercrafts",
        "aai-vehicles-ironclad",
        "Cold_biters",
        "alien-module",
        "boblogistics",
        "crushing-industry",
        "se-space-trains",
        "Planet-Hopper",
        "shield-projector",
        "Fluid-level-indicator",
        "grappling-gun",
        "lex-aircraft",
        "aquilo-seabloom-algaculture",
        "cubium",
        "Flare Stack",
        "bobassembly",
        "aai-vehicles-laser-tank",
        "ballistic_missile",
        "FluidMustFlow",
        "bobenemies",
        "vtk-cannon-turret",
        "aai-vehicles-flame-tumbler",
        "bobequipment",
        "snouz_better_substation",
        "corrundum",
        "bobvehicleequipment",
        "Cerys-Moon-of-Fulgora",
        "Warehousing",
        "dea-dia-system",
        "More_Ammo",
        "HelicopterRevival",
        "PlutoniumEnergy",
        "aai-vehicles-flame-tank",
        "alloy-smelting",
        "aai-signal-transmission",
        "bobpower",
        "metal-and-stars",
        "minimalist-rails",
        "secretas",
        "Robocharger-Updated",
        "More_Repair_Packs",
        "OmegaDrill",
        "atan-nuclear-science",
        "bobplates",
        "foundry-restructuring",
        "lilys-cubeine",
        "quirkycat_machines",
        "Aircraft-space-age",
        "castra",
        "tenebris-prime",
        "bobmining",
        "bobmodules",
        "StopgapNukes",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ELECTRIC-ENGINE-UNIT",
      "severity": "medium",
      "title": "Item Conflict: electric-engine-unit",
      "description": "Item 'electric-engine-unit' modified by multiple mods",
      "affected_prototypes": [
        "item.electric-engine-unit"
      ],
      "conflicting_mods": [
        "aai-industry",
        "RampantFixed",
        "Hovercrafts",
        "boblogistics",
        "crushing-industry",
        "lex-aircraft",
        "cubium",
        "ballistic_missile",
        "orbital-transfer",
        "corrundum",
        "Kux-OrbitalIonCannon",
        "bobvehicleequipment",
        "dea-dia-system",
        "aai-signal-transmission",
        "secretas",
        "OmegaDrill",
        "bobplates",
        "Aircraft-space-age",
        "castra",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PROCESSING-UNIT",
      "severity": "medium",
      "title": "Item Conflict: processing-unit",
      "description": "Item 'processing-unit' modified by multiple mods",
      "affected_prototypes": [
        "item.processing-unit"
      ],
      "conflicting_mods": [
        "slp-dyson-sphere-reworked",
        "aai-industry",
        "RampantFixed",
        "Hovercrafts",
        "boblogistics",
        "crushing-industry",
        "se-space-trains",
        "bobelectronics",
        "shield-projector",
        "lex-aircraft",
        "cubium",
        "bobassembly",
        "ballistic_missile",
        "orbital-transfer",
        "atomic-artillery-reborn",
        "Moshine",
        "bobequipment",
        "enemyracemanager",
        "fulgora-coralmium-agriculture",
        "corrundum",
        "Kux-OrbitalIonCannon",
        "bobvehicleequipment",
        "Cerys-Moon-of-Fulgora",
        "HelicopterRevival",
        "PlutoniumEnergy",
        "cerys-lunaponics",
        "aai-signal-transmission",
        "bobpower",
        "metal-and-stars",
        "secretas",
        "More_Repair_Packs",
        "OmegaDrill",
        "atan-nuclear-science",
        "bobplates",
        "Aircraft-space-age",
        "castra",
        "bobmining",
        "astroponics",
        "bobmodules",
        "StopgapNukes",
        "Krastorio2-spaced-out",
        "janus"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_CONCRETE",
      "severity": "medium",
      "title": "Item Conflict: concrete",
      "description": "Item 'concrete' modified by multiple mods",
      "affected_prototypes": [
        "item.concrete"
      ],
      "conflicting_mods": [
        "aai-industry",
        "snouz-big-accumulator",
        "crushing-industry",
        "cubium",
        "ballistic_missile",
        "Moshine",
        "fulgora-coralmium-agriculture",
        "corrundum",
        "Cerys-Moon-of-Fulgora",
        "Moshine-assets",
        "Warehousing",
        "PlutoniumEnergy",
        "alloy-smelting",
        "bobpower",
        "snouz-big-solar-panel",
        "secretas",
        "atan-nuclear-science",
        "tenebris-prime",
        "astroponics",
        "metal-and-stars",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ELECTRIC-FURNACE",
      "severity": "medium",
      "title": "Item Conflict: electric-furnace",
      "description": "Item 'electric-furnace' modified by multiple mods",
      "affected_prototypes": [
        "item.electric-furnace"
      ],
      "conflicting_mods": [
        "cubium",
        "bobassembly",
        "bobplates",
        "aai-industry",
        "lilys-cubeine",
        "Electric Furnaces",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_IRON-PLATE",
      "severity": "medium",
      "title": "Item Conflict: iron-plate",
      "description": "Item 'iron-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.iron-plate"
      ],
      "conflicting_mods": [
        "aai-industry",
        "alien-module",
        "aai-vehicles-warden",
        "aai-vehicles-hauler",
        "boblogistics",
        "terrapalus",
        "crushing-industry",
        "DoubleWagons",
        "lex-aircraft",
        "cubium",
        "Flare Stack",
        "bobassembly",
        "bobgreenhouse",
        "FluidMustFlow",
        "vtk-cannon-turret",
        "Moshine",
        "bobequipment",
        "corrundum",
        "planet-muluna",
        "aai-vehicles-chaingunner",
        "dea-dia-system",
        "More_Ammo",
        "PlutoniumEnergy",
        "equipment-gantry",
        "wood-military",
        "bobpower",
        "secretas",
        "Electric Furnaces",
        "quirkycat_boron",
        "bobplates",
        "Aircraft-space-age",
        "castra",
        "tenebris-prime",
        "bobmining",
        "metal-and-stars",
        "StopgapNukes",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_STONE-BRICK",
      "severity": "medium",
      "title": "Item Conflict: stone-brick",
      "description": "Item 'stone-brick' modified by multiple mods",
      "affected_prototypes": [
        "item.stone-brick"
      ],
      "conflicting_mods": [
        "cubium",
        "planet-muluna",
        "Warehousing",
        "bobassembly",
        "bobplates",
        "aai-industry",
        "dea-dia-system",
        "castra",
        "tenebris-prime",
        "alloy-smelting",
        "boblogistics",
        "crushing-industry",
        "metal-and-stars",
        "lignumis",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_STONE-WALL",
      "severity": "medium",
      "title": "Item Conflict: stone-wall",
      "description": "Item 'stone-wall' modified by multiple mods",
      "affected_prototypes": [
        "item.stone-wall"
      ],
      "conflicting_mods": [
        "cubium",
        "aai-industry"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BURNER-ASSEMBLING-MACHINE",
      "severity": "medium",
      "title": "Item Conflict: burner-assembling-machine",
      "description": "Item 'burner-assembling-machine' modified by multiple mods",
      "affected_prototypes": [
        "item.burner-assembling-machine"
      ],
      "conflicting_mods": [
        "lignumis",
        "aai-industry"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_WATER",
      "severity": "low",
      "title": "Fluid Conflict: water",
      "description": "Fluid 'water' modified by multiple mods",
      "affected_prototypes": [
        "fluid.water"
      ],
      "conflicting_mods": [
        "aai-industry",
        "Cold_biters",
        "StopgapNukes",
        "crushing-industry",
        "terrapalus",
        "bobelectronics",
        "cubium",
        "bobgreenhouse",
        "corrundum",
        "wood-industry",
        "Cerys-Moon-of-Fulgora",
        "planet-muluna",
        "Moshine-assets",
        "dea-dia-system",
        "WaterExtractor",
        "cerys-lunaponics",
        "secretas",
        "quirkycat_boron",
        "Paracelsin",
        "bobplates",
        "castra",
        "vulcanus-sulfuric-bacteria",
        "astroponics",
        "metal-and-stars",
        "lignumis",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_CRUDE-OIL",
      "severity": "low",
      "title": "Fluid Conflict: crude-oil",
      "description": "Fluid 'crude-oil' modified by multiple mods",
      "affected_prototypes": [
        "fluid.crude-oil"
      ],
      "conflicting_mods": [
        "planet-muluna",
        "bobplates",
        "aai-industry",
        "castra",
        "boblogistics",
        "astroponics",
        "metal-and-stars",
        "bobelectronics",
        "janus"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_HEAVY-OIL",
      "severity": "low",
      "title": "Fluid Conflict: heavy-oil",
      "description": "Fluid 'heavy-oil' modified by multiple mods",
      "affected_prototypes": [
        "fluid.heavy-oil"
      ],
      "conflicting_mods": [
        "planet-muluna",
        "bobplates",
        "aai-industry",
        "lilys-cubeine",
        "castra",
        "boblogistics",
        "terrapalus",
        "metal-and-stars",
        "secretas",
        "wood-industry",
        "bobelectronics",
        "corrundum",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_LIGHT-OIL",
      "severity": "low",
      "title": "Fluid Conflict: light-oil",
      "description": "Fluid 'light-oil' modified by multiple mods",
      "affected_prototypes": [
        "fluid.light-oil"
      ],
      "conflicting_mods": [
        "cubium",
        "planet-muluna",
        "bobplates",
        "aai-industry",
        "lilys-cubeine",
        "Cold_biters",
        "castra",
        "boblogistics",
        "metal-and-stars",
        "wood-industry",
        "bobelectronics",
        "corrundum",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_PETROLEUM-GAS",
      "severity": "low",
      "title": "Fluid Conflict: petroleum-gas",
      "description": "Fluid 'petroleum-gas' modified by multiple mods",
      "affected_prototypes": [
        "fluid.petroleum-gas"
      ],
      "conflicting_mods": [
        "cubium",
        "Moshine-assets",
        "planet-muluna",
        "bobplates",
        "bobgreenhouse",
        "aai-industry",
        "lilys-cubeine",
        "VoidProcessing",
        "Cold_biters",
        "castra",
        "boblogistics",
        "wood-industry",
        "bobelectronics",
        "corrundum",
        "StopgapNukes",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SAND",
      "severity": "medium",
      "title": "Item Conflict: sand",
      "description": "Item 'sand' modified by multiple mods",
      "affected_prototypes": [
        "item.sand"
      ],
      "conflicting_mods": [
        "Moshine-assets",
        "aai-industry",
        "Moshine",
        "crushing-industry",
        "wood-industry",
        "quirkycat_base"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_STONE",
      "severity": "medium",
      "title": "Item Conflict: stone",
      "description": "Item 'stone' modified by multiple mods",
      "affected_prototypes": [
        "item.stone"
      ],
      "conflicting_mods": [
        "cubium",
        "Moshine-assets",
        "bobplates",
        "bobgreenhouse",
        "aai-industry",
        "alien-module",
        "vulcanus-sulfuric-bacteria",
        "boblogistics",
        "crushing-industry",
        "secretas",
        "fulgora-coralmium-agriculture",
        "metal-and-stars",
        "corrundum",
        "wood-industry",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_GLASS",
      "severity": "medium",
      "title": "Item Conflict: glass",
      "description": "Item 'glass' modified by multiple mods",
      "affected_prototypes": [
        "item.glass"
      ],
      "conflicting_mods": [
        "Moshine",
        "crushing-industry",
        "quirkycat_base",
        "aai-industry"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_IRON-GEAR-WHEEL",
      "severity": "medium",
      "title": "Item Conflict: iron-gear-wheel",
      "description": "Item 'iron-gear-wheel' modified by multiple mods",
      "affected_prototypes": [
        "item.iron-gear-wheel"
      ],
      "conflicting_mods": [
        "aai-industry",
        "Hovercrafts",
        "aai-vehicles-ironclad",
        "alien-module",
        "aai-vehicles-hauler",
        "aai-vehicles-warden",
        "boblogistics",
        "crushing-industry",
        "DoubleWagons",
        "grappling-gun",
        "cubium",
        "Flare Stack",
        "bobassembly",
        "FluidMustFlow",
        "bobenemies",
        "bobequipment",
        "corrundum",
        "bobvehicleequipment",
        "aai-vehicles-chaingunner",
        "dea-dia-system",
        "HelicopterRevival",
        "aai-vehicles-flame-tank",
        "bobpower",
        "secretas",
        "Robocharger-Updated",
        "OmegaDrill",
        "bobplates",
        "foundry-restructuring",
        "lilys-cubeine",
        "castra",
        "bobmining",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_COPPER-CABLE",
      "severity": "medium",
      "title": "Item Conflict: copper-cable",
      "description": "Item 'copper-cable' modified by multiple mods",
      "affected_prototypes": [
        "item.copper-cable"
      ],
      "conflicting_mods": [
        "aai-industry",
        "snouz-big-accumulator",
        "TimeTools",
        "castra",
        "bobmodules",
        "boblogistics",
        "terrapalus",
        "bobpower",
        "bobequipment",
        "Krastorio2-spaced-out",
        "se-space-trains",
        "secretas",
        "bobelectronics",
        "corrundum",
        "lignumis",
        "bobvehicleequipment",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_IRON-STICK",
      "severity": "medium",
      "title": "Item Conflict: iron-stick",
      "description": "Item 'iron-stick' modified by multiple mods",
      "affected_prototypes": [
        "item.iron-stick"
      ],
      "conflicting_mods": [
        "aai-industry",
        "HelicopterRevival",
        "wood-military",
        "boblogistics",
        "minimalist-rails",
        "corrundum",
        "Krastorio2-spaced-out",
        "grappling-gun"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_COPPER-PLATE",
      "severity": "medium",
      "title": "Item Conflict: copper-plate",
      "description": "Item 'copper-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.copper-plate"
      ],
      "conflicting_mods": [
        "aai-industry",
        "alien-module",
        "boblogistics",
        "crushing-industry",
        "bobelectronics",
        "cubium",
        "bobassembly",
        "bobgreenhouse",
        "bobequipment",
        "corrundum",
        "bobvehicleequipment",
        "Cerys-Moon-of-Fulgora",
        "More_Ammo",
        "PlutoniumEnergy",
        "wood-military",
        "Igrys",
        "aai-signal-transmission",
        "bobpower",
        "secretas",
        "bobplates",
        "lilys-cubeine",
        "castra",
        "bobmodules",
        "lignumis",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_STONE-FURNACE",
      "severity": "medium",
      "title": "Item Conflict: stone-furnace",
      "description": "Item 'stone-furnace' modified by multiple mods",
      "affected_prototypes": [
        "item.stone-furnace"
      ],
      "conflicting_mods": [
        "Flare Stack",
        "bobplates",
        "aai-industry",
        "alloy-smelting",
        "bobpower",
        "Electric Furnaces"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BATTERY",
      "severity": "medium",
      "title": "Item Conflict: battery",
      "description": "Item 'battery' modified by multiple mods",
      "affected_prototypes": [
        "item.battery"
      ],
      "conflicting_mods": [
        "Cold_biters",
        "alien-module",
        "boblogistics",
        "se-space-trains",
        "shield-projector",
        "aai-vehicles-laser-tank",
        "bobequipment",
        "Kux-OrbitalIonCannon",
        "bobvehicleequipment",
        "HelicopterRevival",
        "aai-signal-transmission",
        "bobpower",
        "secretas",
        "Robocharger-Updated",
        "Aircraft-space-age",
        "castra",
        "metal-and-stars",
        "Krastorio2-spaced-out",
        "janus"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_VIRTUAL-SIGNAL-UTILITY",
      "severity": "low",
      "title": "Item-Subgroup Conflict: virtual-signal-utility",
      "description": "Item-Subgroup 'virtual-signal-utility' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.virtual-signal-utility"
      ],
      "conflicting_mods": [
        "informatron",
        "aai-signals"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_VIRTUAL-SIGNAL_SIGNAL-WAYPOINT",
      "severity": "low",
      "title": "Virtual-Signal Conflict: signal-waypoint",
      "description": "Virtual-Signal 'signal-waypoint' modified by multiple mods",
      "affected_prototypes": [
        "virtual-signal.signal-waypoint"
      ],
      "conflicting_mods": [
        "SpidertronPatrols",
        "aai-signals"
      ],
      "root_cause": "Multiple mods modify the same virtual-signal",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_GUN-TURRET",
      "severity": "medium",
      "title": "Item Conflict: gun-turret",
      "description": "Item 'gun-turret' modified by multiple mods",
      "affected_prototypes": [
        "item.gun-turret"
      ],
      "conflicting_mods": [
        "aai-vehicles-chaingunner",
        "HelicopterRevival",
        "Hovercrafts",
        "vtk-cannon-turret",
        "secretas",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_AMMO_FLAMETHROWER-AMMO",
      "severity": "low",
      "title": "Ammo Conflict: flamethrower-ammo",
      "description": "Ammo 'flamethrower-ammo' modified by multiple mods",
      "affected_prototypes": [
        "ammo.flamethrower-ammo"
      ],
      "conflicting_mods": [
        "aai-vehicles-flame-tumbler",
        "aai-vehicles-flame-tank"
      ],
      "root_cause": "Multiple mods modify the same ammo",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ENGINE-UNIT",
      "severity": "medium",
      "title": "Item Conflict: engine-unit",
      "description": "Item 'engine-unit' modified by multiple mods",
      "affected_prototypes": [
        "item.engine-unit"
      ],
      "conflicting_mods": [
        "cubium",
        "foundry-restructuring",
        "FluidMustFlow",
        "HelicopterRevival",
        "aai-vehicles-flame-tank",
        "aai-vehicles-ironclad",
        "Hovercrafts",
        "castra",
        "aai-vehicles-flame-tumbler",
        "crushing-industry",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_FLAMETHROWER",
      "severity": "medium",
      "title": "Item Conflict: flamethrower",
      "description": "Item 'flamethrower' modified by multiple mods",
      "affected_prototypes": [
        "item.flamethrower"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "aai-vehicles-flame-tank"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ADVANCED-CIRCUIT",
      "severity": "medium",
      "title": "Item Conflict: advanced-circuit",
      "description": "Item 'advanced-circuit' modified by multiple mods",
      "affected_prototypes": [
        "item.advanced-circuit"
      ],
      "conflicting_mods": [
        "Hovercrafts",
        "boblogistics",
        "crushing-industry",
        "bobelectronics",
        "lex-aircraft",
        "cubium",
        "bobassembly",
        "aai-vehicles-laser-tank",
        "ballistic_missile",
        "bobenemies",
        "vtk-cannon-turret",
        "aai-vehicles-flame-tumbler",
        "Moshine",
        "bobequipment",
        "PavementDriveAssistContinued",
        "bobvehicleequipment",
        "Cerys-Moon-of-Fulgora",
        "Warehousing",
        "dea-dia-system",
        "PlutoniumEnergy",
        "alloy-smelting",
        "bobpower",
        "metal-and-stars",
        "secretas",
        "Robocharger-Updated",
        "More_Repair_Packs",
        "OmegaDrill",
        "bobplates",
        "Aircraft-space-age",
        "castra",
        "tenebris-prime",
        "bobmining",
        "bobmodules",
        "StopgapNukes",
        "Krastorio2-spaced-out",
        "janus"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_IRON-CHEST",
      "severity": "medium",
      "title": "Item Conflict: iron-chest",
      "description": "Item 'iron-chest' modified by multiple mods",
      "affected_prototypes": [
        "item.iron-chest"
      ],
      "conflicting_mods": [
        "Warehousing",
        "equipment-gantry",
        "aai-vehicles-warden",
        "aai-vehicles-hauler",
        "metal-and-stars"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_GRENADE",
      "severity": "medium",
      "title": "Item Conflict: grenade",
      "description": "Item 'grenade' modified by multiple mods",
      "affected_prototypes": [
        "item.grenade"
      ],
      "conflicting_mods": [
        "cubium",
        "aai-vehicles-ironclad",
        "Cold_biters",
        "castra"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_EXPLOSIVES",
      "severity": "medium",
      "title": "Item Conflict: explosives",
      "description": "Item 'explosives' modified by multiple mods",
      "affected_prototypes": [
        "item.explosives"
      ],
      "conflicting_mods": [
        "PlutoniumEnergy",
        "aai-vehicles-ironclad",
        "Aircraft-space-age",
        "castra",
        "vtk-cannon-turret",
        "corrundum",
        "StopgapNukes",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CREATE-ENTITY_MEDIUM-SCORCHMARK-TINTABLE",
      "severity": "low",
      "title": "Create-Entity Conflict: medium-scorchmark-tintable",
      "description": "Create-Entity 'medium-scorchmark-tintable' modified by multiple mods",
      "affected_prototypes": [
        "create-entity.medium-scorchmark-tintable"
      ],
      "conflicting_mods": [
        "Moshine",
        "aai-vehicles-ironclad",
        "StopgapNukes"
      ],
      "root_cause": "Multiple mods modify the same create-entity",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CREATE-ENTITY_EXPLOSION",
      "severity": "low",
      "title": "Create-Entity Conflict: explosion",
      "description": "Create-Entity 'explosion' modified by multiple mods",
      "affected_prototypes": [
        "create-entity.explosion"
      ],
      "conflicting_mods": [
        "cubium",
        "RampantFixed",
        "More_Ammo",
        "aai-vehicles-ironclad",
        "wood-military",
        "RPGsystem",
        "bobvehicleequipment",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same create-entity",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_TANK",
      "severity": "medium",
      "title": "Item Conflict: tank",
      "description": "Item 'tank' modified by multiple mods",
      "affected_prototypes": [
        "item.tank"
      ],
      "conflicting_mods": [
        "Krastorio2-spaced-out",
        "lex-aircraft",
        "castra",
        "aai-vehicles-laser-tank"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_LASER-TURRET",
      "severity": "medium",
      "title": "Item Conflict: laser-turret",
      "description": "Item 'laser-turret' modified by multiple mods",
      "affected_prototypes": [
        "item.laser-turret"
      ],
      "conflicting_mods": [
        "aai-vehicles-laser-tank",
        "Hovercrafts",
        "terrapalus",
        "secretas",
        "Kux-OrbitalIonCannon"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SOLID-FUEL",
      "severity": "medium",
      "title": "Item Conflict: solid-fuel",
      "description": "Item 'solid-fuel' modified by multiple mods",
      "affected_prototypes": [
        "item.solid-fuel"
      ],
      "conflicting_mods": [
        "cubium",
        "planet-muluna",
        "bobplates",
        "aai-vehicles-laser-tank",
        "Aircraft-space-age",
        "secretas",
        "wood-industry",
        "metal-and-stars",
        "corrundum",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ELECTRONIC-CIRCUIT",
      "severity": "medium",
      "title": "Item Conflict: electronic-circuit",
      "description": "Item 'electronic-circuit' modified by multiple mods",
      "affected_prototypes": [
        "item.electronic-circuit"
      ],
      "conflicting_mods": [
        "alien-module",
        "aai-vehicles-warden",
        "boblogistics",
        "terrapalus",
        "crushing-industry",
        "Planet-Hopper",
        "bobelectronics",
        "lex-aircraft",
        "aquilo-seabloom-algaculture",
        "cubium",
        "Flare Stack",
        "bobassembly",
        "vtk-cannon-turret",
        "Moshine",
        "bobequipment",
        "corrundum",
        "bobvehicleequipment",
        "Cerys-Moon-of-Fulgora",
        "dea-dia-system",
        "TimeTools",
        "wood-military",
        "bobpower",
        "metal-and-stars",
        "Electric Furnaces",
        "More_Repair_Packs",
        "Automatic_Train_Painter",
        "bobplates",
        "Aircraft-space-age",
        "castra",
        "tenebris-prime",
        "bobmining",
        "bobmodules",
        "lignumis",
        "Krastorio2-spaced-out",
        "janus"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_RADAR",
      "severity": "medium",
      "title": "Item Conflict: radar",
      "description": "Item 'radar' modified by multiple mods",
      "affected_prototypes": [
        "item.radar"
      ],
      "conflicting_mods": [
        "slp-dyson-sphere-reworked",
        "RampantFixed",
        "PlutoniumEnergy",
        "bobenemies",
        "atomic-artillery-reborn",
        "castra",
        "aai-vehicles-warden",
        "Kux-OrbitalIonCannon",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_COAL",
      "severity": "medium",
      "title": "Item Conflict: coal",
      "description": "Item 'coal' modified by multiple mods",
      "affected_prototypes": [
        "item.coal"
      ],
      "conflicting_mods": [
        "cubium",
        "Moshine-assets",
        "bobplates",
        "quirkycat_machines",
        "alien-module",
        "aai-vehicles-warden",
        "vulcanus-sulfuric-bacteria",
        "alloy-smelting",
        "Moshine",
        "crushing-industry",
        "metal-and-stars",
        "bobelectronics",
        "Krastorio2-spaced-out",
        "grappling-gun"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_TECHNOLOGY_ELECTRONICS",
      "severity": "medium",
      "title": "Technology Conflict: electronics",
      "description": "Technology 'electronics' modified by multiple mods",
      "affected_prototypes": [
        "technology.electronics"
      ],
      "conflicting_mods": [
        "Age-of-Production",
        "lignumis"
      ],
      "root_cause": "Multiple mods modify the same technology",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_RECIPE-CATEGORY_ADVANCED-CENTRIFUGING-OR-CRAFTING",
      "severity": "low",
      "title": "Recipe-Category Conflict: advanced-centrifuging-or-crafting",
      "description": "Recipe-Category 'advanced-centrifuging-or-crafting' modified by multiple mods",
      "affected_prototypes": [
        "recipe-category.advanced-centrifuging-or-crafting"
      ],
      "conflicting_mods": [
        "Age-of-Production",
        "atan-nuclear-science"
      ],
      "root_cause": "Multiple mods modify the same recipe-category",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CREATE-ENTITY_BIG-EXPLOSION",
      "severity": "low",
      "title": "Create-Entity Conflict: big-explosion",
      "description": "Create-Entity 'big-explosion' modified by multiple mods",
      "affected_prototypes": [
        "create-entity.big-explosion"
      ],
      "conflicting_mods": [
        "RPGsystem",
        "StopgapNukes",
        "Krastorio2-spaced-out",
        "Aircraft-space-age"
      ],
      "root_cause": "Multiple mods modify the same create-entity",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CREATE-EXPLOSION_EXPLOSION-GUNSHOT",
      "severity": "low",
      "title": "Create-Explosion Conflict: explosion-gunshot",
      "description": "Create-Explosion 'explosion-gunshot' modified by multiple mods",
      "affected_prototypes": [
        "create-explosion.explosion-gunshot"
      ],
      "conflicting_mods": [
        "More_Ammo",
        "PlutoniumEnergy",
        "Aircraft-space-age",
        "alien-module",
        "vtk-cannon-turret",
        "StopgapNukes",
        "metal-and-stars",
        "lignumis",
        "Krastorio2-spaced-out",
        "grappling-gun"
      ],
      "root_cause": "Multiple mods modify the same create-explosion",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SUBMACHINE-GUN",
      "severity": "medium",
      "title": "Item Conflict: submachine-gun",
      "description": "Item 'submachine-gun' modified by multiple mods",
      "affected_prototypes": [
        "item.submachine-gun"
      ],
      "conflicting_mods": [
        "lex-aircraft",
        "Krastorio2-spaced-out",
        "Aircraft-space-age"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ROCKET-LAUNCHER",
      "severity": "medium",
      "title": "Item Conflict: rocket-launcher",
      "description": "Item 'rocket-launcher' modified by multiple mods",
      "affected_prototypes": [
        "item.rocket-launcher"
      ],
      "conflicting_mods": [
        "HelicopterRevival",
        "Hovercrafts",
        "Aircraft-space-age",
        "Krastorio2-spaced-out",
        "lex-aircraft"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_LOW-DENSITY-STRUCTURE",
      "severity": "medium",
      "title": "Item Conflict: low-density-structure",
      "description": "Item 'low-density-structure' modified by multiple mods",
      "affected_prototypes": [
        "item.low-density-structure"
      ],
      "conflicting_mods": [
        "RampantFixed",
        "Hovercrafts",
        "StopgapNukes",
        "shield-projector",
        "lex-aircraft",
        "cubium",
        "orbital-transfer",
        "bobequipment",
        "fulgora-coralmium-agriculture",
        "Kux-OrbitalIonCannon",
        "bobvehicleequipment",
        "Cerys-Moon-of-Fulgora",
        "PlutoniumEnergy",
        "secretas",
        "More_Repair_Packs",
        "lilys-cubeine",
        "Aircraft-space-age",
        "castra",
        "astroponics",
        "metal-and-stars",
        "lignumis",
        "Krastorio2-spaced-out",
        "janus"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_EXPLOSIVE-CANNON-SHELL",
      "severity": "medium",
      "title": "Item Conflict: explosive-cannon-shell",
      "description": "Item 'explosive-cannon-shell' modified by multiple mods",
      "affected_prototypes": [
        "item.explosive-cannon-shell"
      ],
      "conflicting_mods": [
        "PlutoniumEnergy",
        "StopgapNukes",
        "Aircraft-space-age"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_FLAMETHROWER-AMMO",
      "severity": "medium",
      "title": "Item Conflict: flamethrower-ammo",
      "description": "Item 'flamethrower-ammo' modified by multiple mods",
      "affected_prototypes": [
        "item.flamethrower-ammo"
      ],
      "conflicting_mods": [
        "StopgapNukes",
        "Aircraft-space-age"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_LUBRICANT",
      "severity": "low",
      "title": "Fluid Conflict: lubricant",
      "description": "Fluid 'lubricant' modified by multiple mods",
      "affected_prototypes": [
        "fluid.lubricant"
      ],
      "conflicting_mods": [
        "bobplates",
        "dea-dia-system",
        "lilys-cubeine",
        "Hovercrafts",
        "Cold_biters",
        "Aircraft-space-age",
        "castra",
        "tenebris-prime",
        "secretas",
        "metal-and-stars",
        "promethium-quality",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ENERGY-SHIELD-MK2-EQUIPMENT",
      "severity": "medium",
      "title": "Item Conflict: energy-shield-mk2-equipment",
      "description": "Item 'energy-shield-mk2-equipment' modified by multiple mods",
      "affected_prototypes": [
        "item.energy-shield-mk2-equipment"
      ],
      "conflicting_mods": [
        "Hovercrafts",
        "Aircraft-space-age",
        "castra",
        "bobequipment",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CREATE-ENTITY_EXPLOSION-HIT",
      "severity": "low",
      "title": "Create-Entity Conflict: explosion-hit",
      "description": "Create-Entity 'explosion-hit' modified by multiple mods",
      "affected_prototypes": [
        "create-entity.explosion-hit"
      ],
      "conflicting_mods": [
        "Electric_flying_enemies",
        "PlutoniumEnergy",
        "alien-module",
        "corrundum",
        "StopgapNukes",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same create-entity",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_IRON-ORE",
      "severity": "medium",
      "title": "Item Conflict: iron-ore",
      "description": "Item 'iron-ore' modified by multiple mods",
      "affected_prototypes": [
        "item.iron-ore"
      ],
      "conflicting_mods": [
        "cubium",
        "Moshine-assets",
        "bobplates",
        "quirkycat_machines",
        "alien-module",
        "castra",
        "tenebris-prime",
        "crushing-industry",
        "metal-and-stars",
        "bobelectronics",
        "corrundum",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_COPPER-ORE",
      "severity": "medium",
      "title": "Item Conflict: copper-ore",
      "description": "Item 'copper-ore' modified by multiple mods",
      "affected_prototypes": [
        "item.copper-ore"
      ],
      "conflicting_mods": [
        "cubium",
        "Moshine-assets",
        "bobplates",
        "alien-module",
        "crushing-industry",
        "metal-and-stars",
        "corrundum",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_COKE",
      "severity": "medium",
      "title": "Item Conflict: coke",
      "description": "Item 'coke' modified by multiple mods",
      "affected_prototypes": [
        "item.coke"
      ],
      "conflicting_mods": [
        "alloy-smelting",
        "wood-industry"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_CRUSHED-COAL",
      "severity": "medium",
      "title": "Item Conflict: crushed-coal",
      "description": "Item 'crushed-coal' modified by multiple mods",
      "affected_prototypes": [
        "item.crushed-coal"
      ],
      "conflicting_mods": [
        "alloy-smelting",
        "crushing-industry"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_CARBON",
      "severity": "medium",
      "title": "Item Conflict: carbon",
      "description": "Item 'carbon' modified by multiple mods",
      "affected_prototypes": [
        "item.carbon"
      ],
      "conflicting_mods": [
        "cubium",
        "Moshine-assets",
        "RampantFixed",
        "castra",
        "vulcanus-sulfuric-bacteria",
        "alloy-smelting",
        "Moshine",
        "crushing-industry",
        "astroponics",
        "wood-industry",
        "metal-and-stars",
        "corrundum",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SPOILAGE",
      "severity": "medium",
      "title": "Item Conflict: spoilage",
      "description": "Item 'spoilage' modified by multiple mods",
      "affected_prototypes": [
        "item.spoilage"
      ],
      "conflicting_mods": [
        "aquilo-seabloom-algaculture",
        "cubium",
        "planet-muluna",
        "secretas",
        "fulgora-coralmium-agriculture"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_LANDFILL",
      "severity": "medium",
      "title": "Item Conflict: landfill",
      "description": "Item 'landfill' modified by multiple mods",
      "affected_prototypes": [
        "item.landfill"
      ],
      "conflicting_mods": [
        "aquilo-seabloom-algaculture",
        "Krastorio2-spaced-out",
        "astroponics"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_TUNGSTEN-PLATE",
      "severity": "medium",
      "title": "Item Conflict: tungsten-plate",
      "description": "Item 'tungsten-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.tungsten-plate"
      ],
      "conflicting_mods": [
        "aquilo-seabloom-algaculture",
        "cubium",
        "promethium-quality",
        "slp-dyson-sphere-reworked",
        "lilys-cubeine",
        "VoidProcessing",
        "secretas",
        "metal-and-stars",
        "corrundum",
        "StopgapNukes",
        "Krastorio2-spaced-out",
        "Fluid-level-indicator"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SUPERCONDUCTOR",
      "severity": "medium",
      "title": "Item Conflict: superconductor",
      "description": "Item 'superconductor' modified by multiple mods",
      "affected_prototypes": [
        "item.superconductor"
      ],
      "conflicting_mods": [
        "aquilo-seabloom-algaculture",
        "slp-dyson-sphere-reworked",
        "RampantFixed",
        "VoidProcessing",
        "Krastorio2-spaced-out",
        "secretas",
        "metal-and-stars",
        "promethium-quality",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PENTAPOD-EGG",
      "severity": "medium",
      "title": "Item Conflict: pentapod-egg",
      "description": "Item 'pentapod-egg' modified by multiple mods",
      "affected_prototypes": [
        "item.pentapod-egg"
      ],
      "conflicting_mods": [
        "aquilo-seabloom-algaculture",
        "cubium",
        "Krastorio2-spaced-out",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_AMMONIA",
      "severity": "low",
      "title": "Fluid Conflict: ammonia",
      "description": "Fluid 'ammonia' modified by multiple mods",
      "affected_prototypes": [
        "fluid.ammonia"
      ],
      "conflicting_mods": [
        "aquilo-seabloom-algaculture",
        "cubium",
        "promethium-quality",
        "cerys-lunaponics",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_STEAM",
      "severity": "low",
      "title": "Fluid Conflict: steam",
      "description": "Fluid 'steam' modified by multiple mods",
      "affected_prototypes": [
        "fluid.steam"
      ],
      "conflicting_mods": [
        "aquilo-seabloom-algaculture",
        "cubium",
        "Moshine-assets",
        "bobplates",
        "dea-dia-system",
        "Cold_biters",
        "vulcanus-sulfuric-bacteria",
        "Moshine",
        "secretas",
        "wood-industry",
        "corrundum",
        "lignumis",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_FLUOROKETONE-HOT",
      "severity": "low",
      "title": "Fluid Conflict: fluoroketone-hot",
      "description": "Fluid 'fluoroketone-hot' modified by multiple mods",
      "affected_prototypes": [
        "fluid.fluoroketone-hot"
      ],
      "conflicting_mods": [
        "aquilo-seabloom-algaculture",
        "corrundum",
        "VoidProcessing",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_FLUOROKETONE-COLD",
      "severity": "low",
      "title": "Fluid Conflict: fluoroketone-cold",
      "description": "Fluid 'fluoroketone-cold' modified by multiple mods",
      "affected_prototypes": [
        "fluid.fluoroketone-cold"
      ],
      "conflicting_mods": [
        "aquilo-seabloom-algaculture",
        "cubium",
        "promethium-quality",
        "VoidProcessing",
        "metal-and-stars",
        "corrundum",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_NUTRIENTS",
      "severity": "medium",
      "title": "Item Conflict: nutrients",
      "description": "Item 'nutrients' modified by multiple mods",
      "affected_prototypes": [
        "item.nutrients"
      ],
      "conflicting_mods": [
        "aquilo-seabloom-algaculture",
        "VoidProcessing",
        "secretas",
        "metal-and-stars",
        "corrundum",
        "lignumis"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_RESIN",
      "severity": "medium",
      "title": "Item Conflict: resin",
      "description": "Item 'resin' modified by multiple mods",
      "affected_prototypes": [
        "item.resin"
      ],
      "conflicting_mods": [
        "aquilo-seabloom-algaculture",
        "wood-industry",
        "vulcanus-sulfuric-bacteria"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_WOODCHIPS",
      "severity": "medium",
      "title": "Item Conflict: woodchips",
      "description": "Item 'woodchips' modified by multiple mods",
      "affected_prototypes": [
        "item.woodchips"
      ],
      "conflicting_mods": [
        "aquilo-seabloom-algaculture",
        "wood-industry"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_WOOD",
      "severity": "medium",
      "title": "Item Conflict: wood",
      "description": "Item 'wood' modified by multiple mods",
      "affected_prototypes": [
        "item.wood"
      ],
      "conflicting_mods": [
        "aquilo-seabloom-algaculture",
        "planet-muluna",
        "Wood-Walls",
        "bobplates",
        "bobgreenhouse",
        "lilys-cubeine",
        "vulcanus-sulfuric-bacteria",
        "wood-military",
        "astroponics",
        "enemyracemanager",
        "metal-and-stars",
        "wood-industry",
        "bobelectronics",
        "corrundum",
        "lignumis",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BIOFLUX",
      "severity": "medium",
      "title": "Item Conflict: bioflux",
      "description": "Item 'bioflux' modified by multiple mods",
      "affected_prototypes": [
        "item.bioflux"
      ],
      "conflicting_mods": [
        "cubium",
        "VoidProcessing",
        "astroponics",
        "secretas",
        "metal-and-stars",
        "corrundum"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_LIQUID-FERTILIZER",
      "severity": "low",
      "title": "Fluid Conflict: liquid-fertilizer",
      "description": "Fluid 'liquid-fertilizer' modified by multiple mods",
      "affected_prototypes": [
        "fluid.liquid-fertilizer"
      ],
      "conflicting_mods": [
        "astroponics",
        "lilys-cubeine",
        "cerys-lunaponics"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_BIOSLURRY",
      "severity": "low",
      "title": "Fluid Conflict: bioslurry",
      "description": "Fluid 'bioslurry' modified by multiple mods",
      "affected_prototypes": [
        "fluid.bioslurry"
      ],
      "conflicting_mods": [
        "astroponics",
        "lilys-cubeine"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PIPE",
      "severity": "medium",
      "title": "Item Conflict: pipe",
      "description": "Item 'pipe' modified by multiple mods",
      "affected_prototypes": [
        "item.pipe"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Planet-Hopper",
        "Fluid-level-indicator",
        "grappling-gun",
        "Flare Stack",
        "bobassembly",
        "ballistic_missile",
        "FluidMustFlow",
        "planet-muluna",
        "dea-dia-system",
        "bobpower",
        "secretas",
        "bobplates",
        "foundry-restructuring",
        "lilys-cubeine",
        "castra",
        "Flow Control",
        "bobmining",
        "astroponics",
        "metal-and-stars",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_SULFURIC-ACID",
      "severity": "low",
      "title": "Fluid Conflict: sulfuric-acid",
      "description": "Fluid 'sulfuric-acid' modified by multiple mods",
      "affected_prototypes": [
        "fluid.sulfuric-acid"
      ],
      "conflicting_mods": [
        "slp-dyson-sphere-reworked",
        "cubium",
        "bobplates",
        "More_Ammo",
        "PlutoniumEnergy",
        "Cold_biters",
        "castra",
        "tenebris-prime",
        "vulcanus-sulfuric-bacteria",
        "Moshine",
        "crushing-industry",
        "astroponics",
        "se-space-trains",
        "wood-industry",
        "bobelectronics",
        "corrundum",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_TREE-SEED",
      "severity": "medium",
      "title": "Item Conflict: tree-seed",
      "description": "Item 'tree-seed' modified by multiple mods",
      "affected_prototypes": [
        "item.tree-seed"
      ],
      "conflicting_mods": [
        "planet-muluna",
        "astroponics"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_CALCITE",
      "severity": "medium",
      "title": "Item Conflict: calcite",
      "description": "Item 'calcite' modified by multiple mods",
      "affected_prototypes": [
        "item.calcite"
      ],
      "conflicting_mods": [
        "cubium",
        "Moshine-assets",
        "lilys-cubeine",
        "common-prototypes",
        "vulcanus-sulfuric-bacteria",
        "crushing-industry",
        "astroponics",
        "metal-and-stars",
        "corrundum",
        "lignumis",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_YUMAKO-SEED",
      "severity": "medium",
      "title": "Item Conflict: yumako-seed",
      "description": "Item 'yumako-seed' modified by multiple mods",
      "affected_prototypes": [
        "item.yumako-seed"
      ],
      "conflicting_mods": [
        "Krastorio2-spaced-out",
        "planet-muluna",
        "astroponics"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_YUMAKO",
      "severity": "medium",
      "title": "Item Conflict: yumako",
      "description": "Item 'yumako' modified by multiple mods",
      "affected_prototypes": [
        "item.yumako"
      ],
      "conflicting_mods": [
        "Krastorio2-spaced-out",
        "planet-muluna",
        "astroponics"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_JELLYNUT-SEED",
      "severity": "medium",
      "title": "Item Conflict: jellynut-seed",
      "description": "Item 'jellynut-seed' modified by multiple mods",
      "affected_prototypes": [
        "item.jellynut-seed"
      ],
      "conflicting_mods": [
        "Krastorio2-spaced-out",
        "planet-muluna",
        "astroponics"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_JELLYNUT",
      "severity": "medium",
      "title": "Item Conflict: jellynut",
      "description": "Item 'jellynut' modified by multiple mods",
      "affected_prototypes": [
        "item.jellynut"
      ],
      "conflicting_mods": [
        "Krastorio2-spaced-out",
        "planet-muluna",
        "astroponics"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_URANIUM-235",
      "severity": "medium",
      "title": "Item Conflict: uranium-235",
      "description": "Item 'uranium-235' modified by multiple mods",
      "affected_prototypes": [
        "item.uranium-235"
      ],
      "conflicting_mods": [
        "atan-nuclear-science",
        "lilys-cubeine",
        "bobplates",
        "RampantFixed",
        "metal-and-stars",
        "StopgapNukes",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_WATER-BARREL",
      "severity": "medium",
      "title": "Item Conflict: water-barrel",
      "description": "Item 'water-barrel' modified by multiple mods",
      "affected_prototypes": [
        "item.water-barrel"
      ],
      "conflicting_mods": [
        "atan-nuclear-science",
        "enemyracemanager"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BARREL",
      "severity": "medium",
      "title": "Item Conflict: barrel",
      "description": "Item 'barrel' modified by multiple mods",
      "affected_prototypes": [
        "item.barrel"
      ],
      "conflicting_mods": [
        "atan-nuclear-science",
        "PlutoniumEnergy"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_CENTRIFUGE",
      "severity": "medium",
      "title": "Item Conflict: centrifuge",
      "description": "Item 'centrifuge' modified by multiple mods",
      "affected_prototypes": [
        "item.centrifuge"
      ],
      "conflicting_mods": [
        "atan-nuclear-science",
        "bobassembly"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_REFINED-CONCRETE",
      "severity": "medium",
      "title": "Item Conflict: refined-concrete",
      "description": "Item 'refined-concrete' modified by multiple mods",
      "affected_prototypes": [
        "item.refined-concrete"
      ],
      "conflicting_mods": [
        "atan-nuclear-science",
        "cubium",
        "bobassembly",
        "HelicopterRevival",
        "minimalist-rails",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PLUTONIUM-239",
      "severity": "medium",
      "title": "Item Conflict: plutonium-239",
      "description": "Item 'plutonium-239' modified by multiple mods",
      "affected_prototypes": [
        "item.plutonium-239"
      ],
      "conflicting_mods": [
        "atan-nuclear-science",
        "PlutoniumEnergy",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CREATE-EXPLOSION_ARTILLERY-CANNON-MUZZLE-FLASH",
      "severity": "low",
      "title": "Create-Explosion Conflict: artillery-cannon-muzzle-flash",
      "description": "Create-Explosion 'artillery-cannon-muzzle-flash' modified by multiple mods",
      "affected_prototypes": [
        "create-explosion.artillery-cannon-muzzle-flash"
      ],
      "conflicting_mods": [
        "PlutoniumEnergy",
        "atomic-artillery-reborn",
        "wood-military",
        "StopgapNukes",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same create-explosion",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ATOMIC-BOMB",
      "severity": "medium",
      "title": "Item Conflict: atomic-bomb",
      "description": "Item 'atomic-bomb' modified by multiple mods",
      "affected_prototypes": [
        "item.atomic-bomb"
      ],
      "conflicting_mods": [
        "atomic-artillery-reborn",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_EXPLOSIVE-URANIUM-CANNON-SHELL",
      "severity": "medium",
      "title": "Item Conflict: explosive-uranium-cannon-shell",
      "description": "Item 'explosive-uranium-cannon-shell' modified by multiple mods",
      "affected_prototypes": [
        "item.explosive-uranium-cannon-shell"
      ],
      "conflicting_mods": [
        "atomic-artillery-reborn",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_STORAGE-TANK",
      "severity": "medium",
      "title": "Item Conflict: storage-tank",
      "description": "Item 'storage-tank' modified by multiple mods",
      "affected_prototypes": [
        "item.storage-tank"
      ],
      "conflicting_mods": [
        "ballistic_missile",
        "boblogistics",
        "metal-and-stars",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ROCKET-PART",
      "severity": "medium",
      "title": "Item Conflict: rocket-part",
      "description": "Item 'rocket-part' modified by multiple mods",
      "affected_prototypes": [
        "item.rocket-part"
      ],
      "conflicting_mods": [
        "ballistic_missile",
        "metal-and-stars",
        "Planet-Hopper"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_RECIPE-CATEGORY_BOB-ELECTRONICS",
      "severity": "low",
      "title": "Recipe-Category Conflict: bob-electronics",
      "description": "Recipe-Category 'bob-electronics' modified by multiple mods",
      "affected_prototypes": [
        "recipe-category.bob-electronics"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobassembly"
      ],
      "root_cause": "Multiple mods modify the same recipe-category",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_RECIPE-CATEGORY_BOB-ELECTRONICS-MACHINE",
      "severity": "low",
      "title": "Recipe-Category Conflict: bob-electronics-machine",
      "description": "Recipe-Category 'bob-electronics-machine' modified by multiple mods",
      "affected_prototypes": [
        "recipe-category.bob-electronics-machine"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobassembly"
      ],
      "root_cause": "Multiple mods modify the same recipe-category",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_RECIPE-CATEGORY_BOB-ELECTRONICS-WITH-FLUID",
      "severity": "low",
      "title": "Recipe-Category Conflict: bob-electronics-with-fluid",
      "description": "Recipe-Category 'bob-electronics-with-fluid' modified by multiple mods",
      "affected_prototypes": [
        "recipe-category.bob-electronics-with-fluid"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobassembly"
      ],
      "root_cause": "Multiple mods modify the same recipe-category",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_BOB-ASSEMBLY-MACHINE",
      "severity": "low",
      "title": "Item-Subgroup Conflict: bob-assembly-machine",
      "description": "Item-Subgroup 'bob-assembly-machine' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.bob-assembly-machine"
      ],
      "conflicting_mods": [
        "bobassembly",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ASSEMBLING-MACHINE-3",
      "severity": "medium",
      "title": "Item Conflict: assembling-machine-3",
      "description": "Item 'assembling-machine-3' modified by multiple mods",
      "affected_prototypes": [
        "item.assembling-machine-3"
      ],
      "conflicting_mods": [
        "Moshine",
        "Krastorio2-spaced-out",
        "bobassembly"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-ELECTRIC-CHEMICAL-FURNACE",
      "severity": "medium",
      "title": "Item Conflict: bob-electric-chemical-furnace",
      "description": "Item 'bob-electric-chemical-furnace' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-electric-chemical-furnace"
      ],
      "conflicting_mods": [
        "bobassembly",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_BOB-CHEMICAL-MACHINE",
      "severity": "low",
      "title": "Item-Subgroup Conflict: bob-chemical-machine",
      "description": "Item-Subgroup 'bob-chemical-machine' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.bob-chemical-machine"
      ],
      "conflicting_mods": [
        "bobassembly",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_CHEMICAL-PLANT",
      "severity": "medium",
      "title": "Item Conflict: chemical-plant",
      "description": "Item 'chemical-plant' modified by multiple mods",
      "affected_prototypes": [
        "item.chemical-plant"
      ],
      "conflicting_mods": [
        "corrundum",
        "bobassembly"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-DISTILLERY",
      "severity": "medium",
      "title": "Item Conflict: bob-distillery",
      "description": "Item 'bob-distillery' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-distillery"
      ],
      "conflicting_mods": [
        "bobassembly",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_BOB-ELECTROLYSER-MACHINE",
      "severity": "low",
      "title": "Item-Subgroup Conflict: bob-electrolyser-machine",
      "description": "Item-Subgroup 'bob-electrolyser-machine' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.bob-electrolyser-machine"
      ],
      "conflicting_mods": [
        "bobassembly",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-ELECTROLYSER",
      "severity": "medium",
      "title": "Item Conflict: bob-electrolyser",
      "description": "Item 'bob-electrolyser' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-electrolyser"
      ],
      "conflicting_mods": [
        "bobassembly",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PLASTIC-BAR",
      "severity": "medium",
      "title": "Item Conflict: plastic-bar",
      "description": "Item 'plastic-bar' modified by multiple mods",
      "affected_prototypes": [
        "item.plastic-bar"
      ],
      "conflicting_mods": [
        "Cold_biters",
        "boblogistics",
        "StopgapNukes",
        "bobelectronics",
        "Fluid-level-indicator",
        "cubium",
        "bobassembly",
        "vtk-cannon-turret",
        "bobequipment",
        "fulgora-coralmium-agriculture",
        "corrundum",
        "Kux-OrbitalIonCannon",
        "bobvehicleequipment",
        "More_Ammo",
        "HelicopterRevival",
        "metal-and-stars",
        "secretas",
        "More_Repair_Packs",
        "bobplates",
        "lilys-cubeine",
        "castra",
        "tenebris-prime",
        "bobmodules",
        "lignumis",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-FLUID-FURNACE",
      "severity": "medium",
      "title": "Item Conflict: bob-fluid-furnace",
      "description": "Item 'bob-fluid-furnace' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-fluid-furnace"
      ],
      "conflicting_mods": [
        "bobpower",
        "bobassembly"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_STEEL-FURNACE",
      "severity": "medium",
      "title": "Item Conflict: steel-furnace",
      "description": "Item 'steel-furnace' modified by multiple mods",
      "affected_prototypes": [
        "item.steel-furnace"
      ],
      "conflicting_mods": [
        "Electric Furnaces",
        "bobpower",
        "bobassembly",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-STEEL-MIXING-FURNACE",
      "severity": "medium",
      "title": "Item Conflict: bob-steel-mixing-furnace",
      "description": "Item 'bob-steel-mixing-furnace' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-steel-mixing-furnace"
      ],
      "conflicting_mods": [
        "bobassembly",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-STEEL-CHEMICAL-FURNACE",
      "severity": "medium",
      "title": "Item Conflict: bob-steel-chemical-furnace",
      "description": "Item 'bob-steel-chemical-furnace' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-steel-chemical-furnace"
      ],
      "conflicting_mods": [
        "bobassembly",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_BOB-REFINERY-MACHINE",
      "severity": "low",
      "title": "Item-Subgroup Conflict: bob-refinery-machine",
      "description": "Item-Subgroup 'bob-refinery-machine' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.bob-refinery-machine"
      ],
      "conflicting_mods": [
        "bobassembly",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_BOB-RESOURCE",
      "severity": "low",
      "title": "Item-Subgroup Conflict: bob-resource",
      "description": "Item-Subgroup 'bob-resource' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.bob-resource"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_BOB-ELECTRONIC-COMPONENTS",
      "severity": "low",
      "title": "Item-Subgroup Conflict: bob-electronic-components",
      "description": "Item-Subgroup 'bob-electronic-components' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.bob-electronic-components"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_BOB-BOARDS",
      "severity": "low",
      "title": "Item-Subgroup Conflict: bob-boards",
      "description": "Item-Subgroup 'bob-boards' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.bob-boards"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_BOB-ELECTRONIC-BOARDS",
      "severity": "low",
      "title": "Item-Subgroup Conflict: bob-electronic-boards",
      "description": "Item-Subgroup 'bob-electronic-boards' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.bob-electronic-boards"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_BOB-FERRIC-CHLORIDE-SOLUTION",
      "severity": "low",
      "title": "Fluid Conflict: bob-ferric-chloride-solution",
      "description": "Fluid 'bob-ferric-chloride-solution' modified by multiple mods",
      "affected_prototypes": [
        "fluid.bob-ferric-chloride-solution"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-TIN-PLATE",
      "severity": "medium",
      "title": "Item Conflict: bob-tin-plate",
      "description": "Item 'bob-tin-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-tin-plate"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-RUBBER",
      "severity": "medium",
      "title": "Item Conflict: bob-rubber",
      "description": "Item 'bob-rubber' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-rubber"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-GOLD-PLATE",
      "severity": "medium",
      "title": "Item Conflict: bob-gold-plate",
      "description": "Item 'bob-gold-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-gold-plate"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-RESIN",
      "severity": "medium",
      "title": "Item Conflict: bob-resin",
      "description": "Item 'bob-resin' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-resin"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-ADVANCED-PROCESSING-UNIT",
      "severity": "medium",
      "title": "Item Conflict: bob-advanced-processing-unit",
      "description": "Item 'bob-advanced-processing-unit' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-advanced-processing-unit"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_PRODUCE-PER-HOUR-ACHIEVEMENT_BOB-COMPUTER-AGE-1",
      "severity": "low",
      "title": "Produce-Per-Hour-Achievement Conflict: bob-computer-age-1",
      "description": "Produce-Per-Hour-Achievement 'bob-computer-age-1' modified by multiple mods",
      "affected_prototypes": [
        "produce-per-hour-achievement.bob-computer-age-1"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same produce-per-hour-achievement",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_PRODUCE-PER-HOUR-ACHIEVEMENT_BOB-COMPUTER-AGE-2",
      "severity": "low",
      "title": "Produce-Per-Hour-Achievement Conflict: bob-computer-age-2",
      "description": "Produce-Per-Hour-Achievement 'bob-computer-age-2' modified by multiple mods",
      "affected_prototypes": [
        "produce-per-hour-achievement.bob-computer-age-2"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same produce-per-hour-achievement",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_PRODUCE-PER-HOUR-ACHIEVEMENT_BOB-COMPUTER-AGE-3",
      "severity": "low",
      "title": "Produce-Per-Hour-Achievement Conflict: bob-computer-age-3",
      "description": "Produce-Per-Hour-Achievement 'bob-computer-age-3' modified by multiple mods",
      "affected_prototypes": [
        "produce-per-hour-achievement.bob-computer-age-3"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same produce-per-hour-achievement",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-SILICON-PLATE",
      "severity": "medium",
      "title": "Item Conflict: bob-silicon-plate",
      "description": "Item 'bob-silicon-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-silicon-plate"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-SILICON-WAFER",
      "severity": "medium",
      "title": "Item Conflict: bob-silicon-wafer",
      "description": "Item 'bob-silicon-wafer' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-silicon-wafer"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-LEAD-PLATE",
      "severity": "medium",
      "title": "Item Conflict: bob-lead-plate",
      "description": "Item 'bob-lead-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-lead-plate"
      ],
      "conflicting_mods": [
        "bobelectronics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-ALIEN-ARTIFACT",
      "severity": "medium",
      "title": "Item Conflict: bob-alien-artifact",
      "description": "Item 'bob-alien-artifact' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-alien-artifact"
      ],
      "conflicting_mods": [
        "bobenemies",
        "bobvehicleequipment"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-ALIEN-ARTIFACT-RED",
      "severity": "medium",
      "title": "Item Conflict: bob-alien-artifact-red",
      "description": "Item 'bob-alien-artifact-red' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-alien-artifact-red"
      ],
      "conflicting_mods": [
        "bobenemies",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-ALIEN-ARTIFACT-ORANGE",
      "severity": "medium",
      "title": "Item Conflict: bob-alien-artifact-orange",
      "description": "Item 'bob-alien-artifact-orange' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-alien-artifact-orange"
      ],
      "conflicting_mods": [
        "bobenemies",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-ALIEN-ARTIFACT-YELLOW",
      "severity": "medium",
      "title": "Item Conflict: bob-alien-artifact-yellow",
      "description": "Item 'bob-alien-artifact-yellow' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-alien-artifact-yellow"
      ],
      "conflicting_mods": [
        "bobenemies",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-ALIEN-ARTIFACT-GREEN",
      "severity": "medium",
      "title": "Item Conflict: bob-alien-artifact-green",
      "description": "Item 'bob-alien-artifact-green' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-alien-artifact-green"
      ],
      "conflicting_mods": [
        "bobenemies",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-ALIEN-ARTIFACT-BLUE",
      "severity": "medium",
      "title": "Item Conflict: bob-alien-artifact-blue",
      "description": "Item 'bob-alien-artifact-blue' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-alien-artifact-blue"
      ],
      "conflicting_mods": [
        "bobenemies",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-ALIEN-ARTIFACT-PURPLE",
      "severity": "medium",
      "title": "Item Conflict: bob-alien-artifact-purple",
      "description": "Item 'bob-alien-artifact-purple' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-alien-artifact-purple"
      ],
      "conflicting_mods": [
        "bobenemies",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_DAMAGE-TYPE_BOB-PLASMA",
      "severity": "low",
      "title": "Damage-Type Conflict: bob-plasma",
      "description": "Damage-Type 'bob-plasma' modified by multiple mods",
      "affected_prototypes": [
        "damage-type.bob-plasma"
      ],
      "conflicting_mods": [
        "bobenemies",
        "bobvehicleequipment"
      ],
      "root_cause": "Multiple mods modify the same damage-type",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_POWER-ARMOR-MK2",
      "severity": "medium",
      "title": "Item Conflict: power-armor-mk2",
      "description": "Item 'power-armor-mk2' modified by multiple mods",
      "affected_prototypes": [
        "item.power-armor-mk2"
      ],
      "conflicting_mods": [
        "Cold_biters",
        "bobequipment"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SPEED-MODULE-2",
      "severity": "medium",
      "title": "Item Conflict: speed-module-2",
      "description": "Item 'speed-module-2' modified by multiple mods",
      "affected_prototypes": [
        "item.speed-module-2"
      ],
      "conflicting_mods": [
        "Electric Furnaces",
        "Krastorio2-spaced-out",
        "bobequipment"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_EFFICIENCY-MODULE-3",
      "severity": "medium",
      "title": "Item Conflict: efficiency-module-3",
      "description": "Item 'efficiency-module-3' modified by multiple mods",
      "affected_prototypes": [
        "item.efficiency-module-3"
      ],
      "conflicting_mods": [
        "bobmodules",
        "bobequipment",
        "secretas",
        "bobvehicleequipment"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SPEED-MODULE-3",
      "severity": "medium",
      "title": "Item Conflict: speed-module-3",
      "description": "Item 'speed-module-3' modified by multiple mods",
      "affected_prototypes": [
        "item.speed-module-3"
      ],
      "conflicting_mods": [
        "bobequipment",
        "secretas",
        "bobvehicleequipment",
        "bobmodules",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PRODUCTIVITY-MODULE-2",
      "severity": "medium",
      "title": "Item Conflict: productivity-module-2",
      "description": "Item 'productivity-module-2' modified by multiple mods",
      "affected_prototypes": [
        "item.productivity-module-2"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "Moshine",
        "bobequipment",
        "bobvehicleequipment"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PRODUCTIVITY-MODULE-3",
      "severity": "medium",
      "title": "Item Conflict: productivity-module-3",
      "description": "Item 'productivity-module-3' modified by multiple mods",
      "affected_prototypes": [
        "item.productivity-module-3"
      ],
      "conflicting_mods": [
        "bobmodules",
        "bobequipment",
        "secretas",
        "bobvehicleequipment"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BATTERY-MK2-EQUIPMENT",
      "severity": "medium",
      "title": "Item Conflict: battery-mk2-equipment",
      "description": "Item 'battery-mk2-equipment' modified by multiple mods",
      "affected_prototypes": [
        "item.battery-mk2-equipment"
      ],
      "conflicting_mods": [
        "Hovercrafts",
        "bobequipment"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_FISSION-REACTOR-EQUIPMENT",
      "severity": "medium",
      "title": "Item Conflict: fission-reactor-equipment",
      "description": "Item 'fission-reactor-equipment' modified by multiple mods",
      "affected_prototypes": [
        "item.fission-reactor-equipment"
      ],
      "conflicting_mods": [
        "PlutoniumEnergy",
        "bobequipment"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_URANIUM-FUEL-CELL",
      "severity": "medium",
      "title": "Item Conflict: uranium-fuel-cell",
      "description": "Item 'uranium-fuel-cell' modified by multiple mods",
      "affected_prototypes": [
        "item.uranium-fuel-cell"
      ],
      "conflicting_mods": [
        "slp-dyson-sphere-reworked",
        "maraxsis",
        "bobequipment",
        "secretas",
        "metal-and-stars",
        "StopgapNukes",
        "bobvehicleequipment"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_NIGHT-VISION-EQUIPMENT",
      "severity": "medium",
      "title": "Item Conflict: night-vision-equipment",
      "description": "Item 'night-vision-equipment' modified by multiple mods",
      "affected_prototypes": [
        "item.night-vision-equipment"
      ],
      "conflicting_mods": [
        "Krastorio2-spaced-out",
        "bobequipment"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SOLAR-PANEL-EQUIPMENT",
      "severity": "medium",
      "title": "Item Conflict: solar-panel-equipment",
      "description": "Item 'solar-panel-equipment' modified by multiple mods",
      "affected_prototypes": [
        "item.solar-panel-equipment"
      ],
      "conflicting_mods": [
        "Krastorio2-spaced-out",
        "bobequipment"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PERSONAL-LASER-DEFENSE-EQUIPMENT",
      "severity": "medium",
      "title": "Item Conflict: personal-laser-defense-equipment",
      "description": "Item 'personal-laser-defense-equipment' modified by multiple mods",
      "affected_prototypes": [
        "item.personal-laser-defense-equipment"
      ],
      "conflicting_mods": [
        "Krastorio2-spaced-out",
        "bobequipment"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_EXOSKELETON-EQUIPMENT",
      "severity": "medium",
      "title": "Item Conflict: exoskeleton-equipment",
      "description": "Item 'exoskeleton-equipment' modified by multiple mods",
      "affected_prototypes": [
        "item.exoskeleton-equipment"
      ],
      "conflicting_mods": [
        "Krastorio2-spaced-out",
        "bobequipment"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SULFUR",
      "severity": "medium",
      "title": "Item Conflict: sulfur",
      "description": "Item 'sulfur' modified by multiple mods",
      "affected_prototypes": [
        "item.sulfur"
      ],
      "conflicting_mods": [
        "cubium",
        "Moshine-assets",
        "bobplates",
        "bobgreenhouse",
        "More_Ammo",
        "castra",
        "tenebris-prime",
        "vulcanus-sulfuric-bacteria",
        "corrundum",
        "StopgapNukes"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CUSTOM-INPUT_BOB-INSERTER-LONG",
      "severity": "low",
      "title": "Custom-Input Conflict: bob-inserter-long",
      "description": "Custom-Input 'bob-inserter-long' modified by multiple mods",
      "affected_prototypes": [
        "custom-input.bob-inserter-long"
      ],
      "conflicting_mods": [
        "boblogistics",
        "bobinserters"
      ],
      "root_cause": "Multiple mods modify the same custom-input",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-BRASS-ALLOY",
      "severity": "medium",
      "title": "Item Conflict: bob-brass-alloy",
      "description": "Item 'bob-brass-alloy' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-brass-alloy"
      ],
      "conflicting_mods": [
        "boblogistics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-TITANIUM-PLATE",
      "severity": "medium",
      "title": "Item Conflict: bob-titanium-plate",
      "description": "Item 'bob-titanium-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-titanium-plate"
      ],
      "conflicting_mods": [
        "boblogistics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_VIRTUAL_SIGNAL-X",
      "severity": "low",
      "title": "Virtual Conflict: signal-X",
      "description": "Virtual 'signal-X' modified by multiple mods",
      "affected_prototypes": [
        "virtual.signal-X"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same virtual",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_VIRTUAL_SIGNAL-Y",
      "severity": "low",
      "title": "Virtual Conflict: signal-Y",
      "description": "Virtual 'signal-Y' modified by multiple mods",
      "affected_prototypes": [
        "virtual.signal-Y"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same virtual",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_VIRTUAL_SIGNAL-Z",
      "severity": "low",
      "title": "Virtual Conflict: signal-Z",
      "description": "Virtual 'signal-Z' modified by multiple mods",
      "affected_prototypes": [
        "virtual.signal-Z"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same virtual",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_VIRTUAL_SIGNAL-T",
      "severity": "low",
      "title": "Virtual Conflict: signal-T",
      "description": "Virtual 'signal-T' modified by multiple mods",
      "affected_prototypes": [
        "virtual.signal-T"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Krastorio2-spaced-out",
        "RampantFixed"
      ],
      "root_cause": "Multiple mods modify the same virtual",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_LONG-HANDED-INSERTER",
      "severity": "medium",
      "title": "Item Conflict: long-handed-inserter",
      "description": "Item 'long-handed-inserter' modified by multiple mods",
      "affected_prototypes": [
        "item.long-handed-inserter"
      ],
      "conflicting_mods": [
        "boblogistics",
        "long_stack_inserter",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_TRANSPORT-BELT",
      "severity": "medium",
      "title": "Item Conflict: transport-belt",
      "description": "Item 'transport-belt' modified by multiple mods",
      "affected_prototypes": [
        "item.transport-belt"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_FAST-TRANSPORT-BELT",
      "severity": "medium",
      "title": "Item Conflict: fast-transport-belt",
      "description": "Item 'fast-transport-belt' modified by multiple mods",
      "affected_prototypes": [
        "item.fast-transport-belt"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Krastorio2-spaced-out",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_EXPRESS-TRANSPORT-BELT",
      "severity": "medium",
      "title": "Item Conflict: express-transport-belt",
      "description": "Item 'express-transport-belt' modified by multiple mods",
      "affected_prototypes": [
        "item.express-transport-belt"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Krastorio2-spaced-out",
        "OmegaDrill",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_FAST-UNDERGROUND-BELT",
      "severity": "medium",
      "title": "Item Conflict: fast-underground-belt",
      "description": "Item 'fast-underground-belt' modified by multiple mods",
      "affected_prototypes": [
        "item.fast-underground-belt"
      ],
      "conflicting_mods": [
        "boblogistics",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_EXPRESS-UNDERGROUND-BELT",
      "severity": "medium",
      "title": "Item Conflict: express-underground-belt",
      "description": "Item 'express-underground-belt' modified by multiple mods",
      "affected_prototypes": [
        "item.express-underground-belt"
      ],
      "conflicting_mods": [
        "boblogistics",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_FAST-SPLITTER",
      "severity": "medium",
      "title": "Item Conflict: fast-splitter",
      "description": "Item 'fast-splitter' modified by multiple mods",
      "affected_prototypes": [
        "item.fast-splitter"
      ],
      "conflicting_mods": [
        "boblogistics",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_EXPRESS-SPLITTER",
      "severity": "medium",
      "title": "Item Conflict: express-splitter",
      "description": "Item 'express-splitter' modified by multiple mods",
      "affected_prototypes": [
        "item.express-splitter"
      ],
      "conflicting_mods": [
        "boblogistics",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BURNER-INSERTER",
      "severity": "medium",
      "title": "Item Conflict: burner-inserter",
      "description": "Item 'burner-inserter' modified by multiple mods",
      "affected_prototypes": [
        "item.burner-inserter"
      ],
      "conflicting_mods": [
        "boblogistics",
        "lignumis",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_FAST-INSERTER",
      "severity": "medium",
      "title": "Item Conflict: fast-inserter",
      "description": "Item 'fast-inserter' modified by multiple mods",
      "affected_prototypes": [
        "item.fast-inserter"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Krastorio2-spaced-out",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BULK-INSERTER",
      "severity": "medium",
      "title": "Item Conflict: bulk-inserter",
      "description": "Item 'bulk-inserter' modified by multiple mods",
      "affected_prototypes": [
        "item.bulk-inserter"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Krastorio2-spaced-out",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_INSERTER",
      "severity": "medium",
      "title": "Item Conflict: inserter",
      "description": "Item 'inserter' modified by multiple mods",
      "affected_prototypes": [
        "item.inserter"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Krastorio2-spaced-out",
        "secretas",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PASSIVE-PROVIDER-CHEST",
      "severity": "medium",
      "title": "Item Conflict: passive-provider-chest",
      "description": "Item 'passive-provider-chest' modified by multiple mods",
      "affected_prototypes": [
        "item.passive-provider-chest"
      ],
      "conflicting_mods": [
        "boblogistics",
        "orbital-transfer",
        "Warehousing"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ACTIVE-PROVIDER-CHEST",
      "severity": "medium",
      "title": "Item Conflict: active-provider-chest",
      "description": "Item 'active-provider-chest' modified by multiple mods",
      "affected_prototypes": [
        "item.active-provider-chest"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Warehousing"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_STORAGE-CHEST",
      "severity": "medium",
      "title": "Item Conflict: storage-chest",
      "description": "Item 'storage-chest' modified by multiple mods",
      "affected_prototypes": [
        "item.storage-chest"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Warehousing"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BUFFER-CHEST",
      "severity": "medium",
      "title": "Item Conflict: buffer-chest",
      "description": "Item 'buffer-chest' modified by multiple mods",
      "affected_prototypes": [
        "item.buffer-chest"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Warehousing"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_REQUESTER-CHEST",
      "severity": "medium",
      "title": "Item Conflict: requester-chest",
      "description": "Item 'requester-chest' modified by multiple mods",
      "affected_prototypes": [
        "item.requester-chest"
      ],
      "conflicting_mods": [
        "boblogistics",
        "orbital-transfer",
        "Warehousing"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-BRONZE-ALLOY",
      "severity": "medium",
      "title": "Item Conflict: bob-bronze-alloy",
      "description": "Item 'bob-bronze-alloy' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-bronze-alloy"
      ],
      "conflicting_mods": [
        "boblogistics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-SILICON-NITRIDE",
      "severity": "medium",
      "title": "Item Conflict: bob-silicon-nitride",
      "description": "Item 'bob-silicon-nitride' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-silicon-nitride"
      ],
      "conflicting_mods": [
        "boblogistics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-TUNGSTEN-PLATE",
      "severity": "medium",
      "title": "Item Conflict: bob-tungsten-plate",
      "description": "Item 'bob-tungsten-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-tungsten-plate"
      ],
      "conflicting_mods": [
        "boblogistics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-NITINOL-ALLOY",
      "severity": "medium",
      "title": "Item Conflict: bob-nitinol-alloy",
      "description": "Item 'bob-nitinol-alloy' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-nitinol-alloy"
      ],
      "conflicting_mods": [
        "boblogistics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-COPPER-TUNGSTEN-ALLOY",
      "severity": "medium",
      "title": "Item Conflict: bob-copper-tungsten-alloy",
      "description": "Item 'bob-copper-tungsten-alloy' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-copper-tungsten-alloy"
      ],
      "conflicting_mods": [
        "boblogistics",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PUMP",
      "severity": "medium",
      "title": "Item Conflict: pump",
      "description": "Item 'pump' modified by multiple mods",
      "affected_prototypes": [
        "item.pump"
      ],
      "conflicting_mods": [
        "boblogistics",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ROBOPORT",
      "severity": "medium",
      "title": "Item Conflict: roboport",
      "description": "Item 'roboport' modified by multiple mods",
      "affected_prototypes": [
        "item.roboport"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_STEEL-CHEST",
      "severity": "medium",
      "title": "Item Conflict: steel-chest",
      "description": "Item 'steel-chest' modified by multiple mods",
      "affected_prototypes": [
        "item.steel-chest"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_LOCOMOTIVE",
      "severity": "medium",
      "title": "Item Conflict: locomotive",
      "description": "Item 'locomotive' modified by multiple mods",
      "affected_prototypes": [
        "item.locomotive"
      ],
      "conflicting_mods": [
        "boblogistics",
        "Krastorio2-spaced-out",
        "se-space-trains"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_CARGO-WAGON",
      "severity": "medium",
      "title": "Item Conflict: cargo-wagon",
      "description": "Item 'cargo-wagon' modified by multiple mods",
      "affected_prototypes": [
        "item.cargo-wagon"
      ],
      "conflicting_mods": [
        "boblogistics",
        "se-space-trains",
        "DoubleWagons"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_FLUID-WAGON",
      "severity": "medium",
      "title": "Item Conflict: fluid-wagon",
      "description": "Item 'fluid-wagon' modified by multiple mods",
      "affected_prototypes": [
        "item.fluid-wagon"
      ],
      "conflicting_mods": [
        "boblogistics",
        "se-space-trains",
        "DoubleWagons"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_FLYING-ROBOT-FRAME",
      "severity": "medium",
      "title": "Item Conflict: flying-robot-frame",
      "description": "Item 'flying-robot-frame' modified by multiple mods",
      "affected_prototypes": [
        "item.flying-robot-frame"
      ],
      "conflicting_mods": [
        "boblogistics",
        "secretas",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_QUALITY-MODULE-3",
      "severity": "medium",
      "title": "Item Conflict: quality-module-3",
      "description": "Item 'quality-module-3' modified by multiple mods",
      "affected_prototypes": [
        "item.quality-module-3"
      ],
      "conflicting_mods": [
        "bobmodules",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_BOB-ORES",
      "severity": "low",
      "title": "Item-Subgroup Conflict: bob-ores",
      "description": "Item-Subgroup 'bob-ores' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.bob-ores"
      ],
      "conflicting_mods": [
        "bobores",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_BOB-GEMS-ORE",
      "severity": "low",
      "title": "Item-Subgroup Conflict: bob-gems-ore",
      "description": "Item-Subgroup 'bob-gems-ore' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.bob-gems-ore"
      ],
      "conflicting_mods": [
        "bobores",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-RUBY-ORE",
      "severity": "medium",
      "title": "Item Conflict: bob-ruby-ore",
      "description": "Item 'bob-ruby-ore' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-ruby-ore"
      ],
      "conflicting_mods": [
        "bobores",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-SAPPHIRE-ORE",
      "severity": "medium",
      "title": "Item Conflict: bob-sapphire-ore",
      "description": "Item 'bob-sapphire-ore' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-sapphire-ore"
      ],
      "conflicting_mods": [
        "bobores",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-EMERALD-ORE",
      "severity": "medium",
      "title": "Item Conflict: bob-emerald-ore",
      "description": "Item 'bob-emerald-ore' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-emerald-ore"
      ],
      "conflicting_mods": [
        "bobores",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-AMETHYST-ORE",
      "severity": "medium",
      "title": "Item Conflict: bob-amethyst-ore",
      "description": "Item 'bob-amethyst-ore' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-amethyst-ore"
      ],
      "conflicting_mods": [
        "bobores",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-TOPAZ-ORE",
      "severity": "medium",
      "title": "Item Conflict: bob-topaz-ore",
      "description": "Item 'bob-topaz-ore' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-topaz-ore"
      ],
      "conflicting_mods": [
        "bobores",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-DIAMOND-ORE",
      "severity": "medium",
      "title": "Item Conflict: bob-diamond-ore",
      "description": "Item 'bob-diamond-ore' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-diamond-ore"
      ],
      "conflicting_mods": [
        "bobores",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOB-ALIEN-ORANGE-ALLOY",
      "severity": "medium",
      "title": "Item Conflict: bob-alien-orange-alloy",
      "description": "Item 'bob-alien-orange-alloy' modified by multiple mods",
      "affected_prototypes": [
        "item.bob-alien-orange-alloy"
      ],
      "conflicting_mods": [
        "bobvehicleequipment",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_BOB-ALIEN-ACID",
      "severity": "low",
      "title": "Fluid Conflict: bob-alien-acid",
      "description": "Fluid 'bob-alien-acid' modified by multiple mods",
      "affected_prototypes": [
        "fluid.bob-alien-acid"
      ],
      "conflicting_mods": [
        "bobvehicleequipment",
        "bobplates"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_URANIUM-238",
      "severity": "medium",
      "title": "Item Conflict: uranium-238",
      "description": "Item 'uranium-238' modified by multiple mods",
      "affected_prototypes": [
        "item.uranium-238"
      ],
      "conflicting_mods": [
        "bobplates",
        "More_Ammo",
        "PlutoniumEnergy",
        "vtk-cannon-turret",
        "metal-and-stars",
        "StopgapNukes",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_HEAT-PIPE",
      "severity": "medium",
      "title": "Item Conflict: heat-pipe",
      "description": "Item 'heat-pipe' modified by multiple mods",
      "affected_prototypes": [
        "item.heat-pipe"
      ],
      "conflicting_mods": [
        "cubium",
        "Hovercrafts",
        "bobpower",
        "secretas",
        "metal-and-stars",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_VIRTUAL_SIGNAL-A",
      "severity": "low",
      "title": "Virtual Conflict: signal-A",
      "description": "Virtual 'signal-A' modified by multiple mods",
      "affected_prototypes": [
        "virtual.signal-A"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "bobpower",
        "Krastorio2-spaced-out",
        "snouz-big-accumulator"
      ],
      "root_cause": "Multiple mods modify the same virtual",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ACCUMULATOR",
      "severity": "medium",
      "title": "Item Conflict: accumulator",
      "description": "Item 'accumulator' modified by multiple mods",
      "affected_prototypes": [
        "item.accumulator"
      ],
      "conflicting_mods": [
        "slp-dyson-sphere-reworked",
        "cubium",
        "RampantFixed",
        "snouz-big-accumulator",
        "bobpower",
        "metal-and-stars",
        "Kux-OrbitalIonCannon"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BOILER",
      "severity": "medium",
      "title": "Item Conflict: boiler",
      "description": "Item 'boiler' modified by multiple mods",
      "affected_prototypes": [
        "item.boiler"
      ],
      "conflicting_mods": [
        "corrundum",
        "bobpower",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_HEAT-EXCHANGER",
      "severity": "medium",
      "title": "Item Conflict: heat-exchanger",
      "description": "Item 'heat-exchanger' modified by multiple mods",
      "affected_prototypes": [
        "item.heat-exchanger"
      ],
      "conflicting_mods": [
        "Hovercrafts",
        "bobpower"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_NUCLEAR-REACTOR",
      "severity": "medium",
      "title": "Item Conflict: nuclear-reactor",
      "description": "Item 'nuclear-reactor' modified by multiple mods",
      "affected_prototypes": [
        "item.nuclear-reactor"
      ],
      "conflicting_mods": [
        "bobpower",
        "RampantFixed"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_MEDIUM-ELECTRIC-POLE",
      "severity": "medium",
      "title": "Item Conflict: medium-electric-pole",
      "description": "Item 'medium-electric-pole' modified by multiple mods",
      "affected_prototypes": [
        "item.medium-electric-pole"
      ],
      "conflicting_mods": [
        "bobpower",
        "snouz-big-solar-panel",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SUBSTATION",
      "severity": "medium",
      "title": "Item Conflict: substation",
      "description": "Item 'substation' modified by multiple mods",
      "affected_prototypes": [
        "item.substation"
      ],
      "conflicting_mods": [
        "bobpower",
        "Krastorio2-spaced-out",
        "snouz_better_substation"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SOLAR-PANEL",
      "severity": "medium",
      "title": "Item Conflict: solar-panel",
      "description": "Item 'solar-panel' modified by multiple mods",
      "affected_prototypes": [
        "item.solar-panel"
      ],
      "conflicting_mods": [
        "slp-dyson-sphere-reworked",
        "bobpower",
        "snouz-big-solar-panel",
        "secretas",
        "Kux-OrbitalIonCannon",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_STEAM-ENGINE",
      "severity": "medium",
      "title": "Item Conflict: steam-engine",
      "description": "Item 'steam-engine' modified by multiple mods",
      "affected_prototypes": [
        "item.steam-engine"
      ],
      "conflicting_mods": [
        "corrundum",
        "bobpower",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_STEAM-TURBINE",
      "severity": "medium",
      "title": "Item Conflict: steam-turbine",
      "description": "Item 'steam-turbine' modified by multiple mods",
      "affected_prototypes": [
        "item.steam-turbine"
      ],
      "conflicting_mods": [
        "bobpower",
        "secretas",
        "corrundum",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CREATE-ENTITY_SMALL-SCORCHMARK",
      "severity": "low",
      "title": "Create-Entity Conflict: small-scorchmark",
      "description": "Create-Entity 'small-scorchmark' modified by multiple mods",
      "affected_prototypes": [
        "create-entity.small-scorchmark"
      ],
      "conflicting_mods": [
        "Krastorio2-spaced-out",
        "PlutoniumEnergy",
        "bobvehicleequipment"
      ],
      "root_cause": "Multiple mods modify the same create-entity",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PRODUCTIVITY-MODULE",
      "severity": "medium",
      "title": "Item Conflict: productivity-module",
      "description": "Item 'productivity-module' modified by multiple mods",
      "affected_prototypes": [
        "item.productivity-module"
      ],
      "conflicting_mods": [
        "cubium",
        "crushing-industry",
        "bobvehicleequipment"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_HYDROGEN-SULFIDE",
      "severity": "low",
      "title": "Fluid Conflict: hydrogen-sulfide",
      "description": "Fluid 'hydrogen-sulfide' modified by multiple mods",
      "affected_prototypes": [
        "fluid.hydrogen-sulfide"
      ],
      "conflicting_mods": [
        "corrundum",
        "StopgapNukes",
        "castra"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_FIREARM-MAGAZINE",
      "severity": "medium",
      "title": "Item Conflict: firearm-magazine",
      "description": "Item 'firearm-magazine' modified by multiple mods",
      "affected_prototypes": [
        "item.firearm-magazine"
      ],
      "conflicting_mods": [
        "More_Ammo",
        "cubium",
        "castra"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PIERCING-ROUNDS-MAGAZINE",
      "severity": "medium",
      "title": "Item Conflict: piercing-rounds-magazine",
      "description": "Item 'piercing-rounds-magazine' modified by multiple mods",
      "affected_prototypes": [
        "item.piercing-rounds-magazine"
      ],
      "conflicting_mods": [
        "cubium",
        "More_Ammo",
        "PlutoniumEnergy",
        "castra",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_URANIUM-ROUNDS-MAGAZINE",
      "severity": "medium",
      "title": "Item Conflict: uranium-rounds-magazine",
      "description": "Item 'uranium-rounds-magazine' modified by multiple mods",
      "affected_prototypes": [
        "item.uranium-rounds-magazine"
      ],
      "conflicting_mods": [
        "StopgapNukes",
        "Cerys-Moon-of-Fulgora",
        "castra"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_MOLTEN-IRON",
      "severity": "low",
      "title": "Fluid Conflict: molten-iron",
      "description": "Fluid 'molten-iron' modified by multiple mods",
      "affected_prototypes": [
        "fluid.molten-iron"
      ],
      "conflicting_mods": [
        "Paracelsin",
        "Moshine-assets",
        "foundry-restructuring",
        "common-prototypes",
        "castra",
        "Moshine",
        "crushing-industry",
        "metal-and-stars",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_LITHIUM-PLATE",
      "severity": "medium",
      "title": "Item Conflict: lithium-plate",
      "description": "Item 'lithium-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.lithium-plate"
      ],
      "conflicting_mods": [
        "slp-dyson-sphere-reworked",
        "cubium",
        "VoidProcessing",
        "castra",
        "secretas",
        "metal-and-stars",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SUPERCAPACITOR",
      "severity": "medium",
      "title": "Item Conflict: supercapacitor",
      "description": "Item 'supercapacitor' modified by multiple mods",
      "affected_prototypes": [
        "item.supercapacitor"
      ],
      "conflicting_mods": [
        "cubium",
        "RampantFixed",
        "castra",
        "tenebris-prime",
        "secretas",
        "metal-and-stars",
        "lignumis"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_HOLMIUM-SOLUTION",
      "severity": "low",
      "title": "Fluid Conflict: holmium-solution",
      "description": "Fluid 'holmium-solution' modified by multiple mods",
      "affected_prototypes": [
        "fluid.holmium-solution"
      ],
      "conflicting_mods": [
        "Cerys-Moon-of-Fulgora",
        "castra",
        "fulgora-coralmium-agriculture"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_HOLMIUM-PLATE",
      "severity": "medium",
      "title": "Item Conflict: holmium-plate",
      "description": "Item 'holmium-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.holmium-plate"
      ],
      "conflicting_mods": [
        "cubium",
        "VoidProcessing",
        "castra",
        "secretas",
        "metal-and-stars",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_QUANTUM-PROCESSOR",
      "severity": "medium",
      "title": "Item Conflict: quantum-processor",
      "description": "Item 'quantum-processor' modified by multiple mods",
      "affected_prototypes": [
        "item.quantum-processor"
      ],
      "conflicting_mods": [
        "slp-dyson-sphere-reworked",
        "cubium",
        "RampantFixed",
        "VoidProcessing",
        "castra",
        "Krastorio2-spaced-out",
        "promethium-quality"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_POISON-CAPSULE",
      "severity": "medium",
      "title": "Item Conflict: poison-capsule",
      "description": "Item 'poison-capsule' modified by multiple mods",
      "affected_prototypes": [
        "item.poison-capsule"
      ],
      "conflicting_mods": [
        "Krastorio2-spaced-out",
        "castra"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ROCKET-FUEL",
      "severity": "medium",
      "title": "Item Conflict: rocket-fuel",
      "description": "Item 'rocket-fuel' modified by multiple mods",
      "affected_prototypes": [
        "item.rocket-fuel"
      ],
      "conflicting_mods": [
        "cubium",
        "lignumis",
        "VoidProcessing",
        "PlutoniumEnergy",
        "castra",
        "tenebris-prime",
        "StopgapNukes",
        "metal-and-stars",
        "corrundum",
        "Kux-OrbitalIonCannon",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_CARBON-FIBER",
      "severity": "medium",
      "title": "Item Conflict: carbon-fiber",
      "description": "Item 'carbon-fiber' modified by multiple mods",
      "affected_prototypes": [
        "item.carbon-fiber"
      ],
      "conflicting_mods": [
        "slp-dyson-sphere-reworked",
        "cubium",
        "lilys-cubeine",
        "castra",
        "secretas",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ANCIENT-STRUCTURE-REPAIR-PART",
      "severity": "medium",
      "title": "Item Conflict: ancient-structure-repair-part",
      "description": "Item 'ancient-structure-repair-part' modified by multiple mods",
      "affected_prototypes": [
        "item.ancient-structure-repair-part"
      ],
      "conflicting_mods": [
        "Cerys-Moon-of-Fulgora",
        "cerys-lunaponics"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_CERYS-NITROGEN-RICH-MINERALS",
      "severity": "medium",
      "title": "Item Conflict: cerys-nitrogen-rich-minerals",
      "description": "Item 'cerys-nitrogen-rich-minerals' modified by multiple mods",
      "affected_prototypes": [
        "item.cerys-nitrogen-rich-minerals"
      ],
      "conflicting_mods": [
        "Cerys-Moon-of-Fulgora",
        "cerys-lunaponics"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_METHANE",
      "severity": "low",
      "title": "Fluid Conflict: methane",
      "description": "Fluid 'methane' modified by multiple mods",
      "affected_prototypes": [
        "fluid.methane"
      ],
      "conflicting_mods": [
        "Cerys-Moon-of-Fulgora",
        "cerys-lunaponics"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_NITRIC-ACID",
      "severity": "low",
      "title": "Fluid Conflict: nitric-acid",
      "description": "Fluid 'nitric-acid' modified by multiple mods",
      "affected_prototypes": [
        "fluid.nitric-acid"
      ],
      "conflicting_mods": [
        "Cerys-Moon-of-Fulgora",
        "cerys-lunaponics"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_TIN-ORE",
      "severity": "medium",
      "title": "Item Conflict: tin-ore",
      "description": "Item 'tin-ore' modified by multiple mods",
      "affected_prototypes": [
        "item.tin-ore"
      ],
      "conflicting_mods": [
        "crushing-industry",
        "cerys-lunaponics"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PLUTONIUM-238",
      "severity": "medium",
      "title": "Item Conflict: plutonium-238",
      "description": "Item 'plutonium-238' modified by multiple mods",
      "affected_prototypes": [
        "item.plutonium-238"
      ],
      "conflicting_mods": [
        "PlutoniumEnergy",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PLUTONIUM-ROUNDS-MAGAZINE",
      "severity": "medium",
      "title": "Item Conflict: plutonium-rounds-magazine",
      "description": "Item 'plutonium-rounds-magazine' modified by multiple mods",
      "affected_prototypes": [
        "item.plutonium-rounds-magazine"
      ],
      "conflicting_mods": [
        "PlutoniumEnergy",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_NUCLEAR-FUEL",
      "severity": "medium",
      "title": "Item Conflict: nuclear-fuel",
      "description": "Item 'nuclear-fuel' modified by multiple mods",
      "affected_prototypes": [
        "item.nuclear-fuel"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PLUTONIUM-FUEL",
      "severity": "medium",
      "title": "Item Conflict: plutonium-fuel",
      "description": "Item 'plutonium-fuel' modified by multiple mods",
      "affected_prototypes": [
        "item.plutonium-fuel"
      ],
      "conflicting_mods": [
        "PlutoniumEnergy",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_URANIUM-CANNON-SHELL",
      "severity": "medium",
      "title": "Item Conflict: uranium-cannon-shell",
      "description": "Item 'uranium-cannon-shell' modified by multiple mods",
      "affected_prototypes": [
        "item.uranium-cannon-shell"
      ],
      "conflicting_mods": [
        "Cerys-Moon-of-Fulgora",
        "lilys-cubeine"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PLUTONIUM-CANNON-SHELL",
      "severity": "medium",
      "title": "Item Conflict: plutonium-cannon-shell",
      "description": "Item 'plutonium-cannon-shell' modified by multiple mods",
      "affected_prototypes": [
        "item.plutonium-cannon-shell"
      ],
      "conflicting_mods": [
        "PlutoniumEnergy",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_EXPLOSIVE-PLUTONIUM-CANNON-SHELL",
      "severity": "medium",
      "title": "Item Conflict: explosive-plutonium-cannon-shell",
      "description": "Item 'explosive-plutonium-cannon-shell' modified by multiple mods",
      "affected_prototypes": [
        "item.explosive-plutonium-cannon-shell"
      ],
      "conflicting_mods": [
        "PlutoniumEnergy",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_HOLMIUM-ORE",
      "severity": "medium",
      "title": "Item Conflict: holmium-ore",
      "description": "Item 'holmium-ore' modified by multiple mods",
      "affected_prototypes": [
        "item.holmium-ore"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "crushing-industry",
        "Cerys-Moon-of-Fulgora",
        "fulgora-coralmium-agriculture"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_LITHIUM",
      "severity": "medium",
      "title": "Item Conflict: lithium",
      "description": "Item 'lithium' modified by multiple mods",
      "affected_prototypes": [
        "item.lithium"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "crushing-industry",
        "Cerys-Moon-of-Fulgora"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ARTILLERY-SHELL",
      "severity": "medium",
      "title": "Item Conflict: artillery-shell",
      "description": "Item 'artillery-shell' modified by multiple mods",
      "affected_prototypes": [
        "item.artillery-shell"
      ],
      "conflicting_mods": [
        "StopgapNukes",
        "Krastorio2-spaced-out",
        "Cerys-Moon-of-Fulgora",
        "lilys-cubeine"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SPEED-MODULE",
      "severity": "medium",
      "title": "Item Conflict: speed-module",
      "description": "Item 'speed-module' modified by multiple mods",
      "affected_prototypes": [
        "item.speed-module"
      ],
      "conflicting_mods": [
        "Hovercrafts",
        "Cold_biters"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_DAMAGE-TYPE_COLD",
      "severity": "low",
      "title": "Damage-Type Conflict: cold",
      "description": "Damage-Type 'cold' modified by multiple mods",
      "affected_prototypes": [
        "damage-type.cold"
      ],
      "conflicting_mods": [
        "Cold_biters",
        "enemyracemanager"
      ],
      "root_cause": "Multiple mods modify the same damage-type",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_SPACE-NANITES",
      "severity": "low",
      "title": "Item-Subgroup Conflict: space-nanites",
      "description": "Item-Subgroup 'space-nanites' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.space-nanites"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_SHIPYARD-PROCESSES",
      "severity": "low",
      "title": "Item-Subgroup Conflict: shipyard-processes",
      "description": "Item-Subgroup 'shipyard-processes' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.shipyard-processes"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_NIX-PROCESSES",
      "severity": "low",
      "title": "Item-Subgroup Conflict: nix-processes",
      "description": "Item-Subgroup 'nix-processes' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.nix-processes"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_RINGWORLD-PROCESSES",
      "severity": "low",
      "title": "Item-Subgroup Conflict: ringworld-processes",
      "description": "Item-Subgroup 'ringworld-processes' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.ringworld-processes"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_MIRANDUS-PROCESSES",
      "severity": "low",
      "title": "Item-Subgroup Conflict: mirandus-processes",
      "description": "Item-Subgroup 'mirandus-processes' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.mirandus-processes"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_QUANTUM-PROCESSING",
      "severity": "low",
      "title": "Item-Subgroup Conflict: quantum-processing",
      "description": "Item-Subgroup 'quantum-processing' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.quantum-processing"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_QUANTUM-CONVERSION",
      "severity": "low",
      "title": "Item-Subgroup Conflict: quantum-conversion",
      "description": "Item-Subgroup 'quantum-conversion' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.quantum-conversion"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM-SUBGROUP_LIQUID-FUEL",
      "severity": "low",
      "title": "Item-Subgroup Conflict: liquid-fuel",
      "description": "Item-Subgroup 'liquid-fuel' modified by multiple mods",
      "affected_prototypes": [
        "item-subgroup.liquid-fuel"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same item-subgroup",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_GOLD-PLATE",
      "severity": "medium",
      "title": "Item Conflict: gold-plate",
      "description": "Item 'gold-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.gold-plate"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "lignumis",
        "common-prototypes",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_GOLD-CABLE",
      "severity": "medium",
      "title": "Item Conflict: gold-cable",
      "description": "Item 'gold-cable' modified by multiple mods",
      "affected_prototypes": [
        "item.gold-cable"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "lignumis",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_NEODYMIUM-PLATE",
      "severity": "medium",
      "title": "Item Conflict: neodymium-plate",
      "description": "Item 'neodymium-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.neodymium-plate"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_GOLD-ORE",
      "severity": "medium",
      "title": "Item Conflict: gold-ore",
      "description": "Item 'gold-ore' modified by multiple mods",
      "affected_prototypes": [
        "item.gold-ore"
      ],
      "conflicting_mods": [
        "lignumis",
        "common-prototypes",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_MOLTEN-GOLD",
      "severity": "low",
      "title": "Fluid Conflict: molten-gold",
      "description": "Fluid 'molten-gold' modified by multiple mods",
      "affected_prototypes": [
        "fluid.molten-gold"
      ],
      "conflicting_mods": [
        "lignumis",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SILICA-SAND",
      "severity": "medium",
      "title": "Item Conflict: silica-sand",
      "description": "Item 'silica-sand' modified by multiple mods",
      "affected_prototypes": [
        "item.silica-sand"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_GLASS-PLATE",
      "severity": "medium",
      "title": "Item Conflict: glass-plate",
      "description": "Item 'glass-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.glass-plate"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_GLASS-BILLET",
      "severity": "medium",
      "title": "Item Conflict: glass-billet",
      "description": "Item 'glass-billet' modified by multiple mods",
      "affected_prototypes": [
        "item.glass-billet"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_MOLTEN-GLASS",
      "severity": "low",
      "title": "Fluid Conflict: molten-glass",
      "description": "Fluid 'molten-glass' modified by multiple mods",
      "affected_prototypes": [
        "fluid.molten-glass"
      ],
      "conflicting_mods": [
        "crushing-industry",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_NEODYMIUM-ORE",
      "severity": "medium",
      "title": "Item Conflict: neodymium-ore",
      "description": "Item 'neodymium-ore' modified by multiple mods",
      "affected_prototypes": [
        "item.neodymium-ore"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "common-prototypes"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_INVERTED-MICROCUBE",
      "severity": "medium",
      "title": "Item Conflict: inverted-microcube",
      "description": "Item 'inverted-microcube' modified by multiple mods",
      "affected_prototypes": [
        "item.inverted-microcube"
      ],
      "conflicting_mods": [
        "corrundum",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_DREAM-CONCENTRATE",
      "severity": "low",
      "title": "Fluid Conflict: dream-concentrate",
      "description": "Fluid 'dream-concentrate' modified by multiple mods",
      "affected_prototypes": [
        "fluid.dream-concentrate"
      ],
      "conflicting_mods": [
        "corrundum",
        "secretas",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_INVERTED-DORMANT-MICROCUBE",
      "severity": "medium",
      "title": "Item Conflict: inverted-dormant-microcube",
      "description": "Item 'inverted-dormant-microcube' modified by multiple mods",
      "affected_prototypes": [
        "item.inverted-dormant-microcube"
      ],
      "conflicting_mods": [
        "corrundum",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_RAW-FISH",
      "severity": "medium",
      "title": "Item Conflict: raw-fish",
      "description": "Item 'raw-fish' modified by multiple mods",
      "affected_prototypes": [
        "item.raw-fish"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "corrundum",
        "enemyracemanager"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BITER-EGG",
      "severity": "medium",
      "title": "Item Conflict: biter-egg",
      "description": "Item 'biter-egg' modified by multiple mods",
      "affected_prototypes": [
        "item.biter-egg"
      ],
      "conflicting_mods": [
        "corrundum",
        "Krastorio2-spaced-out",
        "secretas",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_LAB",
      "severity": "medium",
      "title": "Item Conflict: lab",
      "description": "Item 'lab' modified by multiple mods",
      "affected_prototypes": [
        "item.lab"
      ],
      "conflicting_mods": [
        "corrundum",
        "Moshine",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_THRUSTER-FUEL",
      "severity": "low",
      "title": "Fluid Conflict: thruster-fuel",
      "description": "Fluid 'thruster-fuel' modified by multiple mods",
      "affected_prototypes": [
        "fluid.thruster-fuel"
      ],
      "conflicting_mods": [
        "slp-dyson-sphere-reworked",
        "corrundum",
        "VoidProcessing",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_THRUSTER-OXIDIZER",
      "severity": "low",
      "title": "Fluid Conflict: thruster-oxidizer",
      "description": "Fluid 'thruster-oxidizer' modified by multiple mods",
      "affected_prototypes": [
        "fluid.thruster-oxidizer"
      ],
      "conflicting_mods": [
        "slp-dyson-sphere-reworked",
        "corrundum",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ROCKET",
      "severity": "medium",
      "title": "Item Conflict: rocket",
      "description": "Item 'rocket' modified by multiple mods",
      "affected_prototypes": [
        "item.rocket"
      ],
      "conflicting_mods": [
        "corrundum",
        "StopgapNukes",
        "secretas",
        "lilys-cubeine"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_RECIPE-CATEGORY_BASIC-CRUSHING",
      "severity": "low",
      "title": "Recipe-Category Conflict: basic-crushing",
      "description": "Recipe-Category 'basic-crushing' modified by multiple mods",
      "affected_prototypes": [
        "recipe-category.basic-crushing"
      ],
      "conflicting_mods": [
        "crushing-industry",
        "quirkycat_base"
      ],
      "root_cause": "Multiple mods modify the same recipe-category",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_RECIPE-CATEGORY_BASIC-CRUSHING-OR-CRAFTING",
      "severity": "low",
      "title": "Recipe-Category Conflict: basic-crushing-or-crafting",
      "description": "Recipe-Category 'basic-crushing-or-crafting' modified by multiple mods",
      "affected_prototypes": [
        "recipe-category.basic-crushing-or-crafting"
      ],
      "conflicting_mods": [
        "crushing-industry",
        "wood-industry"
      ],
      "root_cause": "Multiple mods modify the same recipe-category",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_TUNGSTEN-CARBIDE",
      "severity": "medium",
      "title": "Item Conflict: tungsten-carbide",
      "description": "Item 'tungsten-carbide' modified by multiple mods",
      "affected_prototypes": [
        "item.tungsten-carbide"
      ],
      "conflicting_mods": [
        "cubium",
        "lilys-cubeine",
        "vulcanus-sulfuric-bacteria",
        "crushing-industry",
        "lignumis",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_LAVA",
      "severity": "low",
      "title": "Fluid Conflict: lava",
      "description": "Fluid 'lava' modified by multiple mods",
      "affected_prototypes": [
        "fluid.lava"
      ],
      "conflicting_mods": [
        "foundry-restructuring",
        "crushing-industry",
        "metal-and-stars",
        "vulcanus-sulfuric-bacteria"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_TUNGSTEN-ORE",
      "severity": "medium",
      "title": "Item Conflict: tungsten-ore",
      "description": "Item 'tungsten-ore' modified by multiple mods",
      "affected_prototypes": [
        "item.tungsten-ore"
      ],
      "conflicting_mods": [
        "crushing-industry",
        "vulcanus-sulfuric-bacteria"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_LEAD-PLATE",
      "severity": "medium",
      "title": "Item Conflict: lead-plate",
      "description": "Item 'lead-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.lead-plate"
      ],
      "conflicting_mods": [
        "PlutoniumEnergy",
        "crushing-industry"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_TITANIUM-PLATE",
      "severity": "medium",
      "title": "Item Conflict: titanium-plate",
      "description": "Item 'titanium-plate' modified by multiple mods",
      "affected_prototypes": [
        "item.titanium-plate"
      ],
      "conflicting_mods": [
        "crushing-industry",
        "Fluid-level-indicator"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ENERGIZED-MICROCUBE",
      "severity": "medium",
      "title": "Item Conflict: energized-microcube",
      "description": "Item 'energized-microcube' modified by multiple mods",
      "affected_prototypes": [
        "item.energized-microcube"
      ],
      "conflicting_mods": [
        "cubium",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_DORMANT-MICROCUBE",
      "severity": "medium",
      "title": "Item Conflict: dormant-microcube",
      "description": "Item 'dormant-microcube' modified by multiple mods",
      "affected_prototypes": [
        "item.dormant-microcube"
      ],
      "conflicting_mods": [
        "cubium",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CREATE-ENTITY_SMALL-SCORCHMARK-TINTABLE",
      "severity": "low",
      "title": "Create-Entity Conflict: small-scorchmark-tintable",
      "description": "Create-Entity 'small-scorchmark-tintable' modified by multiple mods",
      "affected_prototypes": [
        "create-entity.small-scorchmark-tintable"
      ],
      "conflicting_mods": [
        "cubium",
        "wood-military"
      ],
      "root_cause": "Multiple mods modify the same create-entity",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_ULTRADENSE-LAVA",
      "severity": "low",
      "title": "Fluid Conflict: ultradense-lava",
      "description": "Fluid 'ultradense-lava' modified by multiple mods",
      "affected_prototypes": [
        "fluid.ultradense-lava"
      ],
      "conflicting_mods": [
        "cubium",
        "lilys-cubeine"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_ICE",
      "severity": "medium",
      "title": "Item Conflict: ice",
      "description": "Item 'ice' modified by multiple mods",
      "affected_prototypes": [
        "item.ice"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "cubium",
        "Krastorio2-spaced-out",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_JELLY",
      "severity": "medium",
      "title": "Item Conflict: jelly",
      "description": "Item 'jelly' modified by multiple mods",
      "affected_prototypes": [
        "item.jelly"
      ],
      "conflicting_mods": [
        "cubium",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_AUTOMATION-SCIENCE-PACK",
      "severity": "medium",
      "title": "Item Conflict: automation-science-pack",
      "description": "Item 'automation-science-pack' modified by multiple mods",
      "affected_prototypes": [
        "item.automation-science-pack"
      ],
      "conflicting_mods": [
        "cubium",
        "Igrys"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_RAIL",
      "severity": "medium",
      "title": "Item Conflict: rail",
      "description": "Item 'rail' modified by multiple mods",
      "affected_prototypes": [
        "item.rail"
      ],
      "conflicting_mods": [
        "foundry-restructuring",
        "cubium"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_MOLTEN-COPPER",
      "severity": "low",
      "title": "Fluid Conflict: molten-copper",
      "description": "Fluid 'molten-copper' modified by multiple mods",
      "affected_prototypes": [
        "fluid.molten-copper"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "cubium",
        "Moshine-assets",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_ELECTROLYTE",
      "severity": "low",
      "title": "Fluid Conflict: electrolyte",
      "description": "Fluid 'electrolyte' modified by multiple mods",
      "affected_prototypes": [
        "fluid.electrolyte"
      ],
      "conflicting_mods": [
        "cubium",
        "fulgora-coralmium-agriculture"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_PROMETHIUM-ASTEROID-CHUNK",
      "severity": "medium",
      "title": "Item Conflict: promethium-asteroid-chunk",
      "description": "Item 'promethium-asteroid-chunk' modified by multiple mods",
      "affected_prototypes": [
        "item.promethium-asteroid-chunk"
      ],
      "conflicting_mods": [
        "slp-dyson-sphere-reworked",
        "cubium",
        "promethium-quality",
        "VoidProcessing"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_TURBO-TRANSPORT-BELT",
      "severity": "medium",
      "title": "Item Conflict: turbo-transport-belt",
      "description": "Item 'turbo-transport-belt' modified by multiple mods",
      "affected_prototypes": [
        "item.turbo-transport-belt"
      ],
      "conflicting_mods": [
        "cubium",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_TURBO-UNDERGROUND-BELT",
      "severity": "medium",
      "title": "Item Conflict: turbo-underground-belt",
      "description": "Item 'turbo-underground-belt' modified by multiple mods",
      "affected_prototypes": [
        "item.turbo-underground-belt"
      ],
      "conflicting_mods": [
        "cubium",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_TURBO-SPLITTER",
      "severity": "medium",
      "title": "Item Conflict: turbo-splitter",
      "description": "Item 'turbo-splitter' modified by multiple mods",
      "affected_prototypes": [
        "item.turbo-splitter"
      ],
      "conflicting_mods": [
        "cubium",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_FOUNDRY",
      "severity": "medium",
      "title": "Item Conflict: foundry",
      "description": "Item 'foundry' modified by multiple mods",
      "affected_prototypes": [
        "item.foundry"
      ],
      "conflicting_mods": [
        "cubium",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_EFFICIENCY-MODULE",
      "severity": "medium",
      "title": "Item Conflict: efficiency-module",
      "description": "Item 'efficiency-module' modified by multiple mods",
      "affected_prototypes": [
        "item.efficiency-module"
      ],
      "conflicting_mods": [
        "Electric Furnaces",
        "Hovercrafts"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_DAMAGE-TYPE_HEALING",
      "severity": "low",
      "title": "Damage-Type Conflict: healing",
      "description": "Damage-Type 'healing' modified by multiple mods",
      "affected_prototypes": [
        "damage-type.healing"
      ],
      "conflicting_mods": [
        "enemyracemanager",
        "RampantFixed"
      ],
      "root_cause": "Multiple mods modify the same damage-type",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CREATE-EXPLOSION_PROTOSS--ARCHON-HIT-EXPLOSION",
      "severity": "low",
      "title": "Create-Explosion Conflict: protoss--archon-hit-explosion",
      "description": "Create-Explosion 'protoss--archon-hit-explosion' modified by multiple mods",
      "affected_prototypes": [
        "create-explosion.protoss--archon-hit-explosion"
      ],
      "conflicting_mods": [
        "erm_toss",
        "erm_toss_economy"
      ],
      "root_cause": "Multiple mods modify the same create-explosion",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CREATE-EXPLOSION_PROTOSS--CORSAIR-EXPLOSION",
      "severity": "low",
      "title": "Create-Explosion Conflict: protoss--corsair-explosion",
      "description": "Create-Explosion 'protoss--corsair-explosion' modified by multiple mods",
      "affected_prototypes": [
        "create-explosion.protoss--corsair-explosion"
      ],
      "conflicting_mods": [
        "erm_toss",
        "erm_toss_economy"
      ],
      "root_cause": "Multiple mods modify the same create-explosion",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CREATE-EXPLOSION_PROTOSS--DISRUPT-80",
      "severity": "low",
      "title": "Create-Explosion Conflict: protoss--disrupt-80",
      "description": "Create-Explosion 'protoss--disrupt-80' modified by multiple mods",
      "affected_prototypes": [
        "create-explosion.protoss--disrupt-80"
      ],
      "conflicting_mods": [
        "erm_toss",
        "erm_toss_economy"
      ],
      "root_cause": "Multiple mods modify the same create-explosion",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CREATE-EXPLOSION_MEDIUM-EXPLOSION",
      "severity": "low",
      "title": "Create-Explosion Conflict: medium-explosion",
      "description": "Create-Explosion 'medium-explosion' modified by multiple mods",
      "affected_prototypes": [
        "create-explosion.medium-explosion"
      ],
      "conflicting_mods": [
        "erm_zerg",
        "erm_zerg_economy"
      ],
      "root_cause": "Multiple mods modify the same create-explosion",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SMALL-LAMP",
      "severity": "medium",
      "title": "Item Conflict: small-lamp",
      "description": "Item 'small-lamp' modified by multiple mods",
      "affected_prototypes": [
        "item.small-lamp"
      ],
      "conflicting_mods": [
        "terrapalus",
        "secretas",
        "metal-and-stars",
        "Krastorio2-spaced-out",
        "Fluid-level-indicator"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_KR-STEEL-PIPE",
      "severity": "medium",
      "title": "Item Conflict: kr-steel-pipe",
      "description": "Item 'kr-steel-pipe' modified by multiple mods",
      "affected_prototypes": [
        "item.kr-steel-pipe"
      ],
      "conflicting_mods": [
        "Krastorio2-spaced-out",
        "Fluid-level-indicator"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_TECHNOLOGY_TREE-SEEDING",
      "severity": "medium",
      "title": "Technology Conflict: tree-seeding",
      "description": "Technology 'tree-seeding' modified by multiple mods",
      "affected_prototypes": [
        "technology.tree-seeding"
      ],
      "conflicting_mods": [
        "lignumis",
        "gleba-reborn"
      ],
      "root_cause": "Multiple mods modify the same technology",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_STACK-INSERTER",
      "severity": "medium",
      "title": "Item Conflict: stack-inserter",
      "description": "Item 'stack-inserter' modified by multiple mods",
      "affected_prototypes": [
        "item.stack-inserter"
      ],
      "conflicting_mods": [
        "long_stack_inserter",
        "Krastorio2-spaced-out"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CREATE-FIRE_FIRE-FLAME",
      "severity": "low",
      "title": "Create-Fire Conflict: fire-flame",
      "description": "Create-Fire 'fire-flame' modified by multiple mods",
      "affected_prototypes": [
        "create-fire.fire-flame"
      ],
      "conflicting_mods": [
        "Kux-OrbitalIonCannon",
        "RPGsystem"
      ],
      "root_cause": "Multiple mods modify the same create-fire",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_CREATE-FIRE_FIRE-FLAME-ON-TREE",
      "severity": "low",
      "title": "Create-Fire Conflict: fire-flame-on-tree",
      "description": "Create-Fire 'fire-flame-on-tree' modified by multiple mods",
      "affected_prototypes": [
        "create-fire.fire-flame-on-tree"
      ],
      "conflicting_mods": [
        "More_Ammo",
        "Kux-OrbitalIonCannon"
      ],
      "root_cause": "Multiple mods modify the same create-fire",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_WOOD-DARTS-MAGAZINE",
      "severity": "medium",
      "title": "Item Conflict: wood-darts-magazine",
      "description": "Item 'wood-darts-magazine' modified by multiple mods",
      "affected_prototypes": [
        "item.wood-darts-magazine"
      ],
      "conflicting_mods": [
        "lignumis",
        "wood-military"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_WOOD-ARMOR",
      "severity": "medium",
      "title": "Item Conflict: wood-armor",
      "description": "Item 'wood-armor' modified by multiple mods",
      "affected_prototypes": [
        "item.wood-armor"
      ],
      "conflicting_mods": [
        "lignumis",
        "wood-military"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_BIG-MINING-DRILL",
      "severity": "medium",
      "title": "Item Conflict: big-mining-drill",
      "description": "Item 'big-mining-drill' modified by multiple mods",
      "affected_prototypes": [
        "item.big-mining-drill"
      ],
      "conflicting_mods": [
        "OmegaDrill",
        "lilys-cubeine"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_CANNON-SHELL",
      "severity": "medium",
      "title": "Item Conflict: cannon-shell",
      "description": "Item 'cannon-shell' modified by multiple mods",
      "affected_prototypes": [
        "item.cannon-shell"
      ],
      "conflicting_mods": [
        "PlutoniumEnergy",
        "lilys-cubeine"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_SPACE-PLATFORM-FOUNDATION",
      "severity": "medium",
      "title": "Item Conflict: space-platform-foundation",
      "description": "Item 'space-platform-foundation' modified by multiple mods",
      "affected_prototypes": [
        "item.space-platform-foundation"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "Moshine",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_HEAVY-WATER",
      "severity": "low",
      "title": "Fluid Conflict: heavy-water",
      "description": "Fluid 'heavy-water' modified by multiple mods",
      "affected_prototypes": [
        "fluid.heavy-water"
      ],
      "conflicting_mods": [
        "metal-and-stars",
        "StopgapNukes"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_FLUID_RAW-DATA",
      "severity": "low",
      "title": "Fluid Conflict: raw-data",
      "description": "Fluid 'raw-data' modified by multiple mods",
      "affected_prototypes": [
        "fluid.raw-data"
      ],
      "conflicting_mods": [
        "Moshine",
        "Moshine-assets"
      ],
      "root_cause": "Multiple mods modify the same fluid",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_NEODYMIUM",
      "severity": "medium",
      "title": "Item Conflict: neodymium",
      "description": "Item 'neodymium' modified by multiple mods",
      "affected_prototypes": [
        "item.neodymium"
      ],
      "conflicting_mods": [
        "Moshine",
        "Moshine-assets"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_DISPLAY-PANEL",
      "severity": "medium",
      "title": "Item Conflict: display-panel",
      "description": "Item 'display-panel' modified by multiple mods",
      "affected_prototypes": [
        "item.display-panel"
      ],
      "conflicting_mods": [
        "Moshine",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_CONSTANT-COMBINATOR",
      "severity": "medium",
      "title": "Item Conflict: constant-combinator",
      "description": "Item 'constant-combinator' modified by multiple mods",
      "affected_prototypes": [
        "item.constant-combinator"
      ],
      "conflicting_mods": [
        "PavementDriveAssistContinued",
        "Moshine",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_DEPLETED-URANIUM-FUEL-CELL",
      "severity": "medium",
      "title": "Item Conflict: depleted-uranium-fuel-cell",
      "description": "Item 'depleted-uranium-fuel-cell' modified by multiple mods",
      "affected_prototypes": [
        "item.depleted-uranium-fuel-cell"
      ],
      "conflicting_mods": [
        "PlutoniumEnergy",
        "StopgapNukes",
        "secretas"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_RECIPE-CATEGORY_PULVERISING",
      "severity": "low",
      "title": "Recipe-Category Conflict: pulverising",
      "description": "Recipe-Category 'pulverising' modified by multiple mods",
      "affected_prototypes": [
        "recipe-category.pulverising"
      ],
      "conflicting_mods": [
        "quirkycat_machines",
        "quirkycat_base"
      ],
      "root_cause": "Multiple mods modify the same recipe-category",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_RECIPE-CATEGORY_JR-FOUNDRY-SMELTING",
      "severity": "low",
      "title": "Recipe-Category Conflict: jr-foundry-smelting",
      "description": "Recipe-Category 'jr-foundry-smelting' modified by multiple mods",
      "affected_prototypes": [
        "recipe-category.jr-foundry-smelting"
      ],
      "conflicting_mods": [
        "quirkycat_machines",
        "quirkycat_base"
      ],
      "root_cause": "Multiple mods modify the same recipe-category",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_JR-BORAX",
      "severity": "medium",
      "title": "Item Conflict: jr-borax",
      "description": "Item 'jr-borax' modified by multiple mods",
      "affected_prototypes": [
        "item.jr-borax"
      ],
      "conflicting_mods": [
        "quirkycat_boron",
        "quirkycat_base"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_JR-BORON",
      "severity": "medium",
      "title": "Item Conflict: jr-boron",
      "description": "Item 'jr-boron' modified by multiple mods",
      "affected_prototypes": [
        "item.jr-boron"
      ],
      "conflicting_mods": [
        "quirkycat_boron",
        "quirkycat_base"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_JR-BORON-ROD",
      "severity": "medium",
      "title": "Item Conflict: jr-boron-rod",
      "description": "Item 'jr-boron-rod' modified by multiple mods",
      "affected_prototypes": [
        "item.jr-boron-rod"
      ],
      "conflicting_mods": [
        "quirkycat_boron",
        "quirkycat_base"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "CONFLICT_ITEM_CHARCOAL",
      "severity": "medium",
      "title": "Item Conflict: charcoal",
      "description": "Item 'charcoal' modified by multiple mods",
      "affected_prototypes": [
        "item.charcoal"
      ],
      "conflicting_mods": [
        "quirkycat_machines",
        "wood-industry",
        "quirkycat_base"
      ],
      "root_cause": "Multiple mods modify the same item",
      "suggested_fixes": [
        "Review modification order",
        "Create compatibility patch",
        "Use conditional modifications"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_ELECTRONICS",
      "severity": "high",
      "title": "Missing Dependencies: electronics",
      "description": "Technology electronics has missing dependencies: {,  , \", c, o, p, p, e, r, -, p, r, o, c, e, s, s, i, n, g, \",  , }",
      "affected_prototypes": [
        "technology.electronics"
      ],
      "conflicting_mods": [
        "Age-of-Production",
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {,  , \", c, o, p, p, e, r, -, p, r, o, c, e, s, s, i, n, g, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", c, o, p, p, e, r, -, p, r, o, c, e, s, s, i, n, g, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_ORE-CRUSHING-PRODUCTIVITY-1",
      "severity": "high",
      "title": "Missing Dependencies: ore-crushing-productivity-1",
      "description": "Technology ore-crushing-productivity-1 has missing dependencies: {,  , \", b, a, s, i, c, -, o, r, e, -, c, r, u, s, h, i, n, g, \", ,,  , \", p, r, o, v, i, s, i, o, n, a, l, -, r, o, c, k, e, t, r, y, \",  , }",
      "affected_prototypes": [
        "technology.ore-crushing-productivity-1"
      ],
      "conflicting_mods": [
        "crushing-industry-productivity-research",
        "crushing-industry-productivity-research"
      ],
      "root_cause": "Required dependencies not found: {,  , \", b, a, s, i, c, -, o, r, e, -, c, r, u, s, h, i, n, g, \", ,,  , \", p, r, o, v, i, s, i, o, n, a, l, -, r, o, c, k, e, t, r, y, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", b, a, s, i, c, -, o, r, e, -, c, r, u, s, h, i, n, g, \", ,,  , \", p, r, o, v, i, s, i, o, n, a, l, -, r, o, c, k, e, t, r, y, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_ORE-CRUSHING-PRODUCTIVITY-2",
      "severity": "high",
      "title": "Missing Dependencies: ore-crushing-productivity-2",
      "description": "Technology ore-crushing-productivity-2 has missing dependencies: {,  , \", c, h, e, m, i, c, a, l, -, s, c, i, e, n, c, e, -, p, a, c, k, \", ,,  , \", o, r, e, -, c, r, u, s, h, i, n, g, \",  , }",
      "affected_prototypes": [
        "technology.ore-crushing-productivity-2"
      ],
      "conflicting_mods": [
        "crushing-industry-productivity-research",
        "crushing-industry-productivity-research"
      ],
      "root_cause": "Required dependencies not found: {,  , \", c, h, e, m, i, c, a, l, -, s, c, i, e, n, c, e, -, p, a, c, k, \", ,,  , \", o, r, e, -, c, r, u, s, h, i, n, g, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", c, h, e, m, i, c, a, l, -, s, c, i, e, n, c, e, -, p, a, c, k, \", ,,  , \", o, r, e, -, c, r, u, s, h, i, n, g, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_ORE-CRUSHING-PRODUCTIVITY-3",
      "severity": "high",
      "title": "Missing Dependencies: ore-crushing-productivity-3",
      "description": "Technology ore-crushing-productivity-3 has missing dependencies: {,  , \", o, r, e, -, c, r, u, s, h, i, n, g, -, p, r, o, d, u, c, t, i, v, i, t, y, -, 2, \", ,,  , \", p, r, o, d, u, c, t, i, o, n, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.ore-crushing-productivity-3"
      ],
      "conflicting_mods": [
        "crushing-industry-productivity-research",
        "crushing-industry-productivity-research"
      ],
      "root_cause": "Required dependencies not found: {,  , \", o, r, e, -, c, r, u, s, h, i, n, g, -, p, r, o, d, u, c, t, i, v, i, t, y, -, 2, \", ,,  , \", p, r, o, d, u, c, t, i, o, n, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", o, r, e, -, c, r, u, s, h, i, n, g, -, p, r, o, d, u, c, t, i, v, i, t, y, -, 2, \", ,,  , \", p, r, o, d, u, c, t, i, o, n, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_ELEVATED-RAIL",
      "severity": "high",
      "title": "Missing Dependencies: elevated-rail",
      "description": "Technology elevated-rail has missing dependencies: {,  , \", r, a, i, l, w, a, y, \", ,,  , \", c, o, n, c, r, e, t, e, \",  , }",
      "affected_prototypes": [
        "technology.elevated-rail"
      ],
      "conflicting_mods": [
        "EarlyvatedRails",
        "EarlyvatedRails"
      ],
      "root_cause": "Required dependencies not found: {,  , \", r, a, i, l, w, a, y, \", ,,  , \", c, o, n, c, r, e, t, e, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", r, a, i, l, w, a, y, \", ,,  , \", c, o, n, c, r, e, t, e, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_TREE-SEEDING",
      "severity": "high",
      "title": "Missing Dependencies: tree-seeding",
      "description": "Technology tree-seeding has missing dependencies: {,  , \", w, o, o, d, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.tree-seeding"
      ],
      "conflicting_mods": [
        "gleba-reborn",
        "gleba-reborn",
        "gleba-reborn",
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {,  , \", w, o, o, d, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", w, o, o, d, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_STEAM-POWER",
      "severity": "high",
      "title": "Missing Dependencies: steam-power",
      "description": "Technology steam-power has missing dependencies: {,  , \", i, r, o, n, -, p, r, o, c, e, s, s, i, n, g, \",  , }",
      "affected_prototypes": [
        "technology.steam-power"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {,  , \", i, r, o, n, -, p, r, o, c, e, s, s, i, n, g, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", i, r, o, n, -, p, r, o, c, e, s, s, i, n, g, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_LANDFILL",
      "severity": "high",
      "title": "Missing Dependencies: landfill",
      "description": "Technology landfill has missing dependencies: {,  , \", b, u, r, n, e, r, -, a, u, t, o, m, a, t, i, o, n, \",  , }",
      "affected_prototypes": [
        "technology.landfill"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {,  , \", b, u, r, n, e, r, -, a, u, t, o, m, a, t, i, o, n, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", b, u, r, n, e, r, -, a, u, t, o, m, a, t, i, o, n, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_WORKER-ROBOTS-SPEED-1",
      "severity": "high",
      "title": "Missing Dependencies: worker-robots-speed-1",
      "description": "Technology worker-robots-speed-1 has missing dependencies: {,  , \", p, r, o, v, i, s, i, o, n, a, l, -, r, o, c, k, e, t, r, y, \", ,,  , \", b, a, s, i, c, -, c, o, n, s, t, r, u, c, t, i, o, n, -, r, o, b, o, t, i, c, s, -, g, o, l, d, \",  , }",
      "affected_prototypes": [
        "technology.worker-robots-speed-1"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {,  , \", p, r, o, v, i, s, i, o, n, a, l, -, r, o, c, k, e, t, r, y, \", ,,  , \", b, a, s, i, c, -, c, o, n, s, t, r, u, c, t, i, o, n, -, r, o, b, o, t, i, c, s, -, g, o, l, d, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", p, r, o, v, i, s, i, o, n, a, l, -, r, o, c, k, e, t, r, y, \", ,,  , \", b, a, s, i, c, -, c, o, n, s, t, r, u, c, t, i, o, n, -, r, o, b, o, t, i, c, s, -, g, o, l, d, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_WORKER-ROBOTS-SPEED-2",
      "severity": "high",
      "title": "Missing Dependencies: worker-robots-speed-2",
      "description": "Technology worker-robots-speed-2 has missing dependencies: {, \n,  ,  ,  ,  , \", w, o, r, k, e, r, -, r, o, b, o, t, s, -, s, p, e, e, d, -, 1, \", ,, \n,  ,  ,  ,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \", \n, }",
      "affected_prototypes": [
        "technology.worker-robots-speed-2"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {, \n,  ,  ,  ,  , \", w, o, r, k, e, r, -, r, o, b, o, t, s, -, s, p, e, e, d, -, 1, \", ,, \n,  ,  ,  ,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \", \n, }",
      "suggested_fixes": [
        "Add missing dependencies: {, \n,  ,  ,  ,  , \", w, o, r, k, e, r, -, r, o, b, o, t, s, -, s, p, e, e, d, -, 1, \", ,, \n,  ,  ,  ,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \", \n, }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_WORKER-ROBOTS-SPEED-3",
      "severity": "high",
      "title": "Missing Dependencies: worker-robots-speed-3",
      "description": "Technology worker-robots-speed-3 has missing dependencies: {,  , \", r, o, b, o, t, i, c, s, \", ,,  , \", c, h, e, m, i, c, a, l, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.worker-robots-speed-3"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {,  , \", r, o, b, o, t, i, c, s, \", ,,  , \", c, h, e, m, i, c, a, l, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", r, o, b, o, t, i, c, s, \", ,,  , \", c, h, e, m, i, c, a, l, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_WORKER-ROBOTS-SPEED-4",
      "severity": "high",
      "title": "Missing Dependencies: worker-robots-speed-4",
      "description": "Technology worker-robots-speed-4 has missing dependencies: {,  , \", w, o, r, k, e, r, -, r, o, b, o, t, s, -, s, p, e, e, d, -, 3, \", ,,  , \", u, t, i, l, i, t, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.worker-robots-speed-4"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {,  , \", w, o, r, k, e, r, -, r, o, b, o, t, s, -, s, p, e, e, d, -, 3, \", ,,  , \", u, t, i, l, i, t, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", w, o, r, k, e, r, -, r, o, b, o, t, s, -, s, p, e, e, d, -, 3, \", ,,  , \", u, t, i, l, i, t, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_PHYSICAL-PROJECTILE-DAMAGE-1",
      "severity": "high",
      "title": "Missing Dependencies: physical-projectile-damage-1",
      "description": "Technology physical-projectile-damage-1 has missing dependencies: {,  , \", b, a, s, i, c, -, g, u, n, -, t, u, r, r, e, t, \",  , }",
      "affected_prototypes": [
        "technology.physical-projectile-damage-1"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {,  , \", b, a, s, i, c, -, g, u, n, -, t, u, r, r, e, t, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", b, a, s, i, c, -, g, u, n, -, t, u, r, r, e, t, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_PHYSICAL-PROJECTILE-DAMAGE-2",
      "severity": "high",
      "title": "Missing Dependencies: physical-projectile-damage-2",
      "description": "Technology physical-projectile-damage-2 has missing dependencies: {,  , \", p, h, y, s, i, c, a, l, -, p, r, o, j, e, c, t, i, l, e, -, d, a, m, a, g, e, -, 1, \", ,,  , \", s, t, e, a, m, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.physical-projectile-damage-2"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {,  , \", p, h, y, s, i, c, a, l, -, p, r, o, j, e, c, t, i, l, e, -, d, a, m, a, g, e, -, 1, \", ,,  , \", s, t, e, a, m, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", p, h, y, s, i, c, a, l, -, p, r, o, j, e, c, t, i, l, e, -, d, a, m, a, g, e, -, 1, \", ,,  , \", s, t, e, a, m, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_WEAPON-SHOOTING-SPEED-2",
      "severity": "high",
      "title": "Missing Dependencies: weapon-shooting-speed-2",
      "description": "Technology weapon-shooting-speed-2 has missing dependencies: {,  , \", w, e, a, p, o, n, -, s, h, o, o, t, i, n, g, -, s, p, e, e, d, -, 1, \", ,,  , \", s, t, e, a, m, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.weapon-shooting-speed-2"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {,  , \", w, e, a, p, o, n, -, s, h, o, o, t, i, n, g, -, s, p, e, e, d, -, 1, \", ,,  , \", s, t, e, a, m, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", w, e, a, p, o, n, -, s, h, o, o, t, i, n, g, -, s, p, e, e, d, -, 1, \", ,,  , \", s, t, e, a, m, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_PHYSICAL-PROJECTILE-DAMAGE-3",
      "severity": "high",
      "title": "Missing Dependencies: physical-projectile-damage-3",
      "description": "Technology physical-projectile-damage-3 has missing dependencies: {,  , \", m, i, l, i, t, a, r, y, -, 2, \", ,,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.physical-projectile-damage-3"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {,  , \", m, i, l, i, t, a, r, y, -, 2, \", ,,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", m, i, l, i, t, a, r, y, -, 2, \", ,,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_WEAPON-SHOOTING-SPEED-3",
      "severity": "high",
      "title": "Missing Dependencies: weapon-shooting-speed-3",
      "description": "Technology weapon-shooting-speed-3 has missing dependencies: {,  , \", m, i, l, i, t, a, r, y, -, 2, \", ,,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.weapon-shooting-speed-3"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {,  , \", m, i, l, i, t, a, r, y, -, 2, \", ,,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", m, i, l, i, t, a, r, y, -, 2, \", ,,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_PHYSICAL-PROJECTILE-DAMAGE-4",
      "severity": "high",
      "title": "Missing Dependencies: physical-projectile-damage-4",
      "description": "Technology physical-projectile-damage-4 has missing dependencies: {,  , \", p, h, y, s, i, c, a, l, -, p, r, o, j, e, c, t, i, l, e, -, d, a, m, a, g, e, -, 3, \", ,,  , \", m, i, l, i, t, a, r, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.physical-projectile-damage-4"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {,  , \", p, h, y, s, i, c, a, l, -, p, r, o, j, e, c, t, i, l, e, -, d, a, m, a, g, e, -, 3, \", ,,  , \", m, i, l, i, t, a, r, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", p, h, y, s, i, c, a, l, -, p, r, o, j, e, c, t, i, l, e, -, d, a, m, a, g, e, -, 3, \", ,,  , \", m, i, l, i, t, a, r, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_WEAPON-SHOOTING-SPEED-4",
      "severity": "high",
      "title": "Missing Dependencies: weapon-shooting-speed-4",
      "description": "Technology weapon-shooting-speed-4 has missing dependencies: {,  , \", w, e, a, p, o, n, -, s, h, o, o, t, i, n, g, -, s, p, e, e, d, -, 3, \", ,,  , \", m, i, l, i, t, a, r, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.weapon-shooting-speed-4"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Required dependencies not found: {,  , \", w, e, a, p, o, n, -, s, h, o, o, t, i, n, g, -, s, p, e, e, d, -, 3, \", ,,  , \", m, i, l, i, t, a, r, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing dependencies: {,  , \", w, e, a, p, o, n, -, s, h, o, o, t, i, n, g, -, s, p, e, e, d, -, 3, \", ,,  , \", m, i, l, i, t, a, r, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_SP-SPIDERLING",
      "severity": "high",
      "title": "Missing Dependencies: sp-spiderling",
      "description": "Recipe sp-spiderling has missing dependencies: nullius-large-chest-2, nullius-sensor-2, nullius-large-chest-2, nullius-sensor-2",
      "affected_prototypes": [
        "recipe.sp-spiderling"
      ],
      "conflicting_mods": [
        "SpidertronPatrols",
        "SpidertronPatrols",
        "SpidertronPatrols"
      ],
      "root_cause": "Required dependencies not found: nullius-large-chest-2, nullius-sensor-2, nullius-large-chest-2, nullius-sensor-2",
      "suggested_fixes": [
        "Add missing dependencies: nullius-large-chest-2, nullius-sensor-2, nullius-large-chest-2, nullius-sensor-2"
      ]
    },
    {
      "issue_id": "MISSING_DEPS_NULLIUS-MECHA-REMOTE",
      "severity": "high",
      "title": "Missing Dependencies: nullius-mecha-remote",
      "description": "Recipe nullius-mecha-remote has missing dependencies: nullius-processor-1, nullius-scout-remote, nullius-processor-1, nullius-scout-remote",
      "affected_prototypes": [
        "recipe.nullius-mecha-remote"
      ],
      "conflicting_mods": [
        "SpidertronPatrols"
      ],
      "root_cause": "Required dependencies not found: nullius-processor-1, nullius-scout-remote, nullius-processor-1, nullius-scout-remote",
      "suggested_fixes": [
        "Add missing dependencies: nullius-processor-1, nullius-scout-remote, nullius-processor-1, nullius-scout-remote"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_electronics",
      "severity": "high",
      "title": "Broken Research Chain: electronics",
      "description": "Technology electronics is unreachable due to missing prerequisites: {,  , \", c, o, p, p, e, r, -, p, r, o, c, e, s, s, i, n, g, \",  , }",
      "affected_prototypes": [
        "technology.electronics"
      ],
      "conflicting_mods": [
        "Age-of-Production",
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", c, o, p, p, e, r, -, p, r, o, c, e, s, s, i, n, g, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", c, o, p, p, e, r, -, p, r, o, c, e, s, s, i, n, g, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_ore-crushing-productivity-1",
      "severity": "high",
      "title": "Broken Research Chain: ore-crushing-productivity-1",
      "description": "Technology ore-crushing-productivity-1 is unreachable due to missing prerequisites: {,  , \", b, a, s, i, c, -, o, r, e, -, c, r, u, s, h, i, n, g, \", ,,  , \", p, r, o, v, i, s, i, o, n, a, l, -, r, o, c, k, e, t, r, y, \",  , }",
      "affected_prototypes": [
        "technology.ore-crushing-productivity-1"
      ],
      "conflicting_mods": [
        "crushing-industry-productivity-research",
        "crushing-industry-productivity-research"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", b, a, s, i, c, -, o, r, e, -, c, r, u, s, h, i, n, g, \", ,,  , \", p, r, o, v, i, s, i, o, n, a, l, -, r, o, c, k, e, t, r, y, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", b, a, s, i, c, -, o, r, e, -, c, r, u, s, h, i, n, g, \", ,,  , \", p, r, o, v, i, s, i, o, n, a, l, -, r, o, c, k, e, t, r, y, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_ore-crushing-productivity-2",
      "severity": "high",
      "title": "Broken Research Chain: ore-crushing-productivity-2",
      "description": "Technology ore-crushing-productivity-2 is unreachable due to missing prerequisites: {,  , \", c, h, e, m, i, c, a, l, -, s, c, i, e, n, c, e, -, p, a, c, k, \", ,,  , \", o, r, e, -, c, r, u, s, h, i, n, g, \",  , }",
      "affected_prototypes": [
        "technology.ore-crushing-productivity-2"
      ],
      "conflicting_mods": [
        "crushing-industry-productivity-research",
        "crushing-industry-productivity-research"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", c, h, e, m, i, c, a, l, -, s, c, i, e, n, c, e, -, p, a, c, k, \", ,,  , \", o, r, e, -, c, r, u, s, h, i, n, g, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", c, h, e, m, i, c, a, l, -, s, c, i, e, n, c, e, -, p, a, c, k, \", ,,  , \", o, r, e, -, c, r, u, s, h, i, n, g, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_ore-crushing-productivity-3",
      "severity": "high",
      "title": "Broken Research Chain: ore-crushing-productivity-3",
      "description": "Technology ore-crushing-productivity-3 is unreachable due to missing prerequisites: {,  , \", o, r, e, -, c, r, u, s, h, i, n, g, -, p, r, o, d, u, c, t, i, v, i, t, y, -, 2, \", ,,  , \", p, r, o, d, u, c, t, i, o, n, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.ore-crushing-productivity-3"
      ],
      "conflicting_mods": [
        "crushing-industry-productivity-research",
        "crushing-industry-productivity-research"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", o, r, e, -, c, r, u, s, h, i, n, g, -, p, r, o, d, u, c, t, i, v, i, t, y, -, 2, \", ,,  , \", p, r, o, d, u, c, t, i, o, n, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", o, r, e, -, c, r, u, s, h, i, n, g, -, p, r, o, d, u, c, t, i, v, i, t, y, -, 2, \", ,,  , \", p, r, o, d, u, c, t, i, o, n, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_elevated-rail",
      "severity": "high",
      "title": "Broken Research Chain: elevated-rail",
      "description": "Technology elevated-rail is unreachable due to missing prerequisites: {,  , \", r, a, i, l, w, a, y, \", ,,  , \", c, o, n, c, r, e, t, e, \",  , }",
      "affected_prototypes": [
        "technology.elevated-rail"
      ],
      "conflicting_mods": [
        "EarlyvatedRails",
        "EarlyvatedRails"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", r, a, i, l, w, a, y, \", ,,  , \", c, o, n, c, r, e, t, e, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", r, a, i, l, w, a, y, \", ,,  , \", c, o, n, c, r, e, t, e, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_tree-seeding",
      "severity": "high",
      "title": "Broken Research Chain: tree-seeding",
      "description": "Technology tree-seeding is unreachable due to missing prerequisites: {,  , \", w, o, o, d, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.tree-seeding"
      ],
      "conflicting_mods": [
        "gleba-reborn",
        "gleba-reborn",
        "gleba-reborn",
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", w, o, o, d, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", w, o, o, d, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_steam-power",
      "severity": "high",
      "title": "Broken Research Chain: steam-power",
      "description": "Technology steam-power is unreachable due to missing prerequisites: {,  , \", i, r, o, n, -, p, r, o, c, e, s, s, i, n, g, \",  , }",
      "affected_prototypes": [
        "technology.steam-power"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", i, r, o, n, -, p, r, o, c, e, s, s, i, n, g, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", i, r, o, n, -, p, r, o, c, e, s, s, i, n, g, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_landfill",
      "severity": "high",
      "title": "Broken Research Chain: landfill",
      "description": "Technology landfill is unreachable due to missing prerequisites: {,  , \", b, u, r, n, e, r, -, a, u, t, o, m, a, t, i, o, n, \",  , }",
      "affected_prototypes": [
        "technology.landfill"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", b, u, r, n, e, r, -, a, u, t, o, m, a, t, i, o, n, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", b, u, r, n, e, r, -, a, u, t, o, m, a, t, i, o, n, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_worker-robots-speed-1",
      "severity": "high",
      "title": "Broken Research Chain: worker-robots-speed-1",
      "description": "Technology worker-robots-speed-1 is unreachable due to missing prerequisites: {,  , \", p, r, o, v, i, s, i, o, n, a, l, -, r, o, c, k, e, t, r, y, \", ,,  , \", b, a, s, i, c, -, c, o, n, s, t, r, u, c, t, i, o, n, -, r, o, b, o, t, i, c, s, -, g, o, l, d, \",  , }",
      "affected_prototypes": [
        "technology.worker-robots-speed-1"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", p, r, o, v, i, s, i, o, n, a, l, -, r, o, c, k, e, t, r, y, \", ,,  , \", b, a, s, i, c, -, c, o, n, s, t, r, u, c, t, i, o, n, -, r, o, b, o, t, i, c, s, -, g, o, l, d, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", p, r, o, v, i, s, i, o, n, a, l, -, r, o, c, k, e, t, r, y, \", ,,  , \", b, a, s, i, c, -, c, o, n, s, t, r, u, c, t, i, o, n, -, r, o, b, o, t, i, c, s, -, g, o, l, d, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_worker-robots-speed-2",
      "severity": "high",
      "title": "Broken Research Chain: worker-robots-speed-2",
      "description": "Technology worker-robots-speed-2 is unreachable due to missing prerequisites: {, \n,  ,  ,  ,  , \", w, o, r, k, e, r, -, r, o, b, o, t, s, -, s, p, e, e, d, -, 1, \", ,, \n,  ,  ,  ,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \", \n, }",
      "affected_prototypes": [
        "technology.worker-robots-speed-2"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {, \n,  ,  ,  ,  , \", w, o, r, k, e, r, -, r, o, b, o, t, s, -, s, p, e, e, d, -, 1, \", ,, \n,  ,  ,  ,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \", \n, }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {, \n,  ,  ,  ,  , \", w, o, r, k, e, r, -, r, o, b, o, t, s, -, s, p, e, e, d, -, 1, \", ,, \n,  ,  ,  ,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \", \n, }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_worker-robots-speed-3",
      "severity": "high",
      "title": "Broken Research Chain: worker-robots-speed-3",
      "description": "Technology worker-robots-speed-3 is unreachable due to missing prerequisites: {,  , \", r, o, b, o, t, i, c, s, \", ,,  , \", c, h, e, m, i, c, a, l, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.worker-robots-speed-3"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", r, o, b, o, t, i, c, s, \", ,,  , \", c, h, e, m, i, c, a, l, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", r, o, b, o, t, i, c, s, \", ,,  , \", c, h, e, m, i, c, a, l, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_worker-robots-speed-4",
      "severity": "high",
      "title": "Broken Research Chain: worker-robots-speed-4",
      "description": "Technology worker-robots-speed-4 is unreachable due to missing prerequisites: {,  , \", w, o, r, k, e, r, -, r, o, b, o, t, s, -, s, p, e, e, d, -, 3, \", ,,  , \", u, t, i, l, i, t, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.worker-robots-speed-4"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", w, o, r, k, e, r, -, r, o, b, o, t, s, -, s, p, e, e, d, -, 3, \", ,,  , \", u, t, i, l, i, t, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", w, o, r, k, e, r, -, r, o, b, o, t, s, -, s, p, e, e, d, -, 3, \", ,,  , \", u, t, i, l, i, t, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_physical-projectile-damage-1",
      "severity": "high",
      "title": "Broken Research Chain: physical-projectile-damage-1",
      "description": "Technology physical-projectile-damage-1 is unreachable due to missing prerequisites: {,  , \", b, a, s, i, c, -, g, u, n, -, t, u, r, r, e, t, \",  , }",
      "affected_prototypes": [
        "technology.physical-projectile-damage-1"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", b, a, s, i, c, -, g, u, n, -, t, u, r, r, e, t, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", b, a, s, i, c, -, g, u, n, -, t, u, r, r, e, t, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_physical-projectile-damage-2",
      "severity": "high",
      "title": "Broken Research Chain: physical-projectile-damage-2",
      "description": "Technology physical-projectile-damage-2 is unreachable due to missing prerequisites: {,  , \", p, h, y, s, i, c, a, l, -, p, r, o, j, e, c, t, i, l, e, -, d, a, m, a, g, e, -, 1, \", ,,  , \", s, t, e, a, m, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.physical-projectile-damage-2"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", p, h, y, s, i, c, a, l, -, p, r, o, j, e, c, t, i, l, e, -, d, a, m, a, g, e, -, 1, \", ,,  , \", s, t, e, a, m, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", p, h, y, s, i, c, a, l, -, p, r, o, j, e, c, t, i, l, e, -, d, a, m, a, g, e, -, 1, \", ,,  , \", s, t, e, a, m, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_weapon-shooting-speed-2",
      "severity": "high",
      "title": "Broken Research Chain: weapon-shooting-speed-2",
      "description": "Technology weapon-shooting-speed-2 is unreachable due to missing prerequisites: {,  , \", w, e, a, p, o, n, -, s, h, o, o, t, i, n, g, -, s, p, e, e, d, -, 1, \", ,,  , \", s, t, e, a, m, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.weapon-shooting-speed-2"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", w, e, a, p, o, n, -, s, h, o, o, t, i, n, g, -, s, p, e, e, d, -, 1, \", ,,  , \", s, t, e, a, m, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", w, e, a, p, o, n, -, s, h, o, o, t, i, n, g, -, s, p, e, e, d, -, 1, \", ,,  , \", s, t, e, a, m, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_physical-projectile-damage-3",
      "severity": "high",
      "title": "Broken Research Chain: physical-projectile-damage-3",
      "description": "Technology physical-projectile-damage-3 is unreachable due to missing prerequisites: {,  , \", m, i, l, i, t, a, r, y, -, 2, \", ,,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.physical-projectile-damage-3"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", m, i, l, i, t, a, r, y, -, 2, \", ,,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", m, i, l, i, t, a, r, y, -, 2, \", ,,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_weapon-shooting-speed-3",
      "severity": "high",
      "title": "Broken Research Chain: weapon-shooting-speed-3",
      "description": "Technology weapon-shooting-speed-3 is unreachable due to missing prerequisites: {,  , \", m, i, l, i, t, a, r, y, -, 2, \", ,,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.weapon-shooting-speed-3"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", m, i, l, i, t, a, r, y, -, 2, \", ,,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", m, i, l, i, t, a, r, y, -, 2, \", ,,  , \", l, o, g, i, s, t, i, c, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_physical-projectile-damage-4",
      "severity": "high",
      "title": "Broken Research Chain: physical-projectile-damage-4",
      "description": "Technology physical-projectile-damage-4 is unreachable due to missing prerequisites: {,  , \", p, h, y, s, i, c, a, l, -, p, r, o, j, e, c, t, i, l, e, -, d, a, m, a, g, e, -, 3, \", ,,  , \", m, i, l, i, t, a, r, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.physical-projectile-damage-4"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", p, h, y, s, i, c, a, l, -, p, r, o, j, e, c, t, i, l, e, -, d, a, m, a, g, e, -, 3, \", ,,  , \", m, i, l, i, t, a, r, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", p, h, y, s, i, c, a, l, -, p, r, o, j, e, c, t, i, l, e, -, d, a, m, a, g, e, -, 3, \", ,,  , \", m, i, l, i, t, a, r, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "BROKEN_CHAIN_weapon-shooting-speed-4",
      "severity": "high",
      "title": "Broken Research Chain: weapon-shooting-speed-4",
      "description": "Technology weapon-shooting-speed-4 is unreachable due to missing prerequisites: {,  , \", w, e, a, p, o, n, -, s, h, o, o, t, i, n, g, -, s, p, e, e, d, -, 3, \", ,,  , \", m, i, l, i, t, a, r, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "affected_prototypes": [
        "technology.weapon-shooting-speed-4"
      ],
      "conflicting_mods": [
        "lignumis",
        "lignumis"
      ],
      "root_cause": "Missing prerequisite technologies: {,  , \", w, e, a, p, o, n, -, s, h, o, o, t, i, n, g, -, s, p, e, e, d, -, 3, \", ,,  , \", m, i, l, i, t, a, r, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }",
      "suggested_fixes": [
        "Add missing prerequisite technologies: {,  , \", w, e, a, p, o, n, -, s, h, o, o, t, i, n, g, -, s, p, e, e, d, -, 3, \", ,,  , \", m, i, l, i, t, a, r, y, -, s, c, i, e, n, c, e, -, p, a, c, k, \",  , }"
      ]
    },
    {
      "issue_id": "MOD_TECH_CONFLICT_ELECTRONICS",
      "severity": "high",
      "title": "Mod Technology Conflict: electronics",
      "description": "Technology 'electronics' modified by multiple mods",
      "affected_prototypes": [
        "technology.electronics"
      ],
      "conflicting_mods": [
        "Age-of-Production",
        "lignumis"
      ],
      "root_cause": "Multiple mods (Age-of-Production, lignumis) modify the same technology",
      "suggested_fixes": [
        "Review technology prerequisites",
        "Create compatibility patch for technology tree",
        "Use conditional technology modifications"
      ]
    },
    {
      "issue_id": "RECIPE_VARIANT_FC-FILTER-STEEL-CHEST",
      "severity": "medium",
      "title": "Recipe Variant: fc-filter-steel-chest",
      "description": "Recipe 'fc-filter-steel-chest' has different variants between base game and mod 'FilterChests'",
      "affected_prototypes": [
        "recipe.fc-filter-steel-chest"
      ],
      "conflicting_mods": [
        "FilterChests"
      ],
      "root_cause": "Mod 'FilterChests' replaces base game recipe with different ingredients",
      "suggested_fixes": [
        "Create alternative recipes for both base game and mod variants",
        "Add conditional recipe based on available items",
        "Preserve both recipe variants for player choice"
      ]
    },
    {
      "issue_id": "MOD_TECH_CONFLICT_TREE-SEEDING",
      "severity": "high",
      "title": "Mod Technology Conflict: tree-seeding",
      "description": "Technology 'tree-seeding' modified by multiple mods",
      "affected_prototypes": [
        "technology.tree-seeding"
      ],
      "conflicting_mods": [
        "lignumis",
        "gleba-reborn"
      ],
      "root_cause": "Multiple mods (lignumis, gleba-reborn) modify the same technology",
      "suggested_fixes": [
        "Review technology prerequisites",
        "Create compatibility patch for technology tree",
        "Use conditional technology modifications"
      ]
    },
    {
      "issue_id": "RECIPE_VARIANT_BURNER-INSERTER",
      "severity": "high",
      "title": "Recipe Variant: burner-inserter",
      "description": "Recipe 'burner-inserter' has different variants between base game and mod 'lignumis'",
      "affected_prototypes": [
        "recipe.burner-inserter"
      ],
      "conflicting_mods": [
        "lignumis"
      ],
      "root_cause": "Mod 'lignumis' replaces base game recipe with different ingredients",
      "suggested_fixes": [
        "Create alternative recipes for both base game and mod variants",
        "Add conditional recipe based on available items",
        "Preserve both recipe variants for player choice"
      ]
    },
    {
      "issue_id": "RECIPE_VARIANT_WOODEN-WALL",
      "severity": "medium",
      "title": "Recipe Variant: wooden-wall",
      "description": "Recipe 'wooden-wall' has different variants between base game and mod 'lignumis'",
      "affected_prototypes": [
        "recipe.wooden-wall"
      ],
      "conflicting_mods": [
        "lignumis"
      ],
      "root_cause": "Mod 'lignumis' replaces base game recipe with different ingredients",
      "suggested_fixes": [
        "Create alternative recipes for both base game and mod variants",
        "Add conditional recipe based on available items",
        "Preserve both recipe variants for player choice"
      ]
    },
    {
      "issue_id": "RECIPE_VARIANT_SP-SPIDERLING",
      "severity": "medium",
      "title": "Recipe Variant: sp-spiderling",
      "description": "Recipe 'sp-spiderling' has different variants between base game and mod 'SpidertronPatrols'",
      "affected_prototypes": [
        "recipe.sp-spiderling"
      ],
      "conflicting_mods": [
        "SpidertronPatrols"
      ],
      "root_cause": "Mod 'SpidertronPatrols' replaces base game recipe with different ingredients",
      "suggested_fixes": [
        "Create alternative recipes for both base game and mod variants",
        "Add conditional recipe based on available items",
        "Preserve both recipe variants for player choice"
      ]
    },
    {
      "issue_id": "RECIPE_VARIANT_NULLIUS-MECHA-REMOTE",
      "severity": "medium",
      "title": "Recipe Variant: nullius-mecha-remote",
      "description": "Recipe 'nullius-mecha-remote' has different variants between base game and mod 'SpidertronPatrols'",
      "affected_prototypes": [
        "recipe.nullius-mecha-remote"
      ],
      "conflicting_mods": [
        "SpidertronPatrols"
      ],
      "root_cause": "Mod 'SpidertronPatrols' replaces base game recipe with different ingredients",
      "suggested_fixes": [
        "Create alternative recipes for both base game and mod variants",
        "Add conditional recipe based on available items",
        "Preserve both recipe variants for player choice"
      ]
    }
  ],
  "patches": [
    {
      "patch_id": "PATCH_SP-SPIDERLING_ALL_VARIANTS",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_SP-SPIDERLING"
      ],
      "patch_type": "recipe_variant_expansion",
      "description": "Recipe expansion for sp-spiderling - adds all mod variants as additional recipes",
      "lua_code": "\n-- Comprehensive recipe expansion for sp-spiderling\n-- Adds mod-specific recipe variants alongside original recipes\n-- Affected mods: SpidertronPatrols\n-- Severity: HIGH\n\n-- Create additional recipe variants for each mod\n\n\n-- SpidertronPatrols variant of sp-spiderling\nif data.raw.recipe[\"sp-spiderling\"] then\n    local spidertronpatrols_variant = table.deepcopy(data.raw.recipe[\"sp-spiderling\"])\n    spidertronpatrols_variant.name = \"sp-spiderling-spidertronpatrols-variant\"\n    spidertronpatrols_variant.localised_name = {\"\", \"sp-spiderling\", \" (SpidertronPatrols Style)\"}\n    spidertronpatrols_variant.enabled = true\n    spidertronpatrols_variant.order = (spidertronpatrols_variant.order or \"a\") .. \"-spidertronpatrols-variant\"\n    spidertronpatrols_variant.hidden = false\n\n    spidertronpatrols_variant.ingredients = {{type=\"item\", name=\"nullius-large-chest-2\", amount=2}, {type=\"item\", name=\"nullius-sensor-2\", amount=1}}\n    spidertronpatrols_variant.results = {{type=\"item\", name=\"sp-spiderling\", amount=1}}\n    \n    data:extend({spidertronpatrols_variant})\nend\n\n-- Keep ALL original recipes active - no disabling!\n-- Players can now choose between:\n-- 1. Original sp-spiderling (current winner of mod conflicts)\n-- 2. sp-spiderling-spidertronpatrols-variant (SpidertronPatrols style)\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_NULLIUS-MECHA-REMOTE_ALL_VARIANTS",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_NULLIUS-MECHA-REMOTE"
      ],
      "patch_type": "recipe_variant_expansion",
      "description": "Recipe expansion for nullius-mecha-remote - adds all mod variants as additional recipes",
      "lua_code": "\n-- Comprehensive recipe expansion for nullius-mecha-remote\n-- Adds mod-specific recipe variants alongside original recipes\n-- Affected mods: SpidertronPatrols\n-- Severity: HIGH\n\n-- Create additional recipe variants for each mod\n\n\n-- SpidertronPatrols variant of nullius-mecha-remote\nif data.raw.recipe[\"nullius-mecha-remote\"] then\n    local spidertronpatrols_variant = table.deepcopy(data.raw.recipe[\"nullius-mecha-remote\"])\n    spidertronpatrols_variant.name = \"nullius-mecha-remote-spidertronpatrols-variant\"\n    spidertronpatrols_variant.localised_name = {\"\", \"nullius-mecha-remote\", \" (SpidertronPatrols Style)\"}\n    spidertronpatrols_variant.enabled = true\n    spidertronpatrols_variant.order = (spidertronpatrols_variant.order or \"a\") .. \"-spidertronpatrols-variant\"\n    spidertronpatrols_variant.hidden = false\n\n    spidertronpatrols_variant.ingredients = {{type=\"item\", name=\"nullius-processor-1\", amount=2}, {type=\"item\", name=\"nullius-scout-remote\", amount=1}}\n    spidertronpatrols_variant.results = {{type=\"item\", name=\"nullius-mecha-remote\", amount=1}}\n    \n    data:extend({spidertronpatrols_variant})\nend\n\n-- Keep ALL original recipes active - no disabling!\n-- Players can now choose between:\n-- 1. Original nullius-mecha-remote (current winner of mod conflicts)\n-- 2. nullius-mecha-remote-spidertronpatrols-variant (SpidertronPatrols style)\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BURNER-INSERTER_ALL_VARIANTS",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "RECIPE_VARIANT_BURNER-INSERTER"
      ],
      "patch_type": "recipe_variant_expansion",
      "description": "Recipe expansion for burner-inserter - adds all mod variants as additional recipes",
      "lua_code": "\n-- Comprehensive recipe expansion for burner-inserter\n-- Adds mod-specific recipe variants alongside original recipes\n-- Affected mods: lignumis\n-- Severity: HIGH\n\n-- Create additional recipe variants for each mod\n\n\n-- Lignumis variant of burner-inserter\nif data.raw.recipe[\"burner-inserter\"] then\n    local lignumis_variant = table.deepcopy(data.raw.recipe[\"burner-inserter\"])\n    lignumis_variant.name = \"burner-inserter-lignumis-variant\"\n    lignumis_variant.localised_name = {\"\", \"burner-inserter\", \" (Lignumis Style)\"}\n    lignumis_variant.enabled = true\n    lignumis_variant.order = (lignumis_variant.order or \"a\") .. \"-lignumis-variant\"\n    lignumis_variant.hidden = false\n\n    lignumis_variant.ingredients = {{type=\"item\", name=\"wooden-gear-wheel\", amount=1}, {type=\"item\", name=\"lumber\", amount=1}}\n    lignumis_variant.results = {{type=\"item\", name=\"burner-inserter\", amount=1}}\n    \n    data:extend({lignumis_variant})\nend\n\n-- Keep ALL original recipes active - no disabling!\n-- Players can now choose between:\n-- 1. Original burner-inserter (current winner of mod conflicts)\n-- 2. burner-inserter-lignumis-variant (Lignumis style)\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_WOODEN-WALL_ALL_VARIANTS",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "RECIPE_VARIANT_WOODEN-WALL"
      ],
      "patch_type": "recipe_variant_expansion",
      "description": "Recipe expansion for wooden-wall - adds all mod variants as additional recipes",
      "lua_code": "\n-- Comprehensive recipe expansion for wooden-wall\n-- Adds mod-specific recipe variants alongside original recipes\n-- Affected mods: lignumis\n-- Severity: MEDIUM\n\n-- Create additional recipe variants for each mod\n\n\n-- Lignumis variant of wooden-wall\nif data.raw.recipe[\"wooden-wall\"] then\n    local lignumis_variant = table.deepcopy(data.raw.recipe[\"wooden-wall\"])\n    lignumis_variant.name = \"wooden-wall-lignumis-variant\"\n    lignumis_variant.localised_name = {\"\", \"wooden-wall\", \" (Lignumis Style)\"}\n    lignumis_variant.enabled = true\n    lignumis_variant.order = (lignumis_variant.order or \"a\") .. \"-lignumis-variant\"\n    lignumis_variant.hidden = false\n\n    lignumis_variant.ingredients = {{type=\"item\", name=\"lumber\", amount=4}}\n    lignumis_variant.results = {{type=\"item\", name=\"wooden-wall\", amount=1}}\n    \n    data:extend({lignumis_variant})\nend\n\n-- Keep ALL original recipes active - no disabling!\n-- Players can now choose between:\n-- 1. Original wooden-wall (current winner of mod conflicts)\n-- 2. wooden-wall-lignumis-variant (Lignumis style)\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ELECTRONICS_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_ELECTRONICS"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for electronics with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for electronics\n-- Fixes conflict between: Age-of-Production, lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"electronics\"] then\n    local tech = data.raw.technology[\"electronics\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"electronics\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"electronics-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"electronics-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"electronics-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ORE-CRUSHING-PRODUCTIVITY-1_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_ORE-CRUSHING-PRODUCTIVITY-1"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for ore-crushing-productivity-1 with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for ore-crushing-productivity-1\n-- Fixes conflict between: crushing-industry-productivity-research, crushing-industry-productivity-research\n-- Severity: HIGH\n\nif data.raw.technology[\"ore-crushing-productivity-1\"] then\n    local tech = data.raw.technology[\"ore-crushing-productivity-1\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"ore-crushing-productivity-1\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"ore-crushing-productivity-1-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"ore-crushing-productivity-1-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"ore-crushing-productivity-1-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ORE-CRUSHING-PRODUCTIVITY-2_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_ORE-CRUSHING-PRODUCTIVITY-2"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for ore-crushing-productivity-2 with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for ore-crushing-productivity-2\n-- Fixes conflict between: crushing-industry-productivity-research, crushing-industry-productivity-research\n-- Severity: HIGH\n\nif data.raw.technology[\"ore-crushing-productivity-2\"] then\n    local tech = data.raw.technology[\"ore-crushing-productivity-2\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"ore-crushing-productivity-2\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"ore-crushing-productivity-2-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"ore-crushing-productivity-2-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"ore-crushing-productivity-2-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ORE-CRUSHING-PRODUCTIVITY-3_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_ORE-CRUSHING-PRODUCTIVITY-3"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for ore-crushing-productivity-3 with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for ore-crushing-productivity-3\n-- Fixes conflict between: crushing-industry-productivity-research, crushing-industry-productivity-research\n-- Severity: HIGH\n\nif data.raw.technology[\"ore-crushing-productivity-3\"] then\n    local tech = data.raw.technology[\"ore-crushing-productivity-3\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"ore-crushing-productivity-3\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"ore-crushing-productivity-3-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"ore-crushing-productivity-3-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"ore-crushing-productivity-3-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ELEVATED-RAIL_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_ELEVATED-RAIL"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for elevated-rail with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for elevated-rail\n-- Fixes conflict between: EarlyvatedRails, EarlyvatedRails\n-- Severity: HIGH\n\nif data.raw.technology[\"elevated-rail\"] then\n    local tech = data.raw.technology[\"elevated-rail\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"elevated-rail\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"elevated-rail-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"elevated-rail-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"elevated-rail-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_TREE-SEEDING_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_TREE-SEEDING"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for tree-seeding with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for tree-seeding\n-- Fixes conflict between: gleba-reborn, gleba-reborn, gleba-reborn, lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"tree-seeding\"] then\n    local tech = data.raw.technology[\"tree-seeding\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"tree-seeding\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"tree-seeding-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"tree-seeding-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"tree-seeding-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_STEAM-POWER_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_STEAM-POWER"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for steam-power with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for steam-power\n-- Fixes conflict between: lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"steam-power\"] then\n    local tech = data.raw.technology[\"steam-power\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"steam-power\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"steam-power-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"steam-power-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"steam-power-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LANDFILL_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_LANDFILL"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for landfill with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for landfill\n-- Fixes conflict between: lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"landfill\"] then\n    local tech = data.raw.technology[\"landfill\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"landfill\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"landfill-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"landfill-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"landfill-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_WORKER-ROBOTS-SPEED-1_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_WORKER-ROBOTS-SPEED-1"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for worker-robots-speed-1 with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for worker-robots-speed-1\n-- Fixes conflict between: lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"worker-robots-speed-1\"] then\n    local tech = data.raw.technology[\"worker-robots-speed-1\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"worker-robots-speed-1\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"worker-robots-speed-1-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"worker-robots-speed-1-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"worker-robots-speed-1-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_WORKER-ROBOTS-SPEED-2_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_WORKER-ROBOTS-SPEED-2"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for worker-robots-speed-2 with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for worker-robots-speed-2\n-- Fixes conflict between: lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"worker-robots-speed-2\"] then\n    local tech = data.raw.technology[\"worker-robots-speed-2\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"worker-robots-speed-2\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"worker-robots-speed-2-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"worker-robots-speed-2-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"worker-robots-speed-2-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_WORKER-ROBOTS-SPEED-3_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_WORKER-ROBOTS-SPEED-3"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for worker-robots-speed-3 with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for worker-robots-speed-3\n-- Fixes conflict between: lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"worker-robots-speed-3\"] then\n    local tech = data.raw.technology[\"worker-robots-speed-3\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"worker-robots-speed-3\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"worker-robots-speed-3-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"worker-robots-speed-3-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"worker-robots-speed-3-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_WORKER-ROBOTS-SPEED-4_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_WORKER-ROBOTS-SPEED-4"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for worker-robots-speed-4 with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for worker-robots-speed-4\n-- Fixes conflict between: lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"worker-robots-speed-4\"] then\n    local tech = data.raw.technology[\"worker-robots-speed-4\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"worker-robots-speed-4\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"worker-robots-speed-4-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"worker-robots-speed-4-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"worker-robots-speed-4-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PHYSICAL-PROJECTILE-DAMAGE-1_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_PHYSICAL-PROJECTILE-DAMAGE-1"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for physical-projectile-damage-1 with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for physical-projectile-damage-1\n-- Fixes conflict between: lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"physical-projectile-damage-1\"] then\n    local tech = data.raw.technology[\"physical-projectile-damage-1\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"physical-projectile-damage-1\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"physical-projectile-damage-1-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"physical-projectile-damage-1-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"physical-projectile-damage-1-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PHYSICAL-PROJECTILE-DAMAGE-2_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_PHYSICAL-PROJECTILE-DAMAGE-2"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for physical-projectile-damage-2 with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for physical-projectile-damage-2\n-- Fixes conflict between: lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"physical-projectile-damage-2\"] then\n    local tech = data.raw.technology[\"physical-projectile-damage-2\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"physical-projectile-damage-2\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"physical-projectile-damage-2-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"physical-projectile-damage-2-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"physical-projectile-damage-2-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_WEAPON-SHOOTING-SPEED-2_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_WEAPON-SHOOTING-SPEED-2"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for weapon-shooting-speed-2 with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for weapon-shooting-speed-2\n-- Fixes conflict between: lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"weapon-shooting-speed-2\"] then\n    local tech = data.raw.technology[\"weapon-shooting-speed-2\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"weapon-shooting-speed-2\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"weapon-shooting-speed-2-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"weapon-shooting-speed-2-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"weapon-shooting-speed-2-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PHYSICAL-PROJECTILE-DAMAGE-3_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_PHYSICAL-PROJECTILE-DAMAGE-3"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for physical-projectile-damage-3 with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for physical-projectile-damage-3\n-- Fixes conflict between: lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"physical-projectile-damage-3\"] then\n    local tech = data.raw.technology[\"physical-projectile-damage-3\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"physical-projectile-damage-3\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"physical-projectile-damage-3-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"physical-projectile-damage-3-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"physical-projectile-damage-3-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_WEAPON-SHOOTING-SPEED-3_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_WEAPON-SHOOTING-SPEED-3"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for weapon-shooting-speed-3 with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for weapon-shooting-speed-3\n-- Fixes conflict between: lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"weapon-shooting-speed-3\"] then\n    local tech = data.raw.technology[\"weapon-shooting-speed-3\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"weapon-shooting-speed-3\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"weapon-shooting-speed-3-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"weapon-shooting-speed-3-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"weapon-shooting-speed-3-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PHYSICAL-PROJECTILE-DAMAGE-4_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_PHYSICAL-PROJECTILE-DAMAGE-4"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for physical-projectile-damage-4 with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for physical-projectile-damage-4\n-- Fixes conflict between: lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"physical-projectile-damage-4\"] then\n    local tech = data.raw.technology[\"physical-projectile-damage-4\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"physical-projectile-damage-4\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"physical-projectile-damage-4-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"physical-projectile-damage-4-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"physical-projectile-damage-4-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_WEAPON-SHOOTING-SPEED-4_RESEARCH_COMPREHENSIVE",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "MISSING_DEPS_WEAPON-SHOOTING-SPEED-4"
      ],
      "patch_type": "comprehensive_research_modification",
      "description": "Comprehensive research compatibility patch for weapon-shooting-speed-4 with 3 alternative research paths",
      "lua_code": "\n-- Comprehensive research compatibility patch for weapon-shooting-speed-4\n-- Fixes conflict between: lignumis, lignumis\n-- Severity: HIGH\n\nif data.raw.technology[\"weapon-shooting-speed-4\"] then\n    local tech = data.raw.technology[\"weapon-shooting-speed-4\"]\n    local original_prerequisites = tech.prerequisites or {}\n    local original_unit = tech.unit\n    local original_effects = tech.effects or {}\n    \n    -- Store original technology for reference\n    local base_prerequisites = original_prerequisites\n    local base_unit = original_unit\n    local base_effects = original_effects\n    \n    -- Fallback: Create universal alternative research paths\n    \n    -- Skip creating alternatives if original technology has no icon (required for technologies)\n    if not tech.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"weapon-shooting-speed-4\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Alternative 1: Basic research path\n    local basic_tech = {\n        type = \"technology\",\n        name = \"weapon-shooting-speed-4-basic\",\n        icon = tech.icon,\n        icon_size = tech.icon_size or 256,\n        prerequisites = {\"automation\"},\n        unit = {\n            count = 25,\n            ingredients = {\n                {\"automation-science-pack\", 1}\n            },\n            time = 10\n        },\n        effects = tech.effects or {}\n    }\n    \n    data:extend({basic_tech})\n    \n    -- Alternative 2: Advanced research path\n    if data.raw.technology[\"logistic-science-pack\"] then\n        local advanced_tech = {\n            type = \"technology\",\n            name = \"weapon-shooting-speed-4-advanced\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"automation\", \"logistic-science-pack\"},\n            unit = {\n                count = 100,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1}\n                },\n                time = 30\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({advanced_tech})\n    end\n    \n    -- Alternative 3: Space-age compatible path\n    if data.raw.technology[\"space-science-pack\"] then\n        local space_tech = {\n            type = \"technology\",\n            name = \"weapon-shooting-speed-4-space\",\n            icon = tech.icon,\n            icon_size = tech.icon_size or 256,\n            prerequisites = {\"space-science-pack\"},\n            unit = {\n                count = 200,\n                ingredients = {\n                    {\"automation-science-pack\", 1},\n                    {\"logistic-science-pack\", 1},\n                    {\"chemical-science-pack\", 1},\n                    {\"space-science-pack\", 1}\n                },\n                time = 60\n            },\n            effects = tech.effects or {}\n        }\n        \n        data:extend({space_tech})\n    end\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "high",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ELECTRIC-MINING-DRILL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ELECTRIC-MINING-DRILL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item electric-mining-drill",
      "lua_code": "\n-- Generic compatibility patch for electric-mining-drill\n-- Fixes conflict between: bobmining, Krastorio2-spaced-out, OmegaDrill, aai-industry\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"electric-mining-drill\"] then\n    local item = data.raw.item[\"electric-mining-drill\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"electric-mining-drill\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"electric-mining-drill-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"electric-mining-drill-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_STEEL-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_STEEL-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item steel-plate",
      "lua_code": "\n-- Generic compatibility patch for steel-plate\n-- Fixes conflict between: slp-dyson-sphere-reworked, aai-industry, VoidProcessing, Hovercrafts, aai-vehicles-ironclad, Cold_biters, alien-module, boblogistics, crushing-industry, se-space-trains, Planet-Hopper, shield-projector, Fluid-level-indicator, grappling-gun, lex-aircraft, aquilo-seabloom-algaculture, cubium, Flare Stack, bobassembly, aai-vehicles-laser-tank, ballistic_missile, FluidMustFlow, bobenemies, vtk-cannon-turret, aai-vehicles-flame-tumbler, bobequipment, snouz_better_substation, corrundum, bobvehicleequipment, Cerys-Moon-of-Fulgora, Warehousing, dea-dia-system, More_Ammo, HelicopterRevival, PlutoniumEnergy, aai-vehicles-flame-tank, alloy-smelting, aai-signal-transmission, bobpower, metal-and-stars, minimalist-rails, secretas, Robocharger-Updated, More_Repair_Packs, OmegaDrill, atan-nuclear-science, bobplates, foundry-restructuring, lilys-cubeine, quirkycat_machines, Aircraft-space-age, castra, tenebris-prime, bobmining, bobmodules, StopgapNukes, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"steel-plate\"] then\n    local item = data.raw.item[\"steel-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"steel-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"steel-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"steel-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ELECTRIC-ENGINE-UNIT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ELECTRIC-ENGINE-UNIT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item electric-engine-unit",
      "lua_code": "\n-- Generic compatibility patch for electric-engine-unit\n-- Fixes conflict between: aai-industry, RampantFixed, Hovercrafts, boblogistics, crushing-industry, lex-aircraft, cubium, ballistic_missile, orbital-transfer, corrundum, Kux-OrbitalIonCannon, bobvehicleequipment, dea-dia-system, aai-signal-transmission, secretas, OmegaDrill, bobplates, Aircraft-space-age, castra, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"electric-engine-unit\"] then\n    local item = data.raw.item[\"electric-engine-unit\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"electric-engine-unit\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"electric-engine-unit-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"electric-engine-unit-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PROCESSING-UNIT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PROCESSING-UNIT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item processing-unit",
      "lua_code": "\n-- Generic compatibility patch for processing-unit\n-- Fixes conflict between: slp-dyson-sphere-reworked, aai-industry, RampantFixed, Hovercrafts, boblogistics, crushing-industry, se-space-trains, bobelectronics, shield-projector, lex-aircraft, cubium, bobassembly, ballistic_missile, orbital-transfer, atomic-artillery-reborn, Moshine, bobequipment, enemyracemanager, fulgora-coralmium-agriculture, corrundum, Kux-OrbitalIonCannon, bobvehicleequipment, Cerys-Moon-of-Fulgora, HelicopterRevival, PlutoniumEnergy, cerys-lunaponics, aai-signal-transmission, bobpower, metal-and-stars, secretas, More_Repair_Packs, OmegaDrill, atan-nuclear-science, bobplates, Aircraft-space-age, castra, bobmining, astroponics, bobmodules, StopgapNukes, Krastorio2-spaced-out, janus\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"processing-unit\"] then\n    local item = data.raw.item[\"processing-unit\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"processing-unit\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"processing-unit-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"processing-unit-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_CONCRETE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_CONCRETE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item concrete",
      "lua_code": "\n-- Generic compatibility patch for concrete\n-- Fixes conflict between: aai-industry, snouz-big-accumulator, crushing-industry, cubium, ballistic_missile, Moshine, fulgora-coralmium-agriculture, corrundum, Cerys-Moon-of-Fulgora, Moshine-assets, Warehousing, PlutoniumEnergy, alloy-smelting, bobpower, snouz-big-solar-panel, secretas, atan-nuclear-science, tenebris-prime, astroponics, metal-and-stars, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"concrete\"] then\n    local item = data.raw.item[\"concrete\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"concrete\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"concrete-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"concrete-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ELECTRIC-FURNACE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ELECTRIC-FURNACE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item electric-furnace",
      "lua_code": "\n-- Generic compatibility patch for electric-furnace\n-- Fixes conflict between: cubium, bobassembly, bobplates, aai-industry, lilys-cubeine, Electric Furnaces, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"electric-furnace\"] then\n    local item = data.raw.item[\"electric-furnace\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"electric-furnace\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"electric-furnace-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"electric-furnace-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_IRON-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_IRON-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item iron-plate",
      "lua_code": "\n-- Generic compatibility patch for iron-plate\n-- Fixes conflict between: aai-industry, alien-module, aai-vehicles-warden, aai-vehicles-hauler, boblogistics, terrapalus, crushing-industry, DoubleWagons, lex-aircraft, cubium, Flare Stack, bobassembly, bobgreenhouse, FluidMustFlow, vtk-cannon-turret, Moshine, bobequipment, corrundum, planet-muluna, aai-vehicles-chaingunner, dea-dia-system, More_Ammo, PlutoniumEnergy, equipment-gantry, wood-military, bobpower, secretas, Electric Furnaces, quirkycat_boron, bobplates, Aircraft-space-age, castra, tenebris-prime, bobmining, metal-and-stars, StopgapNukes, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"iron-plate\"] then\n    local item = data.raw.item[\"iron-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"iron-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"iron-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"iron-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_STONE-BRICK_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_STONE-BRICK"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item stone-brick",
      "lua_code": "\n-- Generic compatibility patch for stone-brick\n-- Fixes conflict between: cubium, planet-muluna, Warehousing, bobassembly, bobplates, aai-industry, dea-dia-system, castra, tenebris-prime, alloy-smelting, boblogistics, crushing-industry, metal-and-stars, lignumis, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"stone-brick\"] then\n    local item = data.raw.item[\"stone-brick\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"stone-brick\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"stone-brick-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"stone-brick-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_STONE-WALL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_STONE-WALL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item stone-wall",
      "lua_code": "\n-- Generic compatibility patch for stone-wall\n-- Fixes conflict between: cubium, aai-industry\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"stone-wall\"] then\n    local item = data.raw.item[\"stone-wall\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"stone-wall\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"stone-wall-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"stone-wall-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BURNER-ASSEMBLING-MACHINE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BURNER-ASSEMBLING-MACHINE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item burner-assembling-machine",
      "lua_code": "\n-- Generic compatibility patch for burner-assembling-machine\n-- Fixes conflict between: lignumis, aai-industry\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"burner-assembling-machine\"] then\n    local item = data.raw.item[\"burner-assembling-machine\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"burner-assembling-machine\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"burner-assembling-machine-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"burner-assembling-machine-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SAND_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SAND"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item sand",
      "lua_code": "\n-- Generic compatibility patch for sand\n-- Fixes conflict between: Moshine-assets, aai-industry, Moshine, crushing-industry, wood-industry, quirkycat_base\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"sand\"] then\n    local item = data.raw.item[\"sand\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"sand\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"sand-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"sand-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_STONE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_STONE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item stone",
      "lua_code": "\n-- Generic compatibility patch for stone\n-- Fixes conflict between: cubium, Moshine-assets, bobplates, bobgreenhouse, aai-industry, alien-module, vulcanus-sulfuric-bacteria, boblogistics, crushing-industry, secretas, fulgora-coralmium-agriculture, metal-and-stars, corrundum, wood-industry, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"stone\"] then\n    local item = data.raw.item[\"stone\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"stone\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"stone-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"stone-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_GLASS_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_GLASS"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item glass",
      "lua_code": "\n-- Generic compatibility patch for glass\n-- Fixes conflict between: Moshine, crushing-industry, quirkycat_base, aai-industry\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"glass\"] then\n    local item = data.raw.item[\"glass\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"glass\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"glass-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"glass-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_IRON-GEAR-WHEEL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_IRON-GEAR-WHEEL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item iron-gear-wheel",
      "lua_code": "\n-- Generic compatibility patch for iron-gear-wheel\n-- Fixes conflict between: aai-industry, Hovercrafts, aai-vehicles-ironclad, alien-module, aai-vehicles-hauler, aai-vehicles-warden, boblogistics, crushing-industry, DoubleWagons, grappling-gun, cubium, Flare Stack, bobassembly, FluidMustFlow, bobenemies, bobequipment, corrundum, bobvehicleequipment, aai-vehicles-chaingunner, dea-dia-system, HelicopterRevival, aai-vehicles-flame-tank, bobpower, secretas, Robocharger-Updated, OmegaDrill, bobplates, foundry-restructuring, lilys-cubeine, castra, bobmining, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"iron-gear-wheel\"] then\n    local item = data.raw.item[\"iron-gear-wheel\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"iron-gear-wheel\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"iron-gear-wheel-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"iron-gear-wheel-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_COPPER-CABLE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_COPPER-CABLE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item copper-cable",
      "lua_code": "\n-- Generic compatibility patch for copper-cable\n-- Fixes conflict between: aai-industry, snouz-big-accumulator, TimeTools, castra, bobmodules, boblogistics, terrapalus, bobpower, bobequipment, Krastorio2-spaced-out, se-space-trains, secretas, bobelectronics, corrundum, lignumis, bobvehicleequipment, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"copper-cable\"] then\n    local item = data.raw.item[\"copper-cable\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"copper-cable\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"copper-cable-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"copper-cable-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_IRON-STICK_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_IRON-STICK"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item iron-stick",
      "lua_code": "\n-- Generic compatibility patch for iron-stick\n-- Fixes conflict between: aai-industry, HelicopterRevival, wood-military, boblogistics, minimalist-rails, corrundum, Krastorio2-spaced-out, grappling-gun\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"iron-stick\"] then\n    local item = data.raw.item[\"iron-stick\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"iron-stick\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"iron-stick-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"iron-stick-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_COPPER-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_COPPER-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item copper-plate",
      "lua_code": "\n-- Generic compatibility patch for copper-plate\n-- Fixes conflict between: aai-industry, alien-module, boblogistics, crushing-industry, bobelectronics, cubium, bobassembly, bobgreenhouse, bobequipment, corrundum, bobvehicleequipment, Cerys-Moon-of-Fulgora, More_Ammo, PlutoniumEnergy, wood-military, Igrys, aai-signal-transmission, bobpower, secretas, bobplates, lilys-cubeine, castra, bobmodules, lignumis, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"copper-plate\"] then\n    local item = data.raw.item[\"copper-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"copper-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"copper-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"copper-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_STONE-FURNACE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_STONE-FURNACE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item stone-furnace",
      "lua_code": "\n-- Generic compatibility patch for stone-furnace\n-- Fixes conflict between: Flare Stack, bobplates, aai-industry, alloy-smelting, bobpower, Electric Furnaces\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"stone-furnace\"] then\n    local item = data.raw.item[\"stone-furnace\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"stone-furnace\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"stone-furnace-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"stone-furnace-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BATTERY_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BATTERY"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item battery",
      "lua_code": "\n-- Generic compatibility patch for battery\n-- Fixes conflict between: Cold_biters, alien-module, boblogistics, se-space-trains, shield-projector, aai-vehicles-laser-tank, bobequipment, Kux-OrbitalIonCannon, bobvehicleequipment, HelicopterRevival, aai-signal-transmission, bobpower, secretas, Robocharger-Updated, Aircraft-space-age, castra, metal-and-stars, Krastorio2-spaced-out, janus\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"battery\"] then\n    local item = data.raw.item[\"battery\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"battery\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"battery-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"battery-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_GUN-TURRET_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_GUN-TURRET"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item gun-turret",
      "lua_code": "\n-- Generic compatibility patch for gun-turret\n-- Fixes conflict between: aai-vehicles-chaingunner, HelicopterRevival, Hovercrafts, vtk-cannon-turret, secretas, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"gun-turret\"] then\n    local item = data.raw.item[\"gun-turret\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"gun-turret\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"gun-turret-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"gun-turret-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ENGINE-UNIT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ENGINE-UNIT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item engine-unit",
      "lua_code": "\n-- Generic compatibility patch for engine-unit\n-- Fixes conflict between: cubium, foundry-restructuring, FluidMustFlow, HelicopterRevival, aai-vehicles-flame-tank, aai-vehicles-ironclad, Hovercrafts, castra, aai-vehicles-flame-tumbler, crushing-industry, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"engine-unit\"] then\n    local item = data.raw.item[\"engine-unit\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"engine-unit\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"engine-unit-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"engine-unit-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FLAMETHROWER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_FLAMETHROWER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item flamethrower",
      "lua_code": "\n-- Generic compatibility patch for flamethrower\n-- Fixes conflict between: metal-and-stars, aai-vehicles-flame-tank\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"flamethrower\"] then\n    local item = data.raw.item[\"flamethrower\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"flamethrower\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"flamethrower-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"flamethrower-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ADVANCED-CIRCUIT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ADVANCED-CIRCUIT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item advanced-circuit",
      "lua_code": "\n-- Generic compatibility patch for advanced-circuit\n-- Fixes conflict between: Hovercrafts, boblogistics, crushing-industry, bobelectronics, lex-aircraft, cubium, bobassembly, aai-vehicles-laser-tank, ballistic_missile, bobenemies, vtk-cannon-turret, aai-vehicles-flame-tumbler, Moshine, bobequipment, PavementDriveAssistContinued, bobvehicleequipment, Cerys-Moon-of-Fulgora, Warehousing, dea-dia-system, PlutoniumEnergy, alloy-smelting, bobpower, metal-and-stars, secretas, Robocharger-Updated, More_Repair_Packs, OmegaDrill, bobplates, Aircraft-space-age, castra, tenebris-prime, bobmining, bobmodules, StopgapNukes, Krastorio2-spaced-out, janus\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"advanced-circuit\"] then\n    local item = data.raw.item[\"advanced-circuit\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"advanced-circuit\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"advanced-circuit-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"advanced-circuit-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_IRON-CHEST_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_IRON-CHEST"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item iron-chest",
      "lua_code": "\n-- Generic compatibility patch for iron-chest\n-- Fixes conflict between: Warehousing, equipment-gantry, aai-vehicles-warden, aai-vehicles-hauler, metal-and-stars\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"iron-chest\"] then\n    local item = data.raw.item[\"iron-chest\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"iron-chest\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"iron-chest-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"iron-chest-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_GRENADE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_GRENADE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item grenade",
      "lua_code": "\n-- Generic compatibility patch for grenade\n-- Fixes conflict between: cubium, aai-vehicles-ironclad, Cold_biters, castra\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"grenade\"] then\n    local item = data.raw.item[\"grenade\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"grenade\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"grenade-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"grenade-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_EXPLOSIVES_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_EXPLOSIVES"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item explosives",
      "lua_code": "\n-- Generic compatibility patch for explosives\n-- Fixes conflict between: PlutoniumEnergy, aai-vehicles-ironclad, Aircraft-space-age, castra, vtk-cannon-turret, corrundum, StopgapNukes, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"explosives\"] then\n    local item = data.raw.item[\"explosives\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"explosives\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"explosives-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"explosives-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_TANK_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_TANK"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item tank",
      "lua_code": "\n-- Generic compatibility patch for tank\n-- Fixes conflict between: Krastorio2-spaced-out, lex-aircraft, castra, aai-vehicles-laser-tank\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"tank\"] then\n    local item = data.raw.item[\"tank\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"tank\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"tank-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"tank-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LASER-TURRET_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_LASER-TURRET"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item laser-turret",
      "lua_code": "\n-- Generic compatibility patch for laser-turret\n-- Fixes conflict between: aai-vehicles-laser-tank, Hovercrafts, terrapalus, secretas, Kux-OrbitalIonCannon\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"laser-turret\"] then\n    local item = data.raw.item[\"laser-turret\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"laser-turret\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"laser-turret-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"laser-turret-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SOLID-FUEL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SOLID-FUEL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item solid-fuel",
      "lua_code": "\n-- Generic compatibility patch for solid-fuel\n-- Fixes conflict between: cubium, planet-muluna, bobplates, aai-vehicles-laser-tank, Aircraft-space-age, secretas, wood-industry, metal-and-stars, corrundum, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"solid-fuel\"] then\n    local item = data.raw.item[\"solid-fuel\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"solid-fuel\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"solid-fuel-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"solid-fuel-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ELECTRONIC-CIRCUIT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ELECTRONIC-CIRCUIT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item electronic-circuit",
      "lua_code": "\n-- Generic compatibility patch for electronic-circuit\n-- Fixes conflict between: alien-module, aai-vehicles-warden, boblogistics, terrapalus, crushing-industry, Planet-Hopper, bobelectronics, lex-aircraft, aquilo-seabloom-algaculture, cubium, Flare Stack, bobassembly, vtk-cannon-turret, Moshine, bobequipment, corrundum, bobvehicleequipment, Cerys-Moon-of-Fulgora, dea-dia-system, TimeTools, wood-military, bobpower, metal-and-stars, Electric Furnaces, More_Repair_Packs, Automatic_Train_Painter, bobplates, Aircraft-space-age, castra, tenebris-prime, bobmining, bobmodules, lignumis, Krastorio2-spaced-out, janus\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"electronic-circuit\"] then\n    local item = data.raw.item[\"electronic-circuit\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"electronic-circuit\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"electronic-circuit-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"electronic-circuit-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_RADAR_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_RADAR"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item radar",
      "lua_code": "\n-- Generic compatibility patch for radar\n-- Fixes conflict between: slp-dyson-sphere-reworked, RampantFixed, PlutoniumEnergy, bobenemies, atomic-artillery-reborn, castra, aai-vehicles-warden, Kux-OrbitalIonCannon, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"radar\"] then\n    local item = data.raw.item[\"radar\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"radar\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"radar-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"radar-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_COAL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_COAL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item coal",
      "lua_code": "\n-- Generic compatibility patch for coal\n-- Fixes conflict between: cubium, Moshine-assets, bobplates, quirkycat_machines, alien-module, aai-vehicles-warden, vulcanus-sulfuric-bacteria, alloy-smelting, Moshine, crushing-industry, metal-and-stars, bobelectronics, Krastorio2-spaced-out, grappling-gun\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"coal\"] then\n    local item = data.raw.item[\"coal\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"coal\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"coal-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"coal-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SUBMACHINE-GUN_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SUBMACHINE-GUN"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item submachine-gun",
      "lua_code": "\n-- Generic compatibility patch for submachine-gun\n-- Fixes conflict between: lex-aircraft, Krastorio2-spaced-out, Aircraft-space-age\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"submachine-gun\"] then\n    local item = data.raw.item[\"submachine-gun\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"submachine-gun\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"submachine-gun-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"submachine-gun-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ROCKET-LAUNCHER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ROCKET-LAUNCHER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item rocket-launcher",
      "lua_code": "\n-- Generic compatibility patch for rocket-launcher\n-- Fixes conflict between: HelicopterRevival, Hovercrafts, Aircraft-space-age, Krastorio2-spaced-out, lex-aircraft\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"rocket-launcher\"] then\n    local item = data.raw.item[\"rocket-launcher\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"rocket-launcher\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"rocket-launcher-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"rocket-launcher-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LOW-DENSITY-STRUCTURE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_LOW-DENSITY-STRUCTURE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item low-density-structure",
      "lua_code": "\n-- Generic compatibility patch for low-density-structure\n-- Fixes conflict between: RampantFixed, Hovercrafts, StopgapNukes, shield-projector, lex-aircraft, cubium, orbital-transfer, bobequipment, fulgora-coralmium-agriculture, Kux-OrbitalIonCannon, bobvehicleequipment, Cerys-Moon-of-Fulgora, PlutoniumEnergy, secretas, More_Repair_Packs, lilys-cubeine, Aircraft-space-age, castra, astroponics, metal-and-stars, lignumis, Krastorio2-spaced-out, janus\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"low-density-structure\"] then\n    local item = data.raw.item[\"low-density-structure\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"low-density-structure\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"low-density-structure-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"low-density-structure-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_EXPLOSIVE-CANNON-SHELL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_EXPLOSIVE-CANNON-SHELL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item explosive-cannon-shell",
      "lua_code": "\n-- Generic compatibility patch for explosive-cannon-shell\n-- Fixes conflict between: PlutoniumEnergy, StopgapNukes, Aircraft-space-age\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"explosive-cannon-shell\"] then\n    local item = data.raw.item[\"explosive-cannon-shell\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"explosive-cannon-shell\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"explosive-cannon-shell-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"explosive-cannon-shell-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FLAMETHROWER-AMMO_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_FLAMETHROWER-AMMO"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item flamethrower-ammo",
      "lua_code": "\n-- Generic compatibility patch for flamethrower-ammo\n-- Fixes conflict between: StopgapNukes, Aircraft-space-age\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"flamethrower-ammo\"] then\n    local item = data.raw.item[\"flamethrower-ammo\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"flamethrower-ammo\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"flamethrower-ammo-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"flamethrower-ammo-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ENERGY-SHIELD-MK2-EQUIPMENT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ENERGY-SHIELD-MK2-EQUIPMENT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item energy-shield-mk2-equipment",
      "lua_code": "\n-- Generic compatibility patch for energy-shield-mk2-equipment\n-- Fixes conflict between: Hovercrafts, Aircraft-space-age, castra, bobequipment, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"energy-shield-mk2-equipment\"] then\n    local item = data.raw.item[\"energy-shield-mk2-equipment\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"energy-shield-mk2-equipment\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"energy-shield-mk2-equipment-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"energy-shield-mk2-equipment-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_IRON-ORE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_IRON-ORE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item iron-ore",
      "lua_code": "\n-- Generic compatibility patch for iron-ore\n-- Fixes conflict between: cubium, Moshine-assets, bobplates, quirkycat_machines, alien-module, castra, tenebris-prime, crushing-industry, metal-and-stars, bobelectronics, corrundum, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"iron-ore\"] then\n    local item = data.raw.item[\"iron-ore\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"iron-ore\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"iron-ore-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"iron-ore-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_COPPER-ORE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_COPPER-ORE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item copper-ore",
      "lua_code": "\n-- Generic compatibility patch for copper-ore\n-- Fixes conflict between: cubium, Moshine-assets, bobplates, alien-module, crushing-industry, metal-and-stars, corrundum, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"copper-ore\"] then\n    local item = data.raw.item[\"copper-ore\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"copper-ore\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"copper-ore-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"copper-ore-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_COKE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_COKE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item coke",
      "lua_code": "\n-- Generic compatibility patch for coke\n-- Fixes conflict between: alloy-smelting, wood-industry\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"coke\"] then\n    local item = data.raw.item[\"coke\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"coke\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"coke-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"coke-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_CRUSHED-COAL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_CRUSHED-COAL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item crushed-coal",
      "lua_code": "\n-- Generic compatibility patch for crushed-coal\n-- Fixes conflict between: alloy-smelting, crushing-industry\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"crushed-coal\"] then\n    local item = data.raw.item[\"crushed-coal\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"crushed-coal\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"crushed-coal-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"crushed-coal-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_CARBON_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_CARBON"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item carbon",
      "lua_code": "\n-- Generic compatibility patch for carbon\n-- Fixes conflict between: cubium, Moshine-assets, RampantFixed, castra, vulcanus-sulfuric-bacteria, alloy-smelting, Moshine, crushing-industry, astroponics, wood-industry, metal-and-stars, corrundum, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"carbon\"] then\n    local item = data.raw.item[\"carbon\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"carbon\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"carbon-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"carbon-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SPOILAGE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SPOILAGE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item spoilage",
      "lua_code": "\n-- Generic compatibility patch for spoilage\n-- Fixes conflict between: aquilo-seabloom-algaculture, cubium, planet-muluna, secretas, fulgora-coralmium-agriculture\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"spoilage\"] then\n    local item = data.raw.item[\"spoilage\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"spoilage\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"spoilage-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"spoilage-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LANDFILL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_LANDFILL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item landfill",
      "lua_code": "\n-- Generic compatibility patch for landfill\n-- Fixes conflict between: aquilo-seabloom-algaculture, Krastorio2-spaced-out, astroponics\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"landfill\"] then\n    local item = data.raw.item[\"landfill\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"landfill\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"landfill-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"landfill-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_TUNGSTEN-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_TUNGSTEN-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item tungsten-plate",
      "lua_code": "\n-- Generic compatibility patch for tungsten-plate\n-- Fixes conflict between: aquilo-seabloom-algaculture, cubium, promethium-quality, slp-dyson-sphere-reworked, lilys-cubeine, VoidProcessing, secretas, metal-and-stars, corrundum, StopgapNukes, Krastorio2-spaced-out, Fluid-level-indicator\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"tungsten-plate\"] then\n    local item = data.raw.item[\"tungsten-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"tungsten-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"tungsten-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"tungsten-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SUPERCONDUCTOR_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SUPERCONDUCTOR"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item superconductor",
      "lua_code": "\n-- Generic compatibility patch for superconductor\n-- Fixes conflict between: aquilo-seabloom-algaculture, slp-dyson-sphere-reworked, RampantFixed, VoidProcessing, Krastorio2-spaced-out, secretas, metal-and-stars, promethium-quality, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"superconductor\"] then\n    local item = data.raw.item[\"superconductor\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"superconductor\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"superconductor-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"superconductor-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PENTAPOD-EGG_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PENTAPOD-EGG"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item pentapod-egg",
      "lua_code": "\n-- Generic compatibility patch for pentapod-egg\n-- Fixes conflict between: aquilo-seabloom-algaculture, cubium, Krastorio2-spaced-out, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"pentapod-egg\"] then\n    local item = data.raw.item[\"pentapod-egg\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"pentapod-egg\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"pentapod-egg-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"pentapod-egg-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_NUTRIENTS_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_NUTRIENTS"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item nutrients",
      "lua_code": "\n-- Generic compatibility patch for nutrients\n-- Fixes conflict between: aquilo-seabloom-algaculture, VoidProcessing, secretas, metal-and-stars, corrundum, lignumis\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"nutrients\"] then\n    local item = data.raw.item[\"nutrients\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"nutrients\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"nutrients-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"nutrients-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_RESIN_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_RESIN"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item resin",
      "lua_code": "\n-- Generic compatibility patch for resin\n-- Fixes conflict between: aquilo-seabloom-algaculture, wood-industry, vulcanus-sulfuric-bacteria\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"resin\"] then\n    local item = data.raw.item[\"resin\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"resin\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"resin-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"resin-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_WOODCHIPS_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_WOODCHIPS"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item woodchips",
      "lua_code": "\n-- Generic compatibility patch for woodchips\n-- Fixes conflict between: aquilo-seabloom-algaculture, wood-industry\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"woodchips\"] then\n    local item = data.raw.item[\"woodchips\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"woodchips\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"woodchips-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"woodchips-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_WOOD_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_WOOD"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item wood",
      "lua_code": "\n-- Generic compatibility patch for wood\n-- Fixes conflict between: aquilo-seabloom-algaculture, planet-muluna, Wood-Walls, bobplates, bobgreenhouse, lilys-cubeine, vulcanus-sulfuric-bacteria, wood-military, astroponics, enemyracemanager, metal-and-stars, wood-industry, bobelectronics, corrundum, lignumis, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"wood\"] then\n    local item = data.raw.item[\"wood\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"wood\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"wood-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"wood-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BIOFLUX_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BIOFLUX"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bioflux",
      "lua_code": "\n-- Generic compatibility patch for bioflux\n-- Fixes conflict between: cubium, VoidProcessing, astroponics, secretas, metal-and-stars, corrundum\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bioflux\"] then\n    local item = data.raw.item[\"bioflux\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bioflux\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bioflux-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bioflux-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PIPE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PIPE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item pipe",
      "lua_code": "\n-- Generic compatibility patch for pipe\n-- Fixes conflict between: boblogistics, Planet-Hopper, Fluid-level-indicator, grappling-gun, Flare Stack, bobassembly, ballistic_missile, FluidMustFlow, planet-muluna, dea-dia-system, bobpower, secretas, bobplates, foundry-restructuring, lilys-cubeine, castra, Flow Control, bobmining, astroponics, metal-and-stars, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"pipe\"] then\n    local item = data.raw.item[\"pipe\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"pipe\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"pipe-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"pipe-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_TREE-SEED_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_TREE-SEED"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item tree-seed",
      "lua_code": "\n-- Generic compatibility patch for tree-seed\n-- Fixes conflict between: planet-muluna, astroponics\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"tree-seed\"] then\n    local item = data.raw.item[\"tree-seed\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"tree-seed\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"tree-seed-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"tree-seed-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_CALCITE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_CALCITE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item calcite",
      "lua_code": "\n-- Generic compatibility patch for calcite\n-- Fixes conflict between: cubium, Moshine-assets, lilys-cubeine, common-prototypes, vulcanus-sulfuric-bacteria, crushing-industry, astroponics, metal-and-stars, corrundum, lignumis, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"calcite\"] then\n    local item = data.raw.item[\"calcite\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"calcite\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"calcite-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"calcite-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_YUMAKO-SEED_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_YUMAKO-SEED"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item yumako-seed",
      "lua_code": "\n-- Generic compatibility patch for yumako-seed\n-- Fixes conflict between: Krastorio2-spaced-out, planet-muluna, astroponics\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"yumako-seed\"] then\n    local item = data.raw.item[\"yumako-seed\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"yumako-seed\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"yumako-seed-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"yumako-seed-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_YUMAKO_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_YUMAKO"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item yumako",
      "lua_code": "\n-- Generic compatibility patch for yumako\n-- Fixes conflict between: Krastorio2-spaced-out, planet-muluna, astroponics\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"yumako\"] then\n    local item = data.raw.item[\"yumako\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"yumako\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"yumako-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"yumako-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_JELLYNUT-SEED_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_JELLYNUT-SEED"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item jellynut-seed",
      "lua_code": "\n-- Generic compatibility patch for jellynut-seed\n-- Fixes conflict between: Krastorio2-spaced-out, planet-muluna, astroponics\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"jellynut-seed\"] then\n    local item = data.raw.item[\"jellynut-seed\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"jellynut-seed\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"jellynut-seed-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"jellynut-seed-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_JELLYNUT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_JELLYNUT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item jellynut",
      "lua_code": "\n-- Generic compatibility patch for jellynut\n-- Fixes conflict between: Krastorio2-spaced-out, planet-muluna, astroponics\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"jellynut\"] then\n    local item = data.raw.item[\"jellynut\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"jellynut\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"jellynut-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"jellynut-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_URANIUM-235_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_URANIUM-235"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item uranium-235",
      "lua_code": "\n-- Generic compatibility patch for uranium-235\n-- Fixes conflict between: atan-nuclear-science, lilys-cubeine, bobplates, RampantFixed, metal-and-stars, StopgapNukes, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"uranium-235\"] then\n    local item = data.raw.item[\"uranium-235\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"uranium-235\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"uranium-235-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"uranium-235-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_WATER-BARREL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_WATER-BARREL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item water-barrel",
      "lua_code": "\n-- Generic compatibility patch for water-barrel\n-- Fixes conflict between: atan-nuclear-science, enemyracemanager\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"water-barrel\"] then\n    local item = data.raw.item[\"water-barrel\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"water-barrel\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"water-barrel-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"water-barrel-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BARREL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BARREL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item barrel",
      "lua_code": "\n-- Generic compatibility patch for barrel\n-- Fixes conflict between: atan-nuclear-science, PlutoniumEnergy\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"barrel\"] then\n    local item = data.raw.item[\"barrel\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"barrel\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"barrel-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"barrel-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_CENTRIFUGE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_CENTRIFUGE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item centrifuge",
      "lua_code": "\n-- Generic compatibility patch for centrifuge\n-- Fixes conflict between: atan-nuclear-science, bobassembly\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"centrifuge\"] then\n    local item = data.raw.item[\"centrifuge\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"centrifuge\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"centrifuge-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"centrifuge-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_REFINED-CONCRETE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_REFINED-CONCRETE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item refined-concrete",
      "lua_code": "\n-- Generic compatibility patch for refined-concrete\n-- Fixes conflict between: atan-nuclear-science, cubium, bobassembly, HelicopterRevival, minimalist-rails, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"refined-concrete\"] then\n    local item = data.raw.item[\"refined-concrete\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"refined-concrete\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"refined-concrete-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"refined-concrete-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PLUTONIUM-239_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PLUTONIUM-239"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item plutonium-239",
      "lua_code": "\n-- Generic compatibility patch for plutonium-239\n-- Fixes conflict between: atan-nuclear-science, PlutoniumEnergy, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"plutonium-239\"] then\n    local item = data.raw.item[\"plutonium-239\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"plutonium-239\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"plutonium-239-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"plutonium-239-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ATOMIC-BOMB_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ATOMIC-BOMB"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item atomic-bomb",
      "lua_code": "\n-- Generic compatibility patch for atomic-bomb\n-- Fixes conflict between: atomic-artillery-reborn, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"atomic-bomb\"] then\n    local item = data.raw.item[\"atomic-bomb\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"atomic-bomb\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"atomic-bomb-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"atomic-bomb-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_EXPLOSIVE-URANIUM-CANNON-SHELL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_EXPLOSIVE-URANIUM-CANNON-SHELL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item explosive-uranium-cannon-shell",
      "lua_code": "\n-- Generic compatibility patch for explosive-uranium-cannon-shell\n-- Fixes conflict between: atomic-artillery-reborn, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"explosive-uranium-cannon-shell\"] then\n    local item = data.raw.item[\"explosive-uranium-cannon-shell\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"explosive-uranium-cannon-shell\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"explosive-uranium-cannon-shell-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"explosive-uranium-cannon-shell-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_STORAGE-TANK_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_STORAGE-TANK"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item storage-tank",
      "lua_code": "\n-- Generic compatibility patch for storage-tank\n-- Fixes conflict between: ballistic_missile, boblogistics, metal-and-stars, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"storage-tank\"] then\n    local item = data.raw.item[\"storage-tank\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"storage-tank\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"storage-tank-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"storage-tank-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ROCKET-PART_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ROCKET-PART"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item rocket-part",
      "lua_code": "\n-- Generic compatibility patch for rocket-part\n-- Fixes conflict between: ballistic_missile, metal-and-stars, Planet-Hopper\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"rocket-part\"] then\n    local item = data.raw.item[\"rocket-part\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"rocket-part\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"rocket-part-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"rocket-part-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ASSEMBLING-MACHINE-3_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ASSEMBLING-MACHINE-3"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item assembling-machine-3",
      "lua_code": "\n-- Generic compatibility patch for assembling-machine-3\n-- Fixes conflict between: Moshine, Krastorio2-spaced-out, bobassembly\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"assembling-machine-3\"] then\n    local item = data.raw.item[\"assembling-machine-3\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"assembling-machine-3\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"assembling-machine-3-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"assembling-machine-3-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ELECTRIC-CHEMICAL-FURNACE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-ELECTRIC-CHEMICAL-FURNACE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-electric-chemical-furnace",
      "lua_code": "\n-- Generic compatibility patch for bob-electric-chemical-furnace\n-- Fixes conflict between: bobassembly, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-electric-chemical-furnace\"] then\n    local item = data.raw.item[\"bob-electric-chemical-furnace\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-electric-chemical-furnace\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-electric-chemical-furnace-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-electric-chemical-furnace-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_CHEMICAL-PLANT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_CHEMICAL-PLANT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item chemical-plant",
      "lua_code": "\n-- Generic compatibility patch for chemical-plant\n-- Fixes conflict between: corrundum, bobassembly\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"chemical-plant\"] then\n    local item = data.raw.item[\"chemical-plant\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"chemical-plant\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"chemical-plant-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"chemical-plant-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-DISTILLERY_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-DISTILLERY"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-distillery",
      "lua_code": "\n-- Generic compatibility patch for bob-distillery\n-- Fixes conflict between: bobassembly, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-distillery\"] then\n    local item = data.raw.item[\"bob-distillery\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-distillery\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-distillery-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-distillery-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ELECTROLYSER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-ELECTROLYSER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-electrolyser",
      "lua_code": "\n-- Generic compatibility patch for bob-electrolyser\n-- Fixes conflict between: bobassembly, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-electrolyser\"] then\n    local item = data.raw.item[\"bob-electrolyser\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-electrolyser\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-electrolyser-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-electrolyser-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PLASTIC-BAR_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PLASTIC-BAR"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item plastic-bar",
      "lua_code": "\n-- Generic compatibility patch for plastic-bar\n-- Fixes conflict between: Cold_biters, boblogistics, StopgapNukes, bobelectronics, Fluid-level-indicator, cubium, bobassembly, vtk-cannon-turret, bobequipment, fulgora-coralmium-agriculture, corrundum, Kux-OrbitalIonCannon, bobvehicleequipment, More_Ammo, HelicopterRevival, metal-and-stars, secretas, More_Repair_Packs, bobplates, lilys-cubeine, castra, tenebris-prime, bobmodules, lignumis, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"plastic-bar\"] then\n    local item = data.raw.item[\"plastic-bar\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"plastic-bar\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"plastic-bar-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"plastic-bar-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-FLUID-FURNACE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-FLUID-FURNACE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-fluid-furnace",
      "lua_code": "\n-- Generic compatibility patch for bob-fluid-furnace\n-- Fixes conflict between: bobpower, bobassembly\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-fluid-furnace\"] then\n    local item = data.raw.item[\"bob-fluid-furnace\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-fluid-furnace\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-fluid-furnace-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-fluid-furnace-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_STEEL-FURNACE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_STEEL-FURNACE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item steel-furnace",
      "lua_code": "\n-- Generic compatibility patch for steel-furnace\n-- Fixes conflict between: Electric Furnaces, bobpower, bobassembly, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"steel-furnace\"] then\n    local item = data.raw.item[\"steel-furnace\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"steel-furnace\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"steel-furnace-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"steel-furnace-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-STEEL-MIXING-FURNACE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-STEEL-MIXING-FURNACE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-steel-mixing-furnace",
      "lua_code": "\n-- Generic compatibility patch for bob-steel-mixing-furnace\n-- Fixes conflict between: bobassembly, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-steel-mixing-furnace\"] then\n    local item = data.raw.item[\"bob-steel-mixing-furnace\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-steel-mixing-furnace\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-steel-mixing-furnace-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-steel-mixing-furnace-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-STEEL-CHEMICAL-FURNACE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-STEEL-CHEMICAL-FURNACE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-steel-chemical-furnace",
      "lua_code": "\n-- Generic compatibility patch for bob-steel-chemical-furnace\n-- Fixes conflict between: bobassembly, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-steel-chemical-furnace\"] then\n    local item = data.raw.item[\"bob-steel-chemical-furnace\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-steel-chemical-furnace\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-steel-chemical-furnace-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-steel-chemical-furnace-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-TIN-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-TIN-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-tin-plate",
      "lua_code": "\n-- Generic compatibility patch for bob-tin-plate\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-tin-plate\"] then\n    local item = data.raw.item[\"bob-tin-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-tin-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-tin-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-tin-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-RUBBER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-RUBBER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-rubber",
      "lua_code": "\n-- Generic compatibility patch for bob-rubber\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-rubber\"] then\n    local item = data.raw.item[\"bob-rubber\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-rubber\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-rubber-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-rubber-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-GOLD-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-GOLD-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-gold-plate",
      "lua_code": "\n-- Generic compatibility patch for bob-gold-plate\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-gold-plate\"] then\n    local item = data.raw.item[\"bob-gold-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-gold-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-gold-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-gold-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-RESIN_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-RESIN"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-resin",
      "lua_code": "\n-- Generic compatibility patch for bob-resin\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-resin\"] then\n    local item = data.raw.item[\"bob-resin\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-resin\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-resin-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-resin-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ADVANCED-PROCESSING-UNIT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-ADVANCED-PROCESSING-UNIT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-advanced-processing-unit",
      "lua_code": "\n-- Generic compatibility patch for bob-advanced-processing-unit\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-advanced-processing-unit\"] then\n    local item = data.raw.item[\"bob-advanced-processing-unit\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-advanced-processing-unit\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-advanced-processing-unit-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-advanced-processing-unit-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-SILICON-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-SILICON-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-silicon-plate",
      "lua_code": "\n-- Generic compatibility patch for bob-silicon-plate\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-silicon-plate\"] then\n    local item = data.raw.item[\"bob-silicon-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-silicon-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-silicon-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-silicon-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-SILICON-WAFER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-SILICON-WAFER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-silicon-wafer",
      "lua_code": "\n-- Generic compatibility patch for bob-silicon-wafer\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-silicon-wafer\"] then\n    local item = data.raw.item[\"bob-silicon-wafer\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-silicon-wafer\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-silicon-wafer-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-silicon-wafer-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-LEAD-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-LEAD-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-lead-plate",
      "lua_code": "\n-- Generic compatibility patch for bob-lead-plate\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-lead-plate\"] then\n    local item = data.raw.item[\"bob-lead-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-lead-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-lead-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-lead-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ALIEN-ARTIFACT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-ALIEN-ARTIFACT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-alien-artifact",
      "lua_code": "\n-- Generic compatibility patch for bob-alien-artifact\n-- Fixes conflict between: bobenemies, bobvehicleequipment\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-alien-artifact\"] then\n    local item = data.raw.item[\"bob-alien-artifact\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-alien-artifact\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-alien-artifact-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-alien-artifact-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ALIEN-ARTIFACT-RED_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-ALIEN-ARTIFACT-RED"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-alien-artifact-red",
      "lua_code": "\n-- Generic compatibility patch for bob-alien-artifact-red\n-- Fixes conflict between: bobenemies, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-alien-artifact-red\"] then\n    local item = data.raw.item[\"bob-alien-artifact-red\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-alien-artifact-red\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-alien-artifact-red-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-alien-artifact-red-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ALIEN-ARTIFACT-ORANGE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-ALIEN-ARTIFACT-ORANGE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-alien-artifact-orange",
      "lua_code": "\n-- Generic compatibility patch for bob-alien-artifact-orange\n-- Fixes conflict between: bobenemies, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-alien-artifact-orange\"] then\n    local item = data.raw.item[\"bob-alien-artifact-orange\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-alien-artifact-orange\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-alien-artifact-orange-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-alien-artifact-orange-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ALIEN-ARTIFACT-YELLOW_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-ALIEN-ARTIFACT-YELLOW"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-alien-artifact-yellow",
      "lua_code": "\n-- Generic compatibility patch for bob-alien-artifact-yellow\n-- Fixes conflict between: bobenemies, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-alien-artifact-yellow\"] then\n    local item = data.raw.item[\"bob-alien-artifact-yellow\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-alien-artifact-yellow\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-alien-artifact-yellow-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-alien-artifact-yellow-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ALIEN-ARTIFACT-GREEN_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-ALIEN-ARTIFACT-GREEN"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-alien-artifact-green",
      "lua_code": "\n-- Generic compatibility patch for bob-alien-artifact-green\n-- Fixes conflict between: bobenemies, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-alien-artifact-green\"] then\n    local item = data.raw.item[\"bob-alien-artifact-green\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-alien-artifact-green\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-alien-artifact-green-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-alien-artifact-green-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ALIEN-ARTIFACT-BLUE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-ALIEN-ARTIFACT-BLUE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-alien-artifact-blue",
      "lua_code": "\n-- Generic compatibility patch for bob-alien-artifact-blue\n-- Fixes conflict between: bobenemies, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-alien-artifact-blue\"] then\n    local item = data.raw.item[\"bob-alien-artifact-blue\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-alien-artifact-blue\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-alien-artifact-blue-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-alien-artifact-blue-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ALIEN-ARTIFACT-PURPLE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-ALIEN-ARTIFACT-PURPLE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-alien-artifact-purple",
      "lua_code": "\n-- Generic compatibility patch for bob-alien-artifact-purple\n-- Fixes conflict between: bobenemies, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-alien-artifact-purple\"] then\n    local item = data.raw.item[\"bob-alien-artifact-purple\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-alien-artifact-purple\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-alien-artifact-purple-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-alien-artifact-purple-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_POWER-ARMOR-MK2_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_POWER-ARMOR-MK2"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item power-armor-mk2",
      "lua_code": "\n-- Generic compatibility patch for power-armor-mk2\n-- Fixes conflict between: Cold_biters, bobequipment\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"power-armor-mk2\"] then\n    local item = data.raw.item[\"power-armor-mk2\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"power-armor-mk2\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"power-armor-mk2-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"power-armor-mk2-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SPEED-MODULE-2_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SPEED-MODULE-2"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item speed-module-2",
      "lua_code": "\n-- Generic compatibility patch for speed-module-2\n-- Fixes conflict between: Electric Furnaces, Krastorio2-spaced-out, bobequipment\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"speed-module-2\"] then\n    local item = data.raw.item[\"speed-module-2\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"speed-module-2\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"speed-module-2-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"speed-module-2-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_EFFICIENCY-MODULE-3_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_EFFICIENCY-MODULE-3"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item efficiency-module-3",
      "lua_code": "\n-- Generic compatibility patch for efficiency-module-3\n-- Fixes conflict between: bobmodules, bobequipment, secretas, bobvehicleequipment\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"efficiency-module-3\"] then\n    local item = data.raw.item[\"efficiency-module-3\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"efficiency-module-3\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"efficiency-module-3-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"efficiency-module-3-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SPEED-MODULE-3_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SPEED-MODULE-3"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item speed-module-3",
      "lua_code": "\n-- Generic compatibility patch for speed-module-3\n-- Fixes conflict between: bobequipment, secretas, bobvehicleequipment, bobmodules, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"speed-module-3\"] then\n    local item = data.raw.item[\"speed-module-3\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"speed-module-3\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"speed-module-3-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"speed-module-3-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PRODUCTIVITY-MODULE-2_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PRODUCTIVITY-MODULE-2"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item productivity-module-2",
      "lua_code": "\n-- Generic compatibility patch for productivity-module-2\n-- Fixes conflict between: metal-and-stars, Moshine, bobequipment, bobvehicleequipment\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"productivity-module-2\"] then\n    local item = data.raw.item[\"productivity-module-2\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"productivity-module-2\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"productivity-module-2-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"productivity-module-2-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PRODUCTIVITY-MODULE-3_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PRODUCTIVITY-MODULE-3"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item productivity-module-3",
      "lua_code": "\n-- Generic compatibility patch for productivity-module-3\n-- Fixes conflict between: bobmodules, bobequipment, secretas, bobvehicleequipment\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"productivity-module-3\"] then\n    local item = data.raw.item[\"productivity-module-3\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"productivity-module-3\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"productivity-module-3-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"productivity-module-3-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BATTERY-MK2-EQUIPMENT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BATTERY-MK2-EQUIPMENT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item battery-mk2-equipment",
      "lua_code": "\n-- Generic compatibility patch for battery-mk2-equipment\n-- Fixes conflict between: Hovercrafts, bobequipment\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"battery-mk2-equipment\"] then\n    local item = data.raw.item[\"battery-mk2-equipment\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"battery-mk2-equipment\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"battery-mk2-equipment-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"battery-mk2-equipment-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FISSION-REACTOR-EQUIPMENT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_FISSION-REACTOR-EQUIPMENT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item fission-reactor-equipment",
      "lua_code": "\n-- Generic compatibility patch for fission-reactor-equipment\n-- Fixes conflict between: PlutoniumEnergy, bobequipment\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"fission-reactor-equipment\"] then\n    local item = data.raw.item[\"fission-reactor-equipment\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"fission-reactor-equipment\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"fission-reactor-equipment-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"fission-reactor-equipment-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_URANIUM-FUEL-CELL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_URANIUM-FUEL-CELL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item uranium-fuel-cell",
      "lua_code": "\n-- Generic compatibility patch for uranium-fuel-cell\n-- Fixes conflict between: slp-dyson-sphere-reworked, maraxsis, bobequipment, secretas, metal-and-stars, StopgapNukes, bobvehicleequipment\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"uranium-fuel-cell\"] then\n    local item = data.raw.item[\"uranium-fuel-cell\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"uranium-fuel-cell\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"uranium-fuel-cell-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"uranium-fuel-cell-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_NIGHT-VISION-EQUIPMENT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_NIGHT-VISION-EQUIPMENT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item night-vision-equipment",
      "lua_code": "\n-- Generic compatibility patch for night-vision-equipment\n-- Fixes conflict between: Krastorio2-spaced-out, bobequipment\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"night-vision-equipment\"] then\n    local item = data.raw.item[\"night-vision-equipment\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"night-vision-equipment\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"night-vision-equipment-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"night-vision-equipment-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SOLAR-PANEL-EQUIPMENT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SOLAR-PANEL-EQUIPMENT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item solar-panel-equipment",
      "lua_code": "\n-- Generic compatibility patch for solar-panel-equipment\n-- Fixes conflict between: Krastorio2-spaced-out, bobequipment\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"solar-panel-equipment\"] then\n    local item = data.raw.item[\"solar-panel-equipment\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"solar-panel-equipment\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"solar-panel-equipment-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"solar-panel-equipment-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PERSONAL-LASER-DEFENSE-EQUIPMENT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PERSONAL-LASER-DEFENSE-EQUIPMENT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item personal-laser-defense-equipment",
      "lua_code": "\n-- Generic compatibility patch for personal-laser-defense-equipment\n-- Fixes conflict between: Krastorio2-spaced-out, bobequipment\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"personal-laser-defense-equipment\"] then\n    local item = data.raw.item[\"personal-laser-defense-equipment\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"personal-laser-defense-equipment\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"personal-laser-defense-equipment-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"personal-laser-defense-equipment-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_EXOSKELETON-EQUIPMENT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_EXOSKELETON-EQUIPMENT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item exoskeleton-equipment",
      "lua_code": "\n-- Generic compatibility patch for exoskeleton-equipment\n-- Fixes conflict between: Krastorio2-spaced-out, bobequipment\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"exoskeleton-equipment\"] then\n    local item = data.raw.item[\"exoskeleton-equipment\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"exoskeleton-equipment\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"exoskeleton-equipment-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"exoskeleton-equipment-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SULFUR_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SULFUR"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item sulfur",
      "lua_code": "\n-- Generic compatibility patch for sulfur\n-- Fixes conflict between: cubium, Moshine-assets, bobplates, bobgreenhouse, More_Ammo, castra, tenebris-prime, vulcanus-sulfuric-bacteria, corrundum, StopgapNukes\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"sulfur\"] then\n    local item = data.raw.item[\"sulfur\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"sulfur\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"sulfur-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"sulfur-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-BRASS-ALLOY_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-BRASS-ALLOY"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-brass-alloy",
      "lua_code": "\n-- Generic compatibility patch for bob-brass-alloy\n-- Fixes conflict between: boblogistics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-brass-alloy\"] then\n    local item = data.raw.item[\"bob-brass-alloy\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-brass-alloy\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-brass-alloy-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-brass-alloy-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-TITANIUM-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-TITANIUM-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-titanium-plate",
      "lua_code": "\n-- Generic compatibility patch for bob-titanium-plate\n-- Fixes conflict between: boblogistics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-titanium-plate\"] then\n    local item = data.raw.item[\"bob-titanium-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-titanium-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-titanium-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-titanium-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LONG-HANDED-INSERTER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_LONG-HANDED-INSERTER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item long-handed-inserter",
      "lua_code": "\n-- Generic compatibility patch for long-handed-inserter\n-- Fixes conflict between: boblogistics, long_stack_inserter, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"long-handed-inserter\"] then\n    local item = data.raw.item[\"long-handed-inserter\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"long-handed-inserter\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"long-handed-inserter-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"long-handed-inserter-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_TRANSPORT-BELT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_TRANSPORT-BELT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item transport-belt",
      "lua_code": "\n-- Generic compatibility patch for transport-belt\n-- Fixes conflict between: boblogistics, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"transport-belt\"] then\n    local item = data.raw.item[\"transport-belt\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"transport-belt\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"transport-belt-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"transport-belt-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FAST-TRANSPORT-BELT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_FAST-TRANSPORT-BELT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item fast-transport-belt",
      "lua_code": "\n-- Generic compatibility patch for fast-transport-belt\n-- Fixes conflict between: boblogistics, Krastorio2-spaced-out, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"fast-transport-belt\"] then\n    local item = data.raw.item[\"fast-transport-belt\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"fast-transport-belt\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"fast-transport-belt-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"fast-transport-belt-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_EXPRESS-TRANSPORT-BELT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_EXPRESS-TRANSPORT-BELT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item express-transport-belt",
      "lua_code": "\n-- Generic compatibility patch for express-transport-belt\n-- Fixes conflict between: boblogistics, Krastorio2-spaced-out, OmegaDrill, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"express-transport-belt\"] then\n    local item = data.raw.item[\"express-transport-belt\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"express-transport-belt\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"express-transport-belt-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"express-transport-belt-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FAST-UNDERGROUND-BELT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_FAST-UNDERGROUND-BELT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item fast-underground-belt",
      "lua_code": "\n-- Generic compatibility patch for fast-underground-belt\n-- Fixes conflict between: boblogistics, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"fast-underground-belt\"] then\n    local item = data.raw.item[\"fast-underground-belt\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"fast-underground-belt\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"fast-underground-belt-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"fast-underground-belt-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_EXPRESS-UNDERGROUND-BELT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_EXPRESS-UNDERGROUND-BELT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item express-underground-belt",
      "lua_code": "\n-- Generic compatibility patch for express-underground-belt\n-- Fixes conflict between: boblogistics, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"express-underground-belt\"] then\n    local item = data.raw.item[\"express-underground-belt\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"express-underground-belt\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"express-underground-belt-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"express-underground-belt-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FAST-SPLITTER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_FAST-SPLITTER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item fast-splitter",
      "lua_code": "\n-- Generic compatibility patch for fast-splitter\n-- Fixes conflict between: boblogistics, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"fast-splitter\"] then\n    local item = data.raw.item[\"fast-splitter\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"fast-splitter\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"fast-splitter-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"fast-splitter-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_EXPRESS-SPLITTER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_EXPRESS-SPLITTER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item express-splitter",
      "lua_code": "\n-- Generic compatibility patch for express-splitter\n-- Fixes conflict between: boblogistics, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"express-splitter\"] then\n    local item = data.raw.item[\"express-splitter\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"express-splitter\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"express-splitter-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"express-splitter-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BURNER-INSERTER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BURNER-INSERTER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item burner-inserter",
      "lua_code": "\n-- Generic compatibility patch for burner-inserter\n-- Fixes conflict between: boblogistics, lignumis, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"burner-inserter\"] then\n    local item = data.raw.item[\"burner-inserter\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"burner-inserter\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"burner-inserter-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"burner-inserter-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FAST-INSERTER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_FAST-INSERTER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item fast-inserter",
      "lua_code": "\n-- Generic compatibility patch for fast-inserter\n-- Fixes conflict between: boblogistics, Krastorio2-spaced-out, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"fast-inserter\"] then\n    local item = data.raw.item[\"fast-inserter\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"fast-inserter\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"fast-inserter-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"fast-inserter-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BULK-INSERTER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BULK-INSERTER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bulk-inserter",
      "lua_code": "\n-- Generic compatibility patch for bulk-inserter\n-- Fixes conflict between: boblogistics, Krastorio2-spaced-out, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bulk-inserter\"] then\n    local item = data.raw.item[\"bulk-inserter\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bulk-inserter\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bulk-inserter-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bulk-inserter-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_INSERTER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_INSERTER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item inserter",
      "lua_code": "\n-- Generic compatibility patch for inserter\n-- Fixes conflict between: boblogistics, Krastorio2-spaced-out, secretas, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"inserter\"] then\n    local item = data.raw.item[\"inserter\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"inserter\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"inserter-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"inserter-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PASSIVE-PROVIDER-CHEST_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PASSIVE-PROVIDER-CHEST"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item passive-provider-chest",
      "lua_code": "\n-- Generic compatibility patch for passive-provider-chest\n-- Fixes conflict between: boblogistics, orbital-transfer, Warehousing\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"passive-provider-chest\"] then\n    local item = data.raw.item[\"passive-provider-chest\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"passive-provider-chest\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"passive-provider-chest-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"passive-provider-chest-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ACTIVE-PROVIDER-CHEST_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ACTIVE-PROVIDER-CHEST"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item active-provider-chest",
      "lua_code": "\n-- Generic compatibility patch for active-provider-chest\n-- Fixes conflict between: boblogistics, Warehousing\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"active-provider-chest\"] then\n    local item = data.raw.item[\"active-provider-chest\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"active-provider-chest\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"active-provider-chest-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"active-provider-chest-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_STORAGE-CHEST_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_STORAGE-CHEST"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item storage-chest",
      "lua_code": "\n-- Generic compatibility patch for storage-chest\n-- Fixes conflict between: boblogistics, Warehousing\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"storage-chest\"] then\n    local item = data.raw.item[\"storage-chest\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"storage-chest\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"storage-chest-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"storage-chest-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BUFFER-CHEST_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BUFFER-CHEST"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item buffer-chest",
      "lua_code": "\n-- Generic compatibility patch for buffer-chest\n-- Fixes conflict between: boblogistics, Warehousing\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"buffer-chest\"] then\n    local item = data.raw.item[\"buffer-chest\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"buffer-chest\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"buffer-chest-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"buffer-chest-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_REQUESTER-CHEST_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_REQUESTER-CHEST"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item requester-chest",
      "lua_code": "\n-- Generic compatibility patch for requester-chest\n-- Fixes conflict between: boblogistics, orbital-transfer, Warehousing\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"requester-chest\"] then\n    local item = data.raw.item[\"requester-chest\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"requester-chest\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"requester-chest-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"requester-chest-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-BRONZE-ALLOY_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-BRONZE-ALLOY"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-bronze-alloy",
      "lua_code": "\n-- Generic compatibility patch for bob-bronze-alloy\n-- Fixes conflict between: boblogistics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-bronze-alloy\"] then\n    local item = data.raw.item[\"bob-bronze-alloy\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-bronze-alloy\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-bronze-alloy-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-bronze-alloy-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-SILICON-NITRIDE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-SILICON-NITRIDE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-silicon-nitride",
      "lua_code": "\n-- Generic compatibility patch for bob-silicon-nitride\n-- Fixes conflict between: boblogistics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-silicon-nitride\"] then\n    local item = data.raw.item[\"bob-silicon-nitride\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-silicon-nitride\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-silicon-nitride-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-silicon-nitride-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-TUNGSTEN-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-TUNGSTEN-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-tungsten-plate",
      "lua_code": "\n-- Generic compatibility patch for bob-tungsten-plate\n-- Fixes conflict between: boblogistics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-tungsten-plate\"] then\n    local item = data.raw.item[\"bob-tungsten-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-tungsten-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-tungsten-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-tungsten-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-NITINOL-ALLOY_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-NITINOL-ALLOY"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-nitinol-alloy",
      "lua_code": "\n-- Generic compatibility patch for bob-nitinol-alloy\n-- Fixes conflict between: boblogistics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-nitinol-alloy\"] then\n    local item = data.raw.item[\"bob-nitinol-alloy\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-nitinol-alloy\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-nitinol-alloy-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-nitinol-alloy-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-COPPER-TUNGSTEN-ALLOY_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-COPPER-TUNGSTEN-ALLOY"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-copper-tungsten-alloy",
      "lua_code": "\n-- Generic compatibility patch for bob-copper-tungsten-alloy\n-- Fixes conflict between: boblogistics, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-copper-tungsten-alloy\"] then\n    local item = data.raw.item[\"bob-copper-tungsten-alloy\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-copper-tungsten-alloy\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-copper-tungsten-alloy-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-copper-tungsten-alloy-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PUMP_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PUMP"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item pump",
      "lua_code": "\n-- Generic compatibility patch for pump\n-- Fixes conflict between: boblogistics, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"pump\"] then\n    local item = data.raw.item[\"pump\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"pump\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"pump-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"pump-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ROBOPORT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ROBOPORT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item roboport",
      "lua_code": "\n-- Generic compatibility patch for roboport\n-- Fixes conflict between: boblogistics, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"roboport\"] then\n    local item = data.raw.item[\"roboport\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"roboport\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"roboport-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"roboport-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_STEEL-CHEST_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_STEEL-CHEST"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item steel-chest",
      "lua_code": "\n-- Generic compatibility patch for steel-chest\n-- Fixes conflict between: boblogistics, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"steel-chest\"] then\n    local item = data.raw.item[\"steel-chest\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"steel-chest\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"steel-chest-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"steel-chest-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LOCOMOTIVE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_LOCOMOTIVE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item locomotive",
      "lua_code": "\n-- Generic compatibility patch for locomotive\n-- Fixes conflict between: boblogistics, Krastorio2-spaced-out, se-space-trains\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"locomotive\"] then\n    local item = data.raw.item[\"locomotive\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"locomotive\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"locomotive-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"locomotive-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_CARGO-WAGON_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_CARGO-WAGON"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item cargo-wagon",
      "lua_code": "\n-- Generic compatibility patch for cargo-wagon\n-- Fixes conflict between: boblogistics, se-space-trains, DoubleWagons\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"cargo-wagon\"] then\n    local item = data.raw.item[\"cargo-wagon\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"cargo-wagon\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"cargo-wagon-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"cargo-wagon-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FLUID-WAGON_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_FLUID-WAGON"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item fluid-wagon",
      "lua_code": "\n-- Generic compatibility patch for fluid-wagon\n-- Fixes conflict between: boblogistics, se-space-trains, DoubleWagons\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"fluid-wagon\"] then\n    local item = data.raw.item[\"fluid-wagon\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"fluid-wagon\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"fluid-wagon-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"fluid-wagon-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FLYING-ROBOT-FRAME_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_FLYING-ROBOT-FRAME"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item flying-robot-frame",
      "lua_code": "\n-- Generic compatibility patch for flying-robot-frame\n-- Fixes conflict between: boblogistics, secretas, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"flying-robot-frame\"] then\n    local item = data.raw.item[\"flying-robot-frame\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"flying-robot-frame\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"flying-robot-frame-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"flying-robot-frame-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_QUALITY-MODULE-3_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_QUALITY-MODULE-3"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item quality-module-3",
      "lua_code": "\n-- Generic compatibility patch for quality-module-3\n-- Fixes conflict between: bobmodules, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"quality-module-3\"] then\n    local item = data.raw.item[\"quality-module-3\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"quality-module-3\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"quality-module-3-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"quality-module-3-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-RUBY-ORE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-RUBY-ORE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-ruby-ore",
      "lua_code": "\n-- Generic compatibility patch for bob-ruby-ore\n-- Fixes conflict between: bobores, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-ruby-ore\"] then\n    local item = data.raw.item[\"bob-ruby-ore\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-ruby-ore\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-ruby-ore-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-ruby-ore-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-SAPPHIRE-ORE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-SAPPHIRE-ORE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-sapphire-ore",
      "lua_code": "\n-- Generic compatibility patch for bob-sapphire-ore\n-- Fixes conflict between: bobores, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-sapphire-ore\"] then\n    local item = data.raw.item[\"bob-sapphire-ore\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-sapphire-ore\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-sapphire-ore-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-sapphire-ore-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-EMERALD-ORE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-EMERALD-ORE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-emerald-ore",
      "lua_code": "\n-- Generic compatibility patch for bob-emerald-ore\n-- Fixes conflict between: bobores, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-emerald-ore\"] then\n    local item = data.raw.item[\"bob-emerald-ore\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-emerald-ore\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-emerald-ore-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-emerald-ore-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-AMETHYST-ORE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-AMETHYST-ORE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-amethyst-ore",
      "lua_code": "\n-- Generic compatibility patch for bob-amethyst-ore\n-- Fixes conflict between: bobores, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-amethyst-ore\"] then\n    local item = data.raw.item[\"bob-amethyst-ore\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-amethyst-ore\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-amethyst-ore-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-amethyst-ore-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-TOPAZ-ORE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-TOPAZ-ORE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-topaz-ore",
      "lua_code": "\n-- Generic compatibility patch for bob-topaz-ore\n-- Fixes conflict between: bobores, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-topaz-ore\"] then\n    local item = data.raw.item[\"bob-topaz-ore\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-topaz-ore\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-topaz-ore-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-topaz-ore-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-DIAMOND-ORE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-DIAMOND-ORE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-diamond-ore",
      "lua_code": "\n-- Generic compatibility patch for bob-diamond-ore\n-- Fixes conflict between: bobores, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-diamond-ore\"] then\n    local item = data.raw.item[\"bob-diamond-ore\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-diamond-ore\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-diamond-ore-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-diamond-ore-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ALIEN-ORANGE-ALLOY_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOB-ALIEN-ORANGE-ALLOY"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item bob-alien-orange-alloy",
      "lua_code": "\n-- Generic compatibility patch for bob-alien-orange-alloy\n-- Fixes conflict between: bobvehicleequipment, bobplates\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"bob-alien-orange-alloy\"] then\n    local item = data.raw.item[\"bob-alien-orange-alloy\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"bob-alien-orange-alloy\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"bob-alien-orange-alloy-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"bob-alien-orange-alloy-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_URANIUM-238_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_URANIUM-238"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item uranium-238",
      "lua_code": "\n-- Generic compatibility patch for uranium-238\n-- Fixes conflict between: bobplates, More_Ammo, PlutoniumEnergy, vtk-cannon-turret, metal-and-stars, StopgapNukes, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"uranium-238\"] then\n    local item = data.raw.item[\"uranium-238\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"uranium-238\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"uranium-238-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"uranium-238-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_HEAT-PIPE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_HEAT-PIPE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item heat-pipe",
      "lua_code": "\n-- Generic compatibility patch for heat-pipe\n-- Fixes conflict between: cubium, Hovercrafts, bobpower, secretas, metal-and-stars, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"heat-pipe\"] then\n    local item = data.raw.item[\"heat-pipe\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"heat-pipe\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"heat-pipe-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"heat-pipe-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ACCUMULATOR_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ACCUMULATOR"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item accumulator",
      "lua_code": "\n-- Generic compatibility patch for accumulator\n-- Fixes conflict between: slp-dyson-sphere-reworked, cubium, RampantFixed, snouz-big-accumulator, bobpower, metal-and-stars, Kux-OrbitalIonCannon\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"accumulator\"] then\n    local item = data.raw.item[\"accumulator\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"accumulator\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"accumulator-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"accumulator-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOILER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BOILER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item boiler",
      "lua_code": "\n-- Generic compatibility patch for boiler\n-- Fixes conflict between: corrundum, bobpower, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"boiler\"] then\n    local item = data.raw.item[\"boiler\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"boiler\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"boiler-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"boiler-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_HEAT-EXCHANGER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_HEAT-EXCHANGER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item heat-exchanger",
      "lua_code": "\n-- Generic compatibility patch for heat-exchanger\n-- Fixes conflict between: Hovercrafts, bobpower\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"heat-exchanger\"] then\n    local item = data.raw.item[\"heat-exchanger\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"heat-exchanger\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"heat-exchanger-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"heat-exchanger-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_NUCLEAR-REACTOR_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_NUCLEAR-REACTOR"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item nuclear-reactor",
      "lua_code": "\n-- Generic compatibility patch for nuclear-reactor\n-- Fixes conflict between: bobpower, RampantFixed\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"nuclear-reactor\"] then\n    local item = data.raw.item[\"nuclear-reactor\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"nuclear-reactor\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"nuclear-reactor-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"nuclear-reactor-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_MEDIUM-ELECTRIC-POLE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_MEDIUM-ELECTRIC-POLE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item medium-electric-pole",
      "lua_code": "\n-- Generic compatibility patch for medium-electric-pole\n-- Fixes conflict between: bobpower, snouz-big-solar-panel, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"medium-electric-pole\"] then\n    local item = data.raw.item[\"medium-electric-pole\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"medium-electric-pole\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"medium-electric-pole-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"medium-electric-pole-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SUBSTATION_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SUBSTATION"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item substation",
      "lua_code": "\n-- Generic compatibility patch for substation\n-- Fixes conflict between: bobpower, Krastorio2-spaced-out, snouz_better_substation\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"substation\"] then\n    local item = data.raw.item[\"substation\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"substation\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"substation-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"substation-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SOLAR-PANEL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SOLAR-PANEL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item solar-panel",
      "lua_code": "\n-- Generic compatibility patch for solar-panel\n-- Fixes conflict between: slp-dyson-sphere-reworked, bobpower, snouz-big-solar-panel, secretas, Kux-OrbitalIonCannon, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"solar-panel\"] then\n    local item = data.raw.item[\"solar-panel\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"solar-panel\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"solar-panel-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"solar-panel-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_STEAM-ENGINE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_STEAM-ENGINE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item steam-engine",
      "lua_code": "\n-- Generic compatibility patch for steam-engine\n-- Fixes conflict between: corrundum, bobpower, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"steam-engine\"] then\n    local item = data.raw.item[\"steam-engine\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"steam-engine\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"steam-engine-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"steam-engine-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_STEAM-TURBINE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_STEAM-TURBINE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item steam-turbine",
      "lua_code": "\n-- Generic compatibility patch for steam-turbine\n-- Fixes conflict between: bobpower, secretas, corrundum, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"steam-turbine\"] then\n    local item = data.raw.item[\"steam-turbine\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"steam-turbine\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"steam-turbine-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"steam-turbine-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PRODUCTIVITY-MODULE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PRODUCTIVITY-MODULE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item productivity-module",
      "lua_code": "\n-- Generic compatibility patch for productivity-module\n-- Fixes conflict between: cubium, crushing-industry, bobvehicleequipment\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"productivity-module\"] then\n    local item = data.raw.item[\"productivity-module\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"productivity-module\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"productivity-module-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"productivity-module-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FIREARM-MAGAZINE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_FIREARM-MAGAZINE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item firearm-magazine",
      "lua_code": "\n-- Generic compatibility patch for firearm-magazine\n-- Fixes conflict between: More_Ammo, cubium, castra\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"firearm-magazine\"] then\n    local item = data.raw.item[\"firearm-magazine\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"firearm-magazine\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"firearm-magazine-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"firearm-magazine-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PIERCING-ROUNDS-MAGAZINE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PIERCING-ROUNDS-MAGAZINE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item piercing-rounds-magazine",
      "lua_code": "\n-- Generic compatibility patch for piercing-rounds-magazine\n-- Fixes conflict between: cubium, More_Ammo, PlutoniumEnergy, castra, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"piercing-rounds-magazine\"] then\n    local item = data.raw.item[\"piercing-rounds-magazine\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"piercing-rounds-magazine\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"piercing-rounds-magazine-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"piercing-rounds-magazine-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_URANIUM-ROUNDS-MAGAZINE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_URANIUM-ROUNDS-MAGAZINE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item uranium-rounds-magazine",
      "lua_code": "\n-- Generic compatibility patch for uranium-rounds-magazine\n-- Fixes conflict between: StopgapNukes, Cerys-Moon-of-Fulgora, castra\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"uranium-rounds-magazine\"] then\n    local item = data.raw.item[\"uranium-rounds-magazine\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"uranium-rounds-magazine\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"uranium-rounds-magazine-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"uranium-rounds-magazine-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LITHIUM-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_LITHIUM-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item lithium-plate",
      "lua_code": "\n-- Generic compatibility patch for lithium-plate\n-- Fixes conflict between: slp-dyson-sphere-reworked, cubium, VoidProcessing, castra, secretas, metal-and-stars, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"lithium-plate\"] then\n    local item = data.raw.item[\"lithium-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"lithium-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"lithium-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"lithium-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SUPERCAPACITOR_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SUPERCAPACITOR"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item supercapacitor",
      "lua_code": "\n-- Generic compatibility patch for supercapacitor\n-- Fixes conflict between: cubium, RampantFixed, castra, tenebris-prime, secretas, metal-and-stars, lignumis\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"supercapacitor\"] then\n    local item = data.raw.item[\"supercapacitor\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"supercapacitor\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"supercapacitor-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"supercapacitor-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_HOLMIUM-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_HOLMIUM-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item holmium-plate",
      "lua_code": "\n-- Generic compatibility patch for holmium-plate\n-- Fixes conflict between: cubium, VoidProcessing, castra, secretas, metal-and-stars, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"holmium-plate\"] then\n    local item = data.raw.item[\"holmium-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"holmium-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"holmium-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"holmium-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_QUANTUM-PROCESSOR_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_QUANTUM-PROCESSOR"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item quantum-processor",
      "lua_code": "\n-- Generic compatibility patch for quantum-processor\n-- Fixes conflict between: slp-dyson-sphere-reworked, cubium, RampantFixed, VoidProcessing, castra, Krastorio2-spaced-out, promethium-quality\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"quantum-processor\"] then\n    local item = data.raw.item[\"quantum-processor\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"quantum-processor\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"quantum-processor-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"quantum-processor-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_POISON-CAPSULE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_POISON-CAPSULE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item poison-capsule",
      "lua_code": "\n-- Generic compatibility patch for poison-capsule\n-- Fixes conflict between: Krastorio2-spaced-out, castra\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"poison-capsule\"] then\n    local item = data.raw.item[\"poison-capsule\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"poison-capsule\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"poison-capsule-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"poison-capsule-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ROCKET-FUEL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ROCKET-FUEL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item rocket-fuel",
      "lua_code": "\n-- Generic compatibility patch for rocket-fuel\n-- Fixes conflict between: cubium, lignumis, VoidProcessing, PlutoniumEnergy, castra, tenebris-prime, StopgapNukes, metal-and-stars, corrundum, Kux-OrbitalIonCannon, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"rocket-fuel\"] then\n    local item = data.raw.item[\"rocket-fuel\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"rocket-fuel\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"rocket-fuel-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"rocket-fuel-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_CARBON-FIBER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_CARBON-FIBER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item carbon-fiber",
      "lua_code": "\n-- Generic compatibility patch for carbon-fiber\n-- Fixes conflict between: slp-dyson-sphere-reworked, cubium, lilys-cubeine, castra, secretas, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"carbon-fiber\"] then\n    local item = data.raw.item[\"carbon-fiber\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"carbon-fiber\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"carbon-fiber-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"carbon-fiber-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ANCIENT-STRUCTURE-REPAIR-PART_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ANCIENT-STRUCTURE-REPAIR-PART"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item ancient-structure-repair-part",
      "lua_code": "\n-- Generic compatibility patch for ancient-structure-repair-part\n-- Fixes conflict between: Cerys-Moon-of-Fulgora, cerys-lunaponics\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"ancient-structure-repair-part\"] then\n    local item = data.raw.item[\"ancient-structure-repair-part\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"ancient-structure-repair-part\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"ancient-structure-repair-part-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"ancient-structure-repair-part-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_CERYS-NITROGEN-RICH-MINERALS_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_CERYS-NITROGEN-RICH-MINERALS"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item cerys-nitrogen-rich-minerals",
      "lua_code": "\n-- Generic compatibility patch for cerys-nitrogen-rich-minerals\n-- Fixes conflict between: Cerys-Moon-of-Fulgora, cerys-lunaponics\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"cerys-nitrogen-rich-minerals\"] then\n    local item = data.raw.item[\"cerys-nitrogen-rich-minerals\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"cerys-nitrogen-rich-minerals\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"cerys-nitrogen-rich-minerals-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"cerys-nitrogen-rich-minerals-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_TIN-ORE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_TIN-ORE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item tin-ore",
      "lua_code": "\n-- Generic compatibility patch for tin-ore\n-- Fixes conflict between: crushing-industry, cerys-lunaponics\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"tin-ore\"] then\n    local item = data.raw.item[\"tin-ore\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"tin-ore\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"tin-ore-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"tin-ore-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PLUTONIUM-238_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PLUTONIUM-238"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item plutonium-238",
      "lua_code": "\n-- Generic compatibility patch for plutonium-238\n-- Fixes conflict between: PlutoniumEnergy, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"plutonium-238\"] then\n    local item = data.raw.item[\"plutonium-238\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"plutonium-238\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"plutonium-238-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"plutonium-238-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PLUTONIUM-ROUNDS-MAGAZINE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PLUTONIUM-ROUNDS-MAGAZINE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item plutonium-rounds-magazine",
      "lua_code": "\n-- Generic compatibility patch for plutonium-rounds-magazine\n-- Fixes conflict between: PlutoniumEnergy, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"plutonium-rounds-magazine\"] then\n    local item = data.raw.item[\"plutonium-rounds-magazine\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"plutonium-rounds-magazine\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"plutonium-rounds-magazine-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"plutonium-rounds-magazine-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_NUCLEAR-FUEL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_NUCLEAR-FUEL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item nuclear-fuel",
      "lua_code": "\n-- Generic compatibility patch for nuclear-fuel\n-- Fixes conflict between: metal-and-stars, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"nuclear-fuel\"] then\n    local item = data.raw.item[\"nuclear-fuel\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"nuclear-fuel\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"nuclear-fuel-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"nuclear-fuel-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PLUTONIUM-FUEL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PLUTONIUM-FUEL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item plutonium-fuel",
      "lua_code": "\n-- Generic compatibility patch for plutonium-fuel\n-- Fixes conflict between: PlutoniumEnergy, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"plutonium-fuel\"] then\n    local item = data.raw.item[\"plutonium-fuel\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"plutonium-fuel\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"plutonium-fuel-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"plutonium-fuel-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_URANIUM-CANNON-SHELL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_URANIUM-CANNON-SHELL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item uranium-cannon-shell",
      "lua_code": "\n-- Generic compatibility patch for uranium-cannon-shell\n-- Fixes conflict between: Cerys-Moon-of-Fulgora, lilys-cubeine\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"uranium-cannon-shell\"] then\n    local item = data.raw.item[\"uranium-cannon-shell\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"uranium-cannon-shell\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"uranium-cannon-shell-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"uranium-cannon-shell-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PLUTONIUM-CANNON-SHELL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PLUTONIUM-CANNON-SHELL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item plutonium-cannon-shell",
      "lua_code": "\n-- Generic compatibility patch for plutonium-cannon-shell\n-- Fixes conflict between: PlutoniumEnergy, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"plutonium-cannon-shell\"] then\n    local item = data.raw.item[\"plutonium-cannon-shell\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"plutonium-cannon-shell\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"plutonium-cannon-shell-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"plutonium-cannon-shell-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_EXPLOSIVE-PLUTONIUM-CANNON-SHELL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_EXPLOSIVE-PLUTONIUM-CANNON-SHELL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item explosive-plutonium-cannon-shell",
      "lua_code": "\n-- Generic compatibility patch for explosive-plutonium-cannon-shell\n-- Fixes conflict between: PlutoniumEnergy, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"explosive-plutonium-cannon-shell\"] then\n    local item = data.raw.item[\"explosive-plutonium-cannon-shell\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"explosive-plutonium-cannon-shell\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"explosive-plutonium-cannon-shell-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"explosive-plutonium-cannon-shell-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_HOLMIUM-ORE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_HOLMIUM-ORE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item holmium-ore",
      "lua_code": "\n-- Generic compatibility patch for holmium-ore\n-- Fixes conflict between: metal-and-stars, crushing-industry, Cerys-Moon-of-Fulgora, fulgora-coralmium-agriculture\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"holmium-ore\"] then\n    local item = data.raw.item[\"holmium-ore\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"holmium-ore\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"holmium-ore-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"holmium-ore-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LITHIUM_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_LITHIUM"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item lithium",
      "lua_code": "\n-- Generic compatibility patch for lithium\n-- Fixes conflict between: metal-and-stars, crushing-industry, Cerys-Moon-of-Fulgora\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"lithium\"] then\n    local item = data.raw.item[\"lithium\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"lithium\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"lithium-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"lithium-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ARTILLERY-SHELL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ARTILLERY-SHELL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item artillery-shell",
      "lua_code": "\n-- Generic compatibility patch for artillery-shell\n-- Fixes conflict between: StopgapNukes, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora, lilys-cubeine\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"artillery-shell\"] then\n    local item = data.raw.item[\"artillery-shell\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"artillery-shell\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"artillery-shell-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"artillery-shell-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SPEED-MODULE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SPEED-MODULE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item speed-module",
      "lua_code": "\n-- Generic compatibility patch for speed-module\n-- Fixes conflict between: Hovercrafts, Cold_biters\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"speed-module\"] then\n    local item = data.raw.item[\"speed-module\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"speed-module\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"speed-module-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"speed-module-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_GOLD-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_GOLD-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item gold-plate",
      "lua_code": "\n-- Generic compatibility patch for gold-plate\n-- Fixes conflict between: metal-and-stars, lignumis, common-prototypes, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"gold-plate\"] then\n    local item = data.raw.item[\"gold-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"gold-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"gold-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"gold-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_GOLD-CABLE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_GOLD-CABLE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item gold-cable",
      "lua_code": "\n-- Generic compatibility patch for gold-cable\n-- Fixes conflict between: metal-and-stars, lignumis, common-prototypes\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"gold-cable\"] then\n    local item = data.raw.item[\"gold-cable\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"gold-cable\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"gold-cable-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"gold-cable-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_NEODYMIUM-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_NEODYMIUM-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item neodymium-plate",
      "lua_code": "\n-- Generic compatibility patch for neodymium-plate\n-- Fixes conflict between: metal-and-stars, common-prototypes\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"neodymium-plate\"] then\n    local item = data.raw.item[\"neodymium-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"neodymium-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"neodymium-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"neodymium-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_GOLD-ORE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_GOLD-ORE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item gold-ore",
      "lua_code": "\n-- Generic compatibility patch for gold-ore\n-- Fixes conflict between: lignumis, common-prototypes, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"gold-ore\"] then\n    local item = data.raw.item[\"gold-ore\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"gold-ore\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"gold-ore-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"gold-ore-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SILICA-SAND_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SILICA-SAND"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item silica-sand",
      "lua_code": "\n-- Generic compatibility patch for silica-sand\n-- Fixes conflict between: metal-and-stars, common-prototypes\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"silica-sand\"] then\n    local item = data.raw.item[\"silica-sand\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"silica-sand\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"silica-sand-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"silica-sand-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_GLASS-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_GLASS-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item glass-plate",
      "lua_code": "\n-- Generic compatibility patch for glass-plate\n-- Fixes conflict between: metal-and-stars, common-prototypes\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"glass-plate\"] then\n    local item = data.raw.item[\"glass-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"glass-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"glass-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"glass-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_GLASS-BILLET_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_GLASS-BILLET"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item glass-billet",
      "lua_code": "\n-- Generic compatibility patch for glass-billet\n-- Fixes conflict between: metal-and-stars, common-prototypes\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"glass-billet\"] then\n    local item = data.raw.item[\"glass-billet\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"glass-billet\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"glass-billet-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"glass-billet-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_NEODYMIUM-ORE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_NEODYMIUM-ORE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item neodymium-ore",
      "lua_code": "\n-- Generic compatibility patch for neodymium-ore\n-- Fixes conflict between: metal-and-stars, common-prototypes\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"neodymium-ore\"] then\n    local item = data.raw.item[\"neodymium-ore\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"neodymium-ore\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"neodymium-ore-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"neodymium-ore-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_INVERTED-MICROCUBE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_INVERTED-MICROCUBE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item inverted-microcube",
      "lua_code": "\n-- Generic compatibility patch for inverted-microcube\n-- Fixes conflict between: corrundum, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"inverted-microcube\"] then\n    local item = data.raw.item[\"inverted-microcube\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"inverted-microcube\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"inverted-microcube-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"inverted-microcube-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_INVERTED-DORMANT-MICROCUBE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_INVERTED-DORMANT-MICROCUBE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item inverted-dormant-microcube",
      "lua_code": "\n-- Generic compatibility patch for inverted-dormant-microcube\n-- Fixes conflict between: corrundum, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"inverted-dormant-microcube\"] then\n    local item = data.raw.item[\"inverted-dormant-microcube\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"inverted-dormant-microcube\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"inverted-dormant-microcube-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"inverted-dormant-microcube-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_RAW-FISH_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_RAW-FISH"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item raw-fish",
      "lua_code": "\n-- Generic compatibility patch for raw-fish\n-- Fixes conflict between: metal-and-stars, corrundum, enemyracemanager\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"raw-fish\"] then\n    local item = data.raw.item[\"raw-fish\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"raw-fish\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"raw-fish-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"raw-fish-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BITER-EGG_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BITER-EGG"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item biter-egg",
      "lua_code": "\n-- Generic compatibility patch for biter-egg\n-- Fixes conflict between: corrundum, Krastorio2-spaced-out, secretas, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"biter-egg\"] then\n    local item = data.raw.item[\"biter-egg\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"biter-egg\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"biter-egg-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"biter-egg-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LAB_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_LAB"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item lab",
      "lua_code": "\n-- Generic compatibility patch for lab\n-- Fixes conflict between: corrundum, Moshine, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"lab\"] then\n    local item = data.raw.item[\"lab\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"lab\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"lab-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"lab-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ROCKET_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ROCKET"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item rocket",
      "lua_code": "\n-- Generic compatibility patch for rocket\n-- Fixes conflict between: corrundum, StopgapNukes, secretas, lilys-cubeine\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"rocket\"] then\n    local item = data.raw.item[\"rocket\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"rocket\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"rocket-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"rocket-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_TUNGSTEN-CARBIDE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_TUNGSTEN-CARBIDE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item tungsten-carbide",
      "lua_code": "\n-- Generic compatibility patch for tungsten-carbide\n-- Fixes conflict between: cubium, lilys-cubeine, vulcanus-sulfuric-bacteria, crushing-industry, lignumis, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"tungsten-carbide\"] then\n    local item = data.raw.item[\"tungsten-carbide\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"tungsten-carbide\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"tungsten-carbide-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"tungsten-carbide-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_TUNGSTEN-ORE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_TUNGSTEN-ORE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item tungsten-ore",
      "lua_code": "\n-- Generic compatibility patch for tungsten-ore\n-- Fixes conflict between: crushing-industry, vulcanus-sulfuric-bacteria\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"tungsten-ore\"] then\n    local item = data.raw.item[\"tungsten-ore\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"tungsten-ore\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"tungsten-ore-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"tungsten-ore-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LEAD-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_LEAD-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item lead-plate",
      "lua_code": "\n-- Generic compatibility patch for lead-plate\n-- Fixes conflict between: PlutoniumEnergy, crushing-industry\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"lead-plate\"] then\n    local item = data.raw.item[\"lead-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"lead-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"lead-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"lead-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_TITANIUM-PLATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_TITANIUM-PLATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item titanium-plate",
      "lua_code": "\n-- Generic compatibility patch for titanium-plate\n-- Fixes conflict between: crushing-industry, Fluid-level-indicator\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"titanium-plate\"] then\n    local item = data.raw.item[\"titanium-plate\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"titanium-plate\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"titanium-plate-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"titanium-plate-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ENERGIZED-MICROCUBE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ENERGIZED-MICROCUBE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item energized-microcube",
      "lua_code": "\n-- Generic compatibility patch for energized-microcube\n-- Fixes conflict between: cubium, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"energized-microcube\"] then\n    local item = data.raw.item[\"energized-microcube\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"energized-microcube\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"energized-microcube-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"energized-microcube-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_DORMANT-MICROCUBE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_DORMANT-MICROCUBE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item dormant-microcube",
      "lua_code": "\n-- Generic compatibility patch for dormant-microcube\n-- Fixes conflict between: cubium, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"dormant-microcube\"] then\n    local item = data.raw.item[\"dormant-microcube\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"dormant-microcube\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"dormant-microcube-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"dormant-microcube-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ICE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_ICE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item ice",
      "lua_code": "\n-- Generic compatibility patch for ice\n-- Fixes conflict between: metal-and-stars, cubium, Krastorio2-spaced-out, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"ice\"] then\n    local item = data.raw.item[\"ice\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"ice\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"ice-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"ice-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_JELLY_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_JELLY"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item jelly",
      "lua_code": "\n-- Generic compatibility patch for jelly\n-- Fixes conflict between: cubium, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"jelly\"] then\n    local item = data.raw.item[\"jelly\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"jelly\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"jelly-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"jelly-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_AUTOMATION-SCIENCE-PACK_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_AUTOMATION-SCIENCE-PACK"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item automation-science-pack",
      "lua_code": "\n-- Generic compatibility patch for automation-science-pack\n-- Fixes conflict between: cubium, Igrys\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"automation-science-pack\"] then\n    local item = data.raw.item[\"automation-science-pack\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"automation-science-pack\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"automation-science-pack-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"automation-science-pack-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_RAIL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_RAIL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item rail",
      "lua_code": "\n-- Generic compatibility patch for rail\n-- Fixes conflict between: foundry-restructuring, cubium\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"rail\"] then\n    local item = data.raw.item[\"rail\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"rail\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"rail-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"rail-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PROMETHIUM-ASTEROID-CHUNK_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_PROMETHIUM-ASTEROID-CHUNK"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item promethium-asteroid-chunk",
      "lua_code": "\n-- Generic compatibility patch for promethium-asteroid-chunk\n-- Fixes conflict between: slp-dyson-sphere-reworked, cubium, promethium-quality, VoidProcessing\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"promethium-asteroid-chunk\"] then\n    local item = data.raw.item[\"promethium-asteroid-chunk\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"promethium-asteroid-chunk\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"promethium-asteroid-chunk-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"promethium-asteroid-chunk-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_TURBO-TRANSPORT-BELT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_TURBO-TRANSPORT-BELT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item turbo-transport-belt",
      "lua_code": "\n-- Generic compatibility patch for turbo-transport-belt\n-- Fixes conflict between: cubium, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"turbo-transport-belt\"] then\n    local item = data.raw.item[\"turbo-transport-belt\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"turbo-transport-belt\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"turbo-transport-belt-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"turbo-transport-belt-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_TURBO-UNDERGROUND-BELT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_TURBO-UNDERGROUND-BELT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item turbo-underground-belt",
      "lua_code": "\n-- Generic compatibility patch for turbo-underground-belt\n-- Fixes conflict between: cubium, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"turbo-underground-belt\"] then\n    local item = data.raw.item[\"turbo-underground-belt\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"turbo-underground-belt\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"turbo-underground-belt-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"turbo-underground-belt-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_TURBO-SPLITTER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_TURBO-SPLITTER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item turbo-splitter",
      "lua_code": "\n-- Generic compatibility patch for turbo-splitter\n-- Fixes conflict between: cubium, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"turbo-splitter\"] then\n    local item = data.raw.item[\"turbo-splitter\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"turbo-splitter\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"turbo-splitter-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"turbo-splitter-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FOUNDRY_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_FOUNDRY"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item foundry",
      "lua_code": "\n-- Generic compatibility patch for foundry\n-- Fixes conflict between: cubium, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"foundry\"] then\n    local item = data.raw.item[\"foundry\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"foundry\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"foundry-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"foundry-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_EFFICIENCY-MODULE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_EFFICIENCY-MODULE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item efficiency-module",
      "lua_code": "\n-- Generic compatibility patch for efficiency-module\n-- Fixes conflict between: Electric Furnaces, Hovercrafts\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"efficiency-module\"] then\n    local item = data.raw.item[\"efficiency-module\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"efficiency-module\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"efficiency-module-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"efficiency-module-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SMALL-LAMP_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SMALL-LAMP"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item small-lamp",
      "lua_code": "\n-- Generic compatibility patch for small-lamp\n-- Fixes conflict between: terrapalus, secretas, metal-and-stars, Krastorio2-spaced-out, Fluid-level-indicator\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"small-lamp\"] then\n    local item = data.raw.item[\"small-lamp\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"small-lamp\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"small-lamp-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"small-lamp-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_KR-STEEL-PIPE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_KR-STEEL-PIPE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item kr-steel-pipe",
      "lua_code": "\n-- Generic compatibility patch for kr-steel-pipe\n-- Fixes conflict between: Krastorio2-spaced-out, Fluid-level-indicator\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"kr-steel-pipe\"] then\n    local item = data.raw.item[\"kr-steel-pipe\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"kr-steel-pipe\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"kr-steel-pipe-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"kr-steel-pipe-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_STACK-INSERTER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_STACK-INSERTER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item stack-inserter",
      "lua_code": "\n-- Generic compatibility patch for stack-inserter\n-- Fixes conflict between: long_stack_inserter, Krastorio2-spaced-out\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"stack-inserter\"] then\n    local item = data.raw.item[\"stack-inserter\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"stack-inserter\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"stack-inserter-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"stack-inserter-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_WOOD-DARTS-MAGAZINE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_WOOD-DARTS-MAGAZINE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item wood-darts-magazine",
      "lua_code": "\n-- Generic compatibility patch for wood-darts-magazine\n-- Fixes conflict between: lignumis, wood-military\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"wood-darts-magazine\"] then\n    local item = data.raw.item[\"wood-darts-magazine\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"wood-darts-magazine\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"wood-darts-magazine-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"wood-darts-magazine-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_WOOD-ARMOR_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_WOOD-ARMOR"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item wood-armor",
      "lua_code": "\n-- Generic compatibility patch for wood-armor\n-- Fixes conflict between: lignumis, wood-military\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"wood-armor\"] then\n    local item = data.raw.item[\"wood-armor\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"wood-armor\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"wood-armor-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"wood-armor-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BIG-MINING-DRILL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_BIG-MINING-DRILL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item big-mining-drill",
      "lua_code": "\n-- Generic compatibility patch for big-mining-drill\n-- Fixes conflict between: OmegaDrill, lilys-cubeine\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"big-mining-drill\"] then\n    local item = data.raw.item[\"big-mining-drill\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"big-mining-drill\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"big-mining-drill-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"big-mining-drill-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_CANNON-SHELL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_CANNON-SHELL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item cannon-shell",
      "lua_code": "\n-- Generic compatibility patch for cannon-shell\n-- Fixes conflict between: PlutoniumEnergy, lilys-cubeine\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"cannon-shell\"] then\n    local item = data.raw.item[\"cannon-shell\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"cannon-shell\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"cannon-shell-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"cannon-shell-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SPACE-PLATFORM-FOUNDATION_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_SPACE-PLATFORM-FOUNDATION"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item space-platform-foundation",
      "lua_code": "\n-- Generic compatibility patch for space-platform-foundation\n-- Fixes conflict between: metal-and-stars, Moshine, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"space-platform-foundation\"] then\n    local item = data.raw.item[\"space-platform-foundation\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"space-platform-foundation\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"space-platform-foundation-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"space-platform-foundation-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_NEODYMIUM_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_NEODYMIUM"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item neodymium",
      "lua_code": "\n-- Generic compatibility patch for neodymium\n-- Fixes conflict between: Moshine, Moshine-assets\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"neodymium\"] then\n    local item = data.raw.item[\"neodymium\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"neodymium\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"neodymium-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"neodymium-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_DISPLAY-PANEL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_DISPLAY-PANEL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item display-panel",
      "lua_code": "\n-- Generic compatibility patch for display-panel\n-- Fixes conflict between: Moshine, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"display-panel\"] then\n    local item = data.raw.item[\"display-panel\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"display-panel\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"display-panel-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"display-panel-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_CONSTANT-COMBINATOR_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_CONSTANT-COMBINATOR"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item constant-combinator",
      "lua_code": "\n-- Generic compatibility patch for constant-combinator\n-- Fixes conflict between: PavementDriveAssistContinued, Moshine, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"constant-combinator\"] then\n    local item = data.raw.item[\"constant-combinator\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"constant-combinator\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"constant-combinator-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"constant-combinator-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_DEPLETED-URANIUM-FUEL-CELL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_DEPLETED-URANIUM-FUEL-CELL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item depleted-uranium-fuel-cell",
      "lua_code": "\n-- Generic compatibility patch for depleted-uranium-fuel-cell\n-- Fixes conflict between: PlutoniumEnergy, StopgapNukes, secretas\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"depleted-uranium-fuel-cell\"] then\n    local item = data.raw.item[\"depleted-uranium-fuel-cell\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"depleted-uranium-fuel-cell\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"depleted-uranium-fuel-cell-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"depleted-uranium-fuel-cell-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_JR-BORAX_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_JR-BORAX"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item jr-borax",
      "lua_code": "\n-- Generic compatibility patch for jr-borax\n-- Fixes conflict between: quirkycat_boron, quirkycat_base\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"jr-borax\"] then\n    local item = data.raw.item[\"jr-borax\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"jr-borax\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"jr-borax-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"jr-borax-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_JR-BORON_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_JR-BORON"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item jr-boron",
      "lua_code": "\n-- Generic compatibility patch for jr-boron\n-- Fixes conflict between: quirkycat_boron, quirkycat_base\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"jr-boron\"] then\n    local item = data.raw.item[\"jr-boron\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"jr-boron\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"jr-boron-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"jr-boron-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_JR-BORON-ROD_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_JR-BORON-ROD"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item jr-boron-rod",
      "lua_code": "\n-- Generic compatibility patch for jr-boron-rod\n-- Fixes conflict between: quirkycat_boron, quirkycat_base\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"jr-boron-rod\"] then\n    local item = data.raw.item[\"jr-boron-rod\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"jr-boron-rod\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"jr-boron-rod-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"jr-boron-rod-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_CHARCOAL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM_CHARCOAL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item charcoal",
      "lua_code": "\n-- Generic compatibility patch for charcoal\n-- Fixes conflict between: quirkycat_machines, wood-industry, quirkycat_base\n-- Severity: MEDIUM\n-- Type: item\n\n\nif data.raw.item[\"charcoal\"] then\n    local item = data.raw.item[\"charcoal\"]\n    \n    -- Skip creating alternatives if original item has no icon (required for items)\n    if not item.icon then\n        log(\"Factorio Harmonizer: Skipping alternatives for \" .. \"charcoal\" .. \" - no icon found\")\n        return\n    end\n    \n    -- Ensure item compatibility across mods\n    -- Create alternative versions if needed\n    \n    -- Alternative 1: Basic version\n    local basic_item = {\n        type = \"item\",\n        name = \"charcoal-basic\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = item.stack_size or 100,\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-basic\"\n    }\n    \n    data:extend({basic_item})\n    \n    -- Alternative 2: Advanced version\n    local advanced_item = {\n        type = \"item\",\n        name = \"charcoal-advanced\",\n        icon = item.icon,\n        icon_size = item.icon_size or 64,\n        stack_size = math.max(1, math.floor((item.stack_size or 100) * 0.5)),\n        subgroup = item.subgroup or \"intermediate-product\",\n        order = (item.order or \"a\") .. \"-advanced\"\n    }\n    \n    data:extend({advanced_item})\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "medium",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_WATER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_WATER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid water",
      "lua_code": "\n-- Generic compatibility patch for water\n-- Fixes conflict between: aai-industry, Cold_biters, StopgapNukes, crushing-industry, terrapalus, bobelectronics, cubium, bobgreenhouse, corrundum, wood-industry, Cerys-Moon-of-Fulgora, planet-muluna, Moshine-assets, dea-dia-system, WaterExtractor, cerys-lunaponics, secretas, quirkycat_boron, Paracelsin, bobplates, castra, vulcanus-sulfuric-bacteria, astroponics, metal-and-stars, lignumis, Krastorio2-spaced-out\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"water\"] then\n    local prototype = data.raw[\"fluid\"][\"water\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.water\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_CRUDE-OIL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_CRUDE-OIL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid crude-oil",
      "lua_code": "\n-- Generic compatibility patch for crude-oil\n-- Fixes conflict between: planet-muluna, bobplates, aai-industry, castra, boblogistics, astroponics, metal-and-stars, bobelectronics, janus\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"crude-oil\"] then\n    local prototype = data.raw[\"fluid\"][\"crude-oil\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.crude-oil\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_HEAVY-OIL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_HEAVY-OIL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid heavy-oil",
      "lua_code": "\n-- Generic compatibility patch for heavy-oil\n-- Fixes conflict between: planet-muluna, bobplates, aai-industry, lilys-cubeine, castra, boblogistics, terrapalus, metal-and-stars, secretas, wood-industry, bobelectronics, corrundum, Krastorio2-spaced-out\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"heavy-oil\"] then\n    local prototype = data.raw[\"fluid\"][\"heavy-oil\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.heavy-oil\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LIGHT-OIL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_LIGHT-OIL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid light-oil",
      "lua_code": "\n-- Generic compatibility patch for light-oil\n-- Fixes conflict between: cubium, planet-muluna, bobplates, aai-industry, lilys-cubeine, Cold_biters, castra, boblogistics, metal-and-stars, wood-industry, bobelectronics, corrundum, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"light-oil\"] then\n    local prototype = data.raw[\"fluid\"][\"light-oil\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.light-oil\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PETROLEUM-GAS_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_PETROLEUM-GAS"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid petroleum-gas",
      "lua_code": "\n-- Generic compatibility patch for petroleum-gas\n-- Fixes conflict between: cubium, Moshine-assets, planet-muluna, bobplates, bobgreenhouse, aai-industry, lilys-cubeine, VoidProcessing, Cold_biters, castra, boblogistics, wood-industry, bobelectronics, corrundum, StopgapNukes, Krastorio2-spaced-out\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"petroleum-gas\"] then\n    local prototype = data.raw[\"fluid\"][\"petroleum-gas\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.petroleum-gas\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_VIRTUAL-SIGNAL-UTILITY_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_VIRTUAL-SIGNAL-UTILITY"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup virtual-signal-utility",
      "lua_code": "\n-- Generic compatibility patch for virtual-signal-utility\n-- Fixes conflict between: informatron, aai-signals\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"virtual-signal-utility\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"virtual-signal-utility\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.virtual-signal-utility\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SIGNAL-WAYPOINT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_VIRTUAL-SIGNAL_SIGNAL-WAYPOINT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for virtual-signal signal-waypoint",
      "lua_code": "\n-- Generic compatibility patch for signal-waypoint\n-- Fixes conflict between: SpidertronPatrols, aai-signals\n-- Severity: LOW\n-- Type: virtual-signal\n\n\nif data.raw[\"virtual-signal\"] and data.raw[\"virtual-signal\"][\"signal-waypoint\"] then\n    local prototype = data.raw[\"virtual-signal\"][\"signal-waypoint\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"virtual-signal.signal-waypoint\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FLAMETHROWER-AMMO_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_AMMO_FLAMETHROWER-AMMO"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for ammo flamethrower-ammo",
      "lua_code": "\n-- Generic compatibility patch for flamethrower-ammo\n-- Fixes conflict between: aai-vehicles-flame-tumbler, aai-vehicles-flame-tank\n-- Severity: LOW\n-- Type: ammo\n\n\nif data.raw[\"ammo\"] and data.raw[\"ammo\"][\"flamethrower-ammo\"] then\n    local prototype = data.raw[\"ammo\"][\"flamethrower-ammo\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"ammo.flamethrower-ammo\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_MEDIUM-SCORCHMARK-TINTABLE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CREATE-ENTITY_MEDIUM-SCORCHMARK-TINTABLE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for create-entity medium-scorchmark-tintable",
      "lua_code": "\n-- Generic compatibility patch for medium-scorchmark-tintable\n-- Fixes conflict between: Moshine, aai-vehicles-ironclad, StopgapNukes\n-- Severity: LOW\n-- Type: create-entity\n\n\nif data.raw[\"create-entity\"] and data.raw[\"create-entity\"][\"medium-scorchmark-tintable\"] then\n    local prototype = data.raw[\"create-entity\"][\"medium-scorchmark-tintable\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"create-entity.medium-scorchmark-tintable\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_EXPLOSION_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CREATE-ENTITY_EXPLOSION"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for create-entity explosion",
      "lua_code": "\n-- Generic compatibility patch for explosion\n-- Fixes conflict between: cubium, RampantFixed, More_Ammo, aai-vehicles-ironclad, wood-military, RPGsystem, bobvehicleequipment, Krastorio2-spaced-out\n-- Severity: LOW\n-- Type: create-entity\n\n\nif data.raw[\"create-entity\"] and data.raw[\"create-entity\"][\"explosion\"] then\n    local prototype = data.raw[\"create-entity\"][\"explosion\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"create-entity.explosion\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ADVANCED-CENTRIFUGING-OR-CRAFTING_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_RECIPE-CATEGORY_ADVANCED-CENTRIFUGING-OR-CRAFTING"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for recipe-category advanced-centrifuging-or-crafting",
      "lua_code": "\n-- Generic compatibility patch for advanced-centrifuging-or-crafting\n-- Fixes conflict between: Age-of-Production, atan-nuclear-science\n-- Severity: LOW\n-- Type: recipe-category\n\n\nif data.raw[\"recipe-category\"] and data.raw[\"recipe-category\"][\"advanced-centrifuging-or-crafting\"] then\n    local prototype = data.raw[\"recipe-category\"][\"advanced-centrifuging-or-crafting\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"recipe-category.advanced-centrifuging-or-crafting\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BIG-EXPLOSION_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CREATE-ENTITY_BIG-EXPLOSION"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for create-entity big-explosion",
      "lua_code": "\n-- Generic compatibility patch for big-explosion\n-- Fixes conflict between: RPGsystem, StopgapNukes, Krastorio2-spaced-out, Aircraft-space-age\n-- Severity: LOW\n-- Type: create-entity\n\n\nif data.raw[\"create-entity\"] and data.raw[\"create-entity\"][\"big-explosion\"] then\n    local prototype = data.raw[\"create-entity\"][\"big-explosion\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"create-entity.big-explosion\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_EXPLOSION-GUNSHOT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CREATE-EXPLOSION_EXPLOSION-GUNSHOT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for create-explosion explosion-gunshot",
      "lua_code": "\n-- Generic compatibility patch for explosion-gunshot\n-- Fixes conflict between: More_Ammo, PlutoniumEnergy, Aircraft-space-age, alien-module, vtk-cannon-turret, StopgapNukes, metal-and-stars, lignumis, Krastorio2-spaced-out, grappling-gun\n-- Severity: LOW\n-- Type: create-explosion\n\n\nif data.raw[\"create-explosion\"] and data.raw[\"create-explosion\"][\"explosion-gunshot\"] then\n    local prototype = data.raw[\"create-explosion\"][\"explosion-gunshot\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"create-explosion.explosion-gunshot\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LUBRICANT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_LUBRICANT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid lubricant",
      "lua_code": "\n-- Generic compatibility patch for lubricant\n-- Fixes conflict between: bobplates, dea-dia-system, lilys-cubeine, Hovercrafts, Cold_biters, Aircraft-space-age, castra, tenebris-prime, secretas, metal-and-stars, promethium-quality, Cerys-Moon-of-Fulgora\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"lubricant\"] then\n    local prototype = data.raw[\"fluid\"][\"lubricant\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.lubricant\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_EXPLOSION-HIT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CREATE-ENTITY_EXPLOSION-HIT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for create-entity explosion-hit",
      "lua_code": "\n-- Generic compatibility patch for explosion-hit\n-- Fixes conflict between: Electric_flying_enemies, PlutoniumEnergy, alien-module, corrundum, StopgapNukes, Krastorio2-spaced-out\n-- Severity: LOW\n-- Type: create-entity\n\n\nif data.raw[\"create-entity\"] and data.raw[\"create-entity\"][\"explosion-hit\"] then\n    local prototype = data.raw[\"create-entity\"][\"explosion-hit\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"create-entity.explosion-hit\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_AMMONIA_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_AMMONIA"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid ammonia",
      "lua_code": "\n-- Generic compatibility patch for ammonia\n-- Fixes conflict between: aquilo-seabloom-algaculture, cubium, promethium-quality, cerys-lunaponics, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"ammonia\"] then\n    local prototype = data.raw[\"fluid\"][\"ammonia\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.ammonia\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_STEAM_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_STEAM"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid steam",
      "lua_code": "\n-- Generic compatibility patch for steam\n-- Fixes conflict between: aquilo-seabloom-algaculture, cubium, Moshine-assets, bobplates, dea-dia-system, Cold_biters, vulcanus-sulfuric-bacteria, Moshine, secretas, wood-industry, corrundum, lignumis, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"steam\"] then\n    local prototype = data.raw[\"fluid\"][\"steam\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.steam\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FLUOROKETONE-HOT_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_FLUOROKETONE-HOT"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid fluoroketone-hot",
      "lua_code": "\n-- Generic compatibility patch for fluoroketone-hot\n-- Fixes conflict between: aquilo-seabloom-algaculture, corrundum, VoidProcessing, cubium\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"fluoroketone-hot\"] then\n    local prototype = data.raw[\"fluid\"][\"fluoroketone-hot\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.fluoroketone-hot\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FLUOROKETONE-COLD_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_FLUOROKETONE-COLD"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid fluoroketone-cold",
      "lua_code": "\n-- Generic compatibility patch for fluoroketone-cold\n-- Fixes conflict between: aquilo-seabloom-algaculture, cubium, promethium-quality, VoidProcessing, metal-and-stars, corrundum, Krastorio2-spaced-out\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"fluoroketone-cold\"] then\n    local prototype = data.raw[\"fluid\"][\"fluoroketone-cold\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.fluoroketone-cold\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LIQUID-FERTILIZER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_LIQUID-FERTILIZER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid liquid-fertilizer",
      "lua_code": "\n-- Generic compatibility patch for liquid-fertilizer\n-- Fixes conflict between: astroponics, lilys-cubeine, cerys-lunaponics\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"liquid-fertilizer\"] then\n    local prototype = data.raw[\"fluid\"][\"liquid-fertilizer\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.liquid-fertilizer\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BIOSLURRY_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_BIOSLURRY"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid bioslurry",
      "lua_code": "\n-- Generic compatibility patch for bioslurry\n-- Fixes conflict between: astroponics, lilys-cubeine\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"bioslurry\"] then\n    local prototype = data.raw[\"fluid\"][\"bioslurry\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.bioslurry\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SULFURIC-ACID_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_SULFURIC-ACID"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid sulfuric-acid",
      "lua_code": "\n-- Generic compatibility patch for sulfuric-acid\n-- Fixes conflict between: slp-dyson-sphere-reworked, cubium, bobplates, More_Ammo, PlutoniumEnergy, Cold_biters, castra, tenebris-prime, vulcanus-sulfuric-bacteria, Moshine, crushing-industry, astroponics, se-space-trains, wood-industry, bobelectronics, corrundum, Krastorio2-spaced-out, Cerys-Moon-of-Fulgora\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"sulfuric-acid\"] then\n    local prototype = data.raw[\"fluid\"][\"sulfuric-acid\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.sulfuric-acid\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ARTILLERY-CANNON-MUZZLE-FLASH_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CREATE-EXPLOSION_ARTILLERY-CANNON-MUZZLE-FLASH"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for create-explosion artillery-cannon-muzzle-flash",
      "lua_code": "\n-- Generic compatibility patch for artillery-cannon-muzzle-flash\n-- Fixes conflict between: PlutoniumEnergy, atomic-artillery-reborn, wood-military, StopgapNukes, Krastorio2-spaced-out\n-- Severity: LOW\n-- Type: create-explosion\n\n\nif data.raw[\"create-explosion\"] and data.raw[\"create-explosion\"][\"artillery-cannon-muzzle-flash\"] then\n    local prototype = data.raw[\"create-explosion\"][\"artillery-cannon-muzzle-flash\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"create-explosion.artillery-cannon-muzzle-flash\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ELECTRONICS_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_RECIPE-CATEGORY_BOB-ELECTRONICS"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for recipe-category bob-electronics",
      "lua_code": "\n-- Generic compatibility patch for bob-electronics\n-- Fixes conflict between: bobelectronics, bobassembly\n-- Severity: LOW\n-- Type: recipe-category\n\n\nif data.raw[\"recipe-category\"] and data.raw[\"recipe-category\"][\"bob-electronics\"] then\n    local prototype = data.raw[\"recipe-category\"][\"bob-electronics\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"recipe-category.bob-electronics\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ELECTRONICS-MACHINE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_RECIPE-CATEGORY_BOB-ELECTRONICS-MACHINE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for recipe-category bob-electronics-machine",
      "lua_code": "\n-- Generic compatibility patch for bob-electronics-machine\n-- Fixes conflict between: bobelectronics, bobassembly\n-- Severity: LOW\n-- Type: recipe-category\n\n\nif data.raw[\"recipe-category\"] and data.raw[\"recipe-category\"][\"bob-electronics-machine\"] then\n    local prototype = data.raw[\"recipe-category\"][\"bob-electronics-machine\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"recipe-category.bob-electronics-machine\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ELECTRONICS-WITH-FLUID_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_RECIPE-CATEGORY_BOB-ELECTRONICS-WITH-FLUID"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for recipe-category bob-electronics-with-fluid",
      "lua_code": "\n-- Generic compatibility patch for bob-electronics-with-fluid\n-- Fixes conflict between: bobelectronics, bobassembly\n-- Severity: LOW\n-- Type: recipe-category\n\n\nif data.raw[\"recipe-category\"] and data.raw[\"recipe-category\"][\"bob-electronics-with-fluid\"] then\n    local prototype = data.raw[\"recipe-category\"][\"bob-electronics-with-fluid\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"recipe-category.bob-electronics-with-fluid\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ASSEMBLY-MACHINE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_BOB-ASSEMBLY-MACHINE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup bob-assembly-machine",
      "lua_code": "\n-- Generic compatibility patch for bob-assembly-machine\n-- Fixes conflict between: bobassembly, bobplates\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"bob-assembly-machine\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"bob-assembly-machine\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.bob-assembly-machine\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-CHEMICAL-MACHINE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_BOB-CHEMICAL-MACHINE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup bob-chemical-machine",
      "lua_code": "\n-- Generic compatibility patch for bob-chemical-machine\n-- Fixes conflict between: bobassembly, bobplates\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"bob-chemical-machine\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"bob-chemical-machine\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.bob-chemical-machine\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ELECTROLYSER-MACHINE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_BOB-ELECTROLYSER-MACHINE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup bob-electrolyser-machine",
      "lua_code": "\n-- Generic compatibility patch for bob-electrolyser-machine\n-- Fixes conflict between: bobassembly, bobplates\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"bob-electrolyser-machine\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"bob-electrolyser-machine\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.bob-electrolyser-machine\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-REFINERY-MACHINE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_BOB-REFINERY-MACHINE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup bob-refinery-machine",
      "lua_code": "\n-- Generic compatibility patch for bob-refinery-machine\n-- Fixes conflict between: bobassembly, bobplates\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"bob-refinery-machine\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"bob-refinery-machine\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.bob-refinery-machine\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-RESOURCE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_BOB-RESOURCE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup bob-resource",
      "lua_code": "\n-- Generic compatibility patch for bob-resource\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"bob-resource\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"bob-resource\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.bob-resource\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ELECTRONIC-COMPONENTS_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_BOB-ELECTRONIC-COMPONENTS"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup bob-electronic-components",
      "lua_code": "\n-- Generic compatibility patch for bob-electronic-components\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"bob-electronic-components\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"bob-electronic-components\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.bob-electronic-components\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-BOARDS_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_BOB-BOARDS"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup bob-boards",
      "lua_code": "\n-- Generic compatibility patch for bob-boards\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"bob-boards\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"bob-boards\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.bob-boards\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ELECTRONIC-BOARDS_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_BOB-ELECTRONIC-BOARDS"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup bob-electronic-boards",
      "lua_code": "\n-- Generic compatibility patch for bob-electronic-boards\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"bob-electronic-boards\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"bob-electronic-boards\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.bob-electronic-boards\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-FERRIC-CHLORIDE-SOLUTION_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_BOB-FERRIC-CHLORIDE-SOLUTION"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid bob-ferric-chloride-solution",
      "lua_code": "\n-- Generic compatibility patch for bob-ferric-chloride-solution\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"bob-ferric-chloride-solution\"] then\n    local prototype = data.raw[\"fluid\"][\"bob-ferric-chloride-solution\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.bob-ferric-chloride-solution\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-COMPUTER-AGE-1_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_PRODUCE-PER-HOUR-ACHIEVEMENT_BOB-COMPUTER-AGE-1"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for produce-per-hour-achievement bob-computer-age-1",
      "lua_code": "\n-- Generic compatibility patch for bob-computer-age-1\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: LOW\n-- Type: produce-per-hour-achievement\n\n\nif data.raw[\"produce-per-hour-achievement\"] and data.raw[\"produce-per-hour-achievement\"][\"bob-computer-age-1\"] then\n    local prototype = data.raw[\"produce-per-hour-achievement\"][\"bob-computer-age-1\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"produce-per-hour-achievement.bob-computer-age-1\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-COMPUTER-AGE-2_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_PRODUCE-PER-HOUR-ACHIEVEMENT_BOB-COMPUTER-AGE-2"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for produce-per-hour-achievement bob-computer-age-2",
      "lua_code": "\n-- Generic compatibility patch for bob-computer-age-2\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: LOW\n-- Type: produce-per-hour-achievement\n\n\nif data.raw[\"produce-per-hour-achievement\"] and data.raw[\"produce-per-hour-achievement\"][\"bob-computer-age-2\"] then\n    local prototype = data.raw[\"produce-per-hour-achievement\"][\"bob-computer-age-2\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"produce-per-hour-achievement.bob-computer-age-2\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-COMPUTER-AGE-3_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_PRODUCE-PER-HOUR-ACHIEVEMENT_BOB-COMPUTER-AGE-3"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for produce-per-hour-achievement bob-computer-age-3",
      "lua_code": "\n-- Generic compatibility patch for bob-computer-age-3\n-- Fixes conflict between: bobelectronics, bobplates\n-- Severity: LOW\n-- Type: produce-per-hour-achievement\n\n\nif data.raw[\"produce-per-hour-achievement\"] and data.raw[\"produce-per-hour-achievement\"][\"bob-computer-age-3\"] then\n    local prototype = data.raw[\"produce-per-hour-achievement\"][\"bob-computer-age-3\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"produce-per-hour-achievement.bob-computer-age-3\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-PLASMA_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_DAMAGE-TYPE_BOB-PLASMA"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for damage-type bob-plasma",
      "lua_code": "\n-- Generic compatibility patch for bob-plasma\n-- Fixes conflict between: bobenemies, bobvehicleequipment\n-- Severity: LOW\n-- Type: damage-type\n\n\nif data.raw[\"damage-type\"] and data.raw[\"damage-type\"][\"bob-plasma\"] then\n    local prototype = data.raw[\"damage-type\"][\"bob-plasma\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"damage-type.bob-plasma\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-INSERTER-LONG_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CUSTOM-INPUT_BOB-INSERTER-LONG"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for custom-input bob-inserter-long",
      "lua_code": "\n-- Generic compatibility patch for bob-inserter-long\n-- Fixes conflict between: boblogistics, bobinserters\n-- Severity: LOW\n-- Type: custom-input\n\n\nif data.raw[\"custom-input\"] and data.raw[\"custom-input\"][\"bob-inserter-long\"] then\n    local prototype = data.raw[\"custom-input\"][\"bob-inserter-long\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"custom-input.bob-inserter-long\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SIGNAL-X_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_VIRTUAL_SIGNAL-X"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for virtual signal-X",
      "lua_code": "\n-- Generic compatibility patch for signal-X\n-- Fixes conflict between: boblogistics, Krastorio2-spaced-out\n-- Severity: LOW\n-- Type: virtual\n\n\nif data.raw[\"virtual\"] and data.raw[\"virtual\"][\"signal-X\"] then\n    local prototype = data.raw[\"virtual\"][\"signal-X\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"virtual.signal-X\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SIGNAL-Y_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_VIRTUAL_SIGNAL-Y"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for virtual signal-Y",
      "lua_code": "\n-- Generic compatibility patch for signal-Y\n-- Fixes conflict between: boblogistics, Krastorio2-spaced-out\n-- Severity: LOW\n-- Type: virtual\n\n\nif data.raw[\"virtual\"] and data.raw[\"virtual\"][\"signal-Y\"] then\n    local prototype = data.raw[\"virtual\"][\"signal-Y\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"virtual.signal-Y\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SIGNAL-Z_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_VIRTUAL_SIGNAL-Z"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for virtual signal-Z",
      "lua_code": "\n-- Generic compatibility patch for signal-Z\n-- Fixes conflict between: boblogistics, Krastorio2-spaced-out\n-- Severity: LOW\n-- Type: virtual\n\n\nif data.raw[\"virtual\"] and data.raw[\"virtual\"][\"signal-Z\"] then\n    local prototype = data.raw[\"virtual\"][\"signal-Z\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"virtual.signal-Z\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SIGNAL-T_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_VIRTUAL_SIGNAL-T"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for virtual signal-T",
      "lua_code": "\n-- Generic compatibility patch for signal-T\n-- Fixes conflict between: boblogistics, Krastorio2-spaced-out, RampantFixed\n-- Severity: LOW\n-- Type: virtual\n\n\nif data.raw[\"virtual\"] and data.raw[\"virtual\"][\"signal-T\"] then\n    local prototype = data.raw[\"virtual\"][\"signal-T\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"virtual.signal-T\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ORES_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_BOB-ORES"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup bob-ores",
      "lua_code": "\n-- Generic compatibility patch for bob-ores\n-- Fixes conflict between: bobores, bobplates\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"bob-ores\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"bob-ores\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.bob-ores\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-GEMS-ORE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_BOB-GEMS-ORE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup bob-gems-ore",
      "lua_code": "\n-- Generic compatibility patch for bob-gems-ore\n-- Fixes conflict between: bobores, bobplates\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"bob-gems-ore\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"bob-gems-ore\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.bob-gems-ore\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BOB-ALIEN-ACID_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_BOB-ALIEN-ACID"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid bob-alien-acid",
      "lua_code": "\n-- Generic compatibility patch for bob-alien-acid\n-- Fixes conflict between: bobvehicleequipment, bobplates\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"bob-alien-acid\"] then\n    local prototype = data.raw[\"fluid\"][\"bob-alien-acid\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.bob-alien-acid\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SIGNAL-A_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_VIRTUAL_SIGNAL-A"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for virtual signal-A",
      "lua_code": "\n-- Generic compatibility patch for signal-A\n-- Fixes conflict between: metal-and-stars, bobpower, Krastorio2-spaced-out, snouz-big-accumulator\n-- Severity: LOW\n-- Type: virtual\n\n\nif data.raw[\"virtual\"] and data.raw[\"virtual\"][\"signal-A\"] then\n    local prototype = data.raw[\"virtual\"][\"signal-A\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"virtual.signal-A\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SMALL-SCORCHMARK_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CREATE-ENTITY_SMALL-SCORCHMARK"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for create-entity small-scorchmark",
      "lua_code": "\n-- Generic compatibility patch for small-scorchmark\n-- Fixes conflict between: Krastorio2-spaced-out, PlutoniumEnergy, bobvehicleequipment\n-- Severity: LOW\n-- Type: create-entity\n\n\nif data.raw[\"create-entity\"] and data.raw[\"create-entity\"][\"small-scorchmark\"] then\n    local prototype = data.raw[\"create-entity\"][\"small-scorchmark\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"create-entity.small-scorchmark\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_HYDROGEN-SULFIDE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_HYDROGEN-SULFIDE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid hydrogen-sulfide",
      "lua_code": "\n-- Generic compatibility patch for hydrogen-sulfide\n-- Fixes conflict between: corrundum, StopgapNukes, castra\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"hydrogen-sulfide\"] then\n    local prototype = data.raw[\"fluid\"][\"hydrogen-sulfide\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.hydrogen-sulfide\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_MOLTEN-IRON_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_MOLTEN-IRON"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid molten-iron",
      "lua_code": "\n-- Generic compatibility patch for molten-iron\n-- Fixes conflict between: Paracelsin, Moshine-assets, foundry-restructuring, common-prototypes, castra, Moshine, crushing-industry, metal-and-stars, Krastorio2-spaced-out\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"molten-iron\"] then\n    local prototype = data.raw[\"fluid\"][\"molten-iron\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.molten-iron\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_HOLMIUM-SOLUTION_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_HOLMIUM-SOLUTION"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid holmium-solution",
      "lua_code": "\n-- Generic compatibility patch for holmium-solution\n-- Fixes conflict between: Cerys-Moon-of-Fulgora, castra, fulgora-coralmium-agriculture\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"holmium-solution\"] then\n    local prototype = data.raw[\"fluid\"][\"holmium-solution\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.holmium-solution\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_METHANE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_METHANE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid methane",
      "lua_code": "\n-- Generic compatibility patch for methane\n-- Fixes conflict between: Cerys-Moon-of-Fulgora, cerys-lunaponics\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"methane\"] then\n    local prototype = data.raw[\"fluid\"][\"methane\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.methane\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_NITRIC-ACID_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_NITRIC-ACID"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid nitric-acid",
      "lua_code": "\n-- Generic compatibility patch for nitric-acid\n-- Fixes conflict between: Cerys-Moon-of-Fulgora, cerys-lunaponics\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"nitric-acid\"] then\n    local prototype = data.raw[\"fluid\"][\"nitric-acid\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.nitric-acid\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_COLD_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_DAMAGE-TYPE_COLD"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for damage-type cold",
      "lua_code": "\n-- Generic compatibility patch for cold\n-- Fixes conflict between: Cold_biters, enemyracemanager\n-- Severity: LOW\n-- Type: damage-type\n\n\nif data.raw[\"damage-type\"] and data.raw[\"damage-type\"][\"cold\"] then\n    local prototype = data.raw[\"damage-type\"][\"cold\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"damage-type.cold\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SPACE-NANITES_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_SPACE-NANITES"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup space-nanites",
      "lua_code": "\n-- Generic compatibility patch for space-nanites\n-- Fixes conflict between: metal-and-stars, common-prototypes\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"space-nanites\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"space-nanites\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.space-nanites\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SHIPYARD-PROCESSES_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_SHIPYARD-PROCESSES"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup shipyard-processes",
      "lua_code": "\n-- Generic compatibility patch for shipyard-processes\n-- Fixes conflict between: metal-and-stars, common-prototypes\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"shipyard-processes\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"shipyard-processes\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.shipyard-processes\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_NIX-PROCESSES_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_NIX-PROCESSES"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup nix-processes",
      "lua_code": "\n-- Generic compatibility patch for nix-processes\n-- Fixes conflict between: metal-and-stars, common-prototypes\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"nix-processes\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"nix-processes\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.nix-processes\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_RINGWORLD-PROCESSES_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_RINGWORLD-PROCESSES"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup ringworld-processes",
      "lua_code": "\n-- Generic compatibility patch for ringworld-processes\n-- Fixes conflict between: metal-and-stars, common-prototypes\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"ringworld-processes\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"ringworld-processes\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.ringworld-processes\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_MIRANDUS-PROCESSES_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_MIRANDUS-PROCESSES"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup mirandus-processes",
      "lua_code": "\n-- Generic compatibility patch for mirandus-processes\n-- Fixes conflict between: metal-and-stars, common-prototypes\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"mirandus-processes\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"mirandus-processes\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.mirandus-processes\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_QUANTUM-PROCESSING_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_QUANTUM-PROCESSING"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup quantum-processing",
      "lua_code": "\n-- Generic compatibility patch for quantum-processing\n-- Fixes conflict between: metal-and-stars, common-prototypes\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"quantum-processing\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"quantum-processing\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.quantum-processing\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_QUANTUM-CONVERSION_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_QUANTUM-CONVERSION"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup quantum-conversion",
      "lua_code": "\n-- Generic compatibility patch for quantum-conversion\n-- Fixes conflict between: metal-and-stars, common-prototypes\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"quantum-conversion\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"quantum-conversion\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.quantum-conversion\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LIQUID-FUEL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_ITEM-SUBGROUP_LIQUID-FUEL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for item-subgroup liquid-fuel",
      "lua_code": "\n-- Generic compatibility patch for liquid-fuel\n-- Fixes conflict between: metal-and-stars, common-prototypes\n-- Severity: LOW\n-- Type: item-subgroup\n\n\nif data.raw[\"item-subgroup\"] and data.raw[\"item-subgroup\"][\"liquid-fuel\"] then\n    local prototype = data.raw[\"item-subgroup\"][\"liquid-fuel\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"item-subgroup.liquid-fuel\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_MOLTEN-GOLD_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_MOLTEN-GOLD"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid molten-gold",
      "lua_code": "\n-- Generic compatibility patch for molten-gold\n-- Fixes conflict between: lignumis, common-prototypes\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"molten-gold\"] then\n    local prototype = data.raw[\"fluid\"][\"molten-gold\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.molten-gold\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_MOLTEN-GLASS_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_MOLTEN-GLASS"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid molten-glass",
      "lua_code": "\n-- Generic compatibility patch for molten-glass\n-- Fixes conflict between: crushing-industry, common-prototypes\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"molten-glass\"] then\n    local prototype = data.raw[\"fluid\"][\"molten-glass\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.molten-glass\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_DREAM-CONCENTRATE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_DREAM-CONCENTRATE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid dream-concentrate",
      "lua_code": "\n-- Generic compatibility patch for dream-concentrate\n-- Fixes conflict between: corrundum, secretas, cubium\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"dream-concentrate\"] then\n    local prototype = data.raw[\"fluid\"][\"dream-concentrate\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.dream-concentrate\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_THRUSTER-FUEL_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_THRUSTER-FUEL"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid thruster-fuel",
      "lua_code": "\n-- Generic compatibility patch for thruster-fuel\n-- Fixes conflict between: slp-dyson-sphere-reworked, corrundum, VoidProcessing, cubium\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"thruster-fuel\"] then\n    local prototype = data.raw[\"fluid\"][\"thruster-fuel\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.thruster-fuel\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_THRUSTER-OXIDIZER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_THRUSTER-OXIDIZER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid thruster-oxidizer",
      "lua_code": "\n-- Generic compatibility patch for thruster-oxidizer\n-- Fixes conflict between: slp-dyson-sphere-reworked, corrundum, cubium\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"thruster-oxidizer\"] then\n    local prototype = data.raw[\"fluid\"][\"thruster-oxidizer\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.thruster-oxidizer\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BASIC-CRUSHING_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_RECIPE-CATEGORY_BASIC-CRUSHING"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for recipe-category basic-crushing",
      "lua_code": "\n-- Generic compatibility patch for basic-crushing\n-- Fixes conflict between: crushing-industry, quirkycat_base\n-- Severity: LOW\n-- Type: recipe-category\n\n\nif data.raw[\"recipe-category\"] and data.raw[\"recipe-category\"][\"basic-crushing\"] then\n    local prototype = data.raw[\"recipe-category\"][\"basic-crushing\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"recipe-category.basic-crushing\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_BASIC-CRUSHING-OR-CRAFTING_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_RECIPE-CATEGORY_BASIC-CRUSHING-OR-CRAFTING"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for recipe-category basic-crushing-or-crafting",
      "lua_code": "\n-- Generic compatibility patch for basic-crushing-or-crafting\n-- Fixes conflict between: crushing-industry, wood-industry\n-- Severity: LOW\n-- Type: recipe-category\n\n\nif data.raw[\"recipe-category\"] and data.raw[\"recipe-category\"][\"basic-crushing-or-crafting\"] then\n    local prototype = data.raw[\"recipe-category\"][\"basic-crushing-or-crafting\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"recipe-category.basic-crushing-or-crafting\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_LAVA_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_LAVA"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid lava",
      "lua_code": "\n-- Generic compatibility patch for lava\n-- Fixes conflict between: foundry-restructuring, crushing-industry, metal-and-stars, vulcanus-sulfuric-bacteria\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"lava\"] then\n    local prototype = data.raw[\"fluid\"][\"lava\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.lava\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_SMALL-SCORCHMARK-TINTABLE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CREATE-ENTITY_SMALL-SCORCHMARK-TINTABLE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for create-entity small-scorchmark-tintable",
      "lua_code": "\n-- Generic compatibility patch for small-scorchmark-tintable\n-- Fixes conflict between: cubium, wood-military\n-- Severity: LOW\n-- Type: create-entity\n\n\nif data.raw[\"create-entity\"] and data.raw[\"create-entity\"][\"small-scorchmark-tintable\"] then\n    local prototype = data.raw[\"create-entity\"][\"small-scorchmark-tintable\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"create-entity.small-scorchmark-tintable\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ULTRADENSE-LAVA_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_ULTRADENSE-LAVA"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid ultradense-lava",
      "lua_code": "\n-- Generic compatibility patch for ultradense-lava\n-- Fixes conflict between: cubium, lilys-cubeine\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"ultradense-lava\"] then\n    local prototype = data.raw[\"fluid\"][\"ultradense-lava\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.ultradense-lava\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_MOLTEN-COPPER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_MOLTEN-COPPER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid molten-copper",
      "lua_code": "\n-- Generic compatibility patch for molten-copper\n-- Fixes conflict between: metal-and-stars, cubium, Moshine-assets, Krastorio2-spaced-out\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"molten-copper\"] then\n    local prototype = data.raw[\"fluid\"][\"molten-copper\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.molten-copper\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_ELECTROLYTE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_ELECTROLYTE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid electrolyte",
      "lua_code": "\n-- Generic compatibility patch for electrolyte\n-- Fixes conflict between: cubium, fulgora-coralmium-agriculture\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"electrolyte\"] then\n    local prototype = data.raw[\"fluid\"][\"electrolyte\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.electrolyte\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_HEALING_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_DAMAGE-TYPE_HEALING"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for damage-type healing",
      "lua_code": "\n-- Generic compatibility patch for healing\n-- Fixes conflict between: enemyracemanager, RampantFixed\n-- Severity: LOW\n-- Type: damage-type\n\n\nif data.raw[\"damage-type\"] and data.raw[\"damage-type\"][\"healing\"] then\n    local prototype = data.raw[\"damage-type\"][\"healing\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"damage-type.healing\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PROTOSS--ARCHON-HIT-EXPLOSION_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CREATE-EXPLOSION_PROTOSS--ARCHON-HIT-EXPLOSION"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for create-explosion protoss--archon-hit-explosion",
      "lua_code": "\n-- Generic compatibility patch for protoss--archon-hit-explosion\n-- Fixes conflict between: erm_toss, erm_toss_economy\n-- Severity: LOW\n-- Type: create-explosion\n\n\nif data.raw[\"create-explosion\"] and data.raw[\"create-explosion\"][\"protoss--archon-hit-explosion\"] then\n    local prototype = data.raw[\"create-explosion\"][\"protoss--archon-hit-explosion\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"create-explosion.protoss--archon-hit-explosion\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PROTOSS--CORSAIR-EXPLOSION_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CREATE-EXPLOSION_PROTOSS--CORSAIR-EXPLOSION"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for create-explosion protoss--corsair-explosion",
      "lua_code": "\n-- Generic compatibility patch for protoss--corsair-explosion\n-- Fixes conflict between: erm_toss, erm_toss_economy\n-- Severity: LOW\n-- Type: create-explosion\n\n\nif data.raw[\"create-explosion\"] and data.raw[\"create-explosion\"][\"protoss--corsair-explosion\"] then\n    local prototype = data.raw[\"create-explosion\"][\"protoss--corsair-explosion\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"create-explosion.protoss--corsair-explosion\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PROTOSS--DISRUPT-80_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CREATE-EXPLOSION_PROTOSS--DISRUPT-80"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for create-explosion protoss--disrupt-80",
      "lua_code": "\n-- Generic compatibility patch for protoss--disrupt-80\n-- Fixes conflict between: erm_toss, erm_toss_economy\n-- Severity: LOW\n-- Type: create-explosion\n\n\nif data.raw[\"create-explosion\"] and data.raw[\"create-explosion\"][\"protoss--disrupt-80\"] then\n    local prototype = data.raw[\"create-explosion\"][\"protoss--disrupt-80\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"create-explosion.protoss--disrupt-80\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_MEDIUM-EXPLOSION_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CREATE-EXPLOSION_MEDIUM-EXPLOSION"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for create-explosion medium-explosion",
      "lua_code": "\n-- Generic compatibility patch for medium-explosion\n-- Fixes conflict between: erm_zerg, erm_zerg_economy\n-- Severity: LOW\n-- Type: create-explosion\n\n\nif data.raw[\"create-explosion\"] and data.raw[\"create-explosion\"][\"medium-explosion\"] then\n    local prototype = data.raw[\"create-explosion\"][\"medium-explosion\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"create-explosion.medium-explosion\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FIRE-FLAME_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CREATE-FIRE_FIRE-FLAME"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for create-fire fire-flame",
      "lua_code": "\n-- Generic compatibility patch for fire-flame\n-- Fixes conflict between: Kux-OrbitalIonCannon, RPGsystem\n-- Severity: LOW\n-- Type: create-fire\n\n\nif data.raw[\"create-fire\"] and data.raw[\"create-fire\"][\"fire-flame\"] then\n    local prototype = data.raw[\"create-fire\"][\"fire-flame\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"create-fire.fire-flame\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_FIRE-FLAME-ON-TREE_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_CREATE-FIRE_FIRE-FLAME-ON-TREE"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for create-fire fire-flame-on-tree",
      "lua_code": "\n-- Generic compatibility patch for fire-flame-on-tree\n-- Fixes conflict between: More_Ammo, Kux-OrbitalIonCannon\n-- Severity: LOW\n-- Type: create-fire\n\n\nif data.raw[\"create-fire\"] and data.raw[\"create-fire\"][\"fire-flame-on-tree\"] then\n    local prototype = data.raw[\"create-fire\"][\"fire-flame-on-tree\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"create-fire.fire-flame-on-tree\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_HEAVY-WATER_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_HEAVY-WATER"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid heavy-water",
      "lua_code": "\n-- Generic compatibility patch for heavy-water\n-- Fixes conflict between: metal-and-stars, StopgapNukes\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"heavy-water\"] then\n    local prototype = data.raw[\"fluid\"][\"heavy-water\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.heavy-water\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_RAW-DATA_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_FLUID_RAW-DATA"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for fluid raw-data",
      "lua_code": "\n-- Generic compatibility patch for raw-data\n-- Fixes conflict between: Moshine, Moshine-assets\n-- Severity: LOW\n-- Type: fluid\n\n\nif data.raw[\"fluid\"] and data.raw[\"fluid\"][\"raw-data\"] then\n    local prototype = data.raw[\"fluid\"][\"raw-data\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"fluid.raw-data\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_PULVERISING_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_RECIPE-CATEGORY_PULVERISING"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for recipe-category pulverising",
      "lua_code": "\n-- Generic compatibility patch for pulverising\n-- Fixes conflict between: quirkycat_machines, quirkycat_base\n-- Severity: LOW\n-- Type: recipe-category\n\n\nif data.raw[\"recipe-category\"] and data.raw[\"recipe-category\"][\"pulverising\"] then\n    local prototype = data.raw[\"recipe-category\"][\"pulverising\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"recipe-category.pulverising\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    },
    {
      "patch_id": "PATCH_JR-FOUNDRY-SMELTING_GENERIC",
      "target_mod": "factorio-harmonizer-patch",
      "target_file": "data-final-fixes.lua",
      "issue_ids": [
        "CONFLICT_RECIPE-CATEGORY_JR-FOUNDRY-SMELTING"
      ],
      "patch_type": "generic_compatibility",
      "description": "Generic compatibility patch for recipe-category jr-foundry-smelting",
      "lua_code": "\n-- Generic compatibility patch for jr-foundry-smelting\n-- Fixes conflict between: quirkycat_machines, quirkycat_base\n-- Severity: LOW\n-- Type: recipe-category\n\n\nif data.raw[\"recipe-category\"] and data.raw[\"recipe-category\"][\"jr-foundry-smelting\"] then\n    local prototype = data.raw[\"recipe-category\"][\"jr-foundry-smelting\"]\n    \n    -- Generic compatibility fixes\n    -- Ensure prototype remains functional across mod combinations\n    \n    -- Log the conflict resolution\n    log(\"Factorio Harmonizer: Applied generic compatibility patch for \" .. \"recipe-category.jr-foundry-smelting\")\nend\n",
      "settings_code": "",
      "json_data": {},
      "estimated_impact": "low",
      "side_effects": []
    }
  ]
}